
INZYNIERKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008538  08008538  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008538  08008538  00018538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008540  08008540  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008540  08008540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08008548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200000c4  0800860c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800860c  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a06  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039d8  00000000  00000000  00039b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e58  00000000  00000000  0003fc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d88c  00000000  00000000  00069aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcbd1  00000000  00000000  0008733a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060e8  00000000  00000000  00183f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00189ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800837c 	.word	0x0800837c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0800837c 	.word	0x0800837c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_SystemReset+0x28>)
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <__NVIC_SystemReset+0x20>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	05fa0004 	.word	0x05fa0004

080005c8 <lcd_write_nibble>:

static bool previous_state_telephone = true;
static bool can_enter_key = false;

static void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <lcd_write_nibble+0x7c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 8000608:	f107 020f 	add.w	r2, r7, #15
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	214e      	movs	r1, #78	; 0x4e
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <lcd_write_nibble+0x80>)
 8000616:	f002 fbf3 	bl	8002e00 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 ffae 	bl	800257c <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 800062a:	f107 020f 	add.w	r2, r7, #15
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	214e      	movs	r1, #78	; 0x4e
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <lcd_write_nibble+0x80>)
 8000638:	f002 fbe2 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	200000f0 	.word	0x200000f0

0800064c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffad 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffa8 	bl	80005c8 <lcd_write_nibble>
	if(cmd == 0x01 || cmd == 0x02)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <lcd_send_cmd+0x38>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <lcd_send_cmd+0x3e>
	{
		HAL_Delay(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f001 ff79 	bl	800257c <HAL_Delay>
	}
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff8a 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff85 	bl	80005c8 <lcd_write_nibble>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <lcd_init>:

void lcd_init()
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f001 ff56 	bl	800257c <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ff78 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f001 ff4f 	bl	800257c <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff71 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 ff48 	bl	800257c <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2003      	movs	r0, #3
 80006f0:	f7ff ff6a 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 ff41 	bl	800257c <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff63 	bl	80005c8 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 8000702:	2028      	movs	r0, #40	; 0x28
 8000704:	f7ff ffa2 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff9f 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff9c 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff99 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 800071a:	2002      	movs	r0, #2
 800071c:	f001 ff2e 	bl	800257c <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	while(*str)
 800072c:	e006      	b.n	800073c <lcd_write_string+0x18>
	{
		lcd_send_data(*str++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffab 	bl	8000692 <lcd_send_data>
	while(*str)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <lcd_write_string+0xa>
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	460a      	mov	r2, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <lcd_set_cursor+0x1c>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d003      	beq.n	8000770 <lcd_set_cursor+0x22>
 8000768:	e005      	b.n	8000776 <lcd_set_cursor+0x28>
	{
		case 0:
			address = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
			break;
 800076e:	e004      	b.n	800077a <lcd_set_cursor+0x2c>
		case 1:
			address = 0x40;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	73fb      	strb	r3, [r7, #15]
			break;
 8000774:	e001      	b.n	800077a <lcd_set_cursor+0x2c>
		default:
			address = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	4413      	add	r3, r2
 8000780:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff5e 	bl	800064c <lcd_send_cmd>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_clear>:

void lcd_clear(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff55 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 feea 	bl	800257c <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lcd_backlight>:

void lcd_backlight(uint8_t state)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <lcd_backlight+0x18>
	{
		backlight_state = 1;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <lcd_backlight+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	} else
	{
		backlight_state = 0;
	}
}
 80007c2:	e002      	b.n	80007ca <lcd_backlight+0x1e>
		backlight_state = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <lcd_backlight+0x2c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <lcd_display>:

int lcd_number = LCD_1;
int back_condition = NO_BACK;

void lcd_display(bool current_state_telephone, bool current_state_key, char *key_buffer, char *access_key, char pressed_button, char *ble_cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	460b      	mov	r3, r1
 80007ec:	73bb      	strb	r3, [r7, #14]
	static bool if_key_entered = false;
	static bool cmd_1 = false;
	static bool cmd_2 = false;
	static bool cmd_3 = false;

	if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_RESET)
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	4898      	ldr	r0, [pc, #608]	; (8000a54 <lcd_display+0x278>)
 80007f4:	f002 fa20 	bl	8002c38 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d123      	bne.n	8000846 <lcd_display+0x6a>
	{
		delay(delay_second*2);
 80007fe:	4896      	ldr	r0, [pc, #600]	; (8000a58 <lcd_display+0x27c>)
 8000800:	f001 f92a 	bl	8001a58 <delay>

		switch(back_condition)
 8000804:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <lcd_display+0x280>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d014      	beq.n	8000836 <lcd_display+0x5a>
 800080c:	2b02      	cmp	r3, #2
 800080e:	dc19      	bgt.n	8000844 <lcd_display+0x68>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <lcd_display+0x3e>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d007      	beq.n	8000828 <lcd_display+0x4c>
		case BACK_8:
			lcd_number = LCD_8;
			back_condition = NO_BACK;
			break;
		default:
			break;
 8000818:	e014      	b.n	8000844 <lcd_display+0x68>
			lcd_number = LCD_2;
 800081a:	4b91      	ldr	r3, [pc, #580]	; (8000a60 <lcd_display+0x284>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 8000820:	4b8e      	ldr	r3, [pc, #568]	; (8000a5c <lcd_display+0x280>)
 8000822:	2203      	movs	r2, #3
 8000824:	601a      	str	r2, [r3, #0]
			break;
 8000826:	e00e      	b.n	8000846 <lcd_display+0x6a>
			lcd_number = LCD_6;
 8000828:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <lcd_display+0x284>)
 800082a:	2205      	movs	r2, #5
 800082c:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 800082e:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <lcd_display+0x280>)
 8000830:	2203      	movs	r2, #3
 8000832:	601a      	str	r2, [r3, #0]
			break;
 8000834:	e007      	b.n	8000846 <lcd_display+0x6a>
			lcd_number = LCD_8;
 8000836:	4b8a      	ldr	r3, [pc, #552]	; (8000a60 <lcd_display+0x284>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 800083c:	4b87      	ldr	r3, [pc, #540]	; (8000a5c <lcd_display+0x280>)
 800083e:	2203      	movs	r2, #3
 8000840:	601a      	str	r2, [r3, #0]
			break;
 8000842:	e000      	b.n	8000846 <lcd_display+0x6a>
			break;
 8000844:	bf00      	nop
		}
	}


	if(current_state_telephone != previous_state_telephone)
 8000846:	4b87      	ldr	r3, [pc, #540]	; (8000a64 <lcd_display+0x288>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	7bfa      	ldrb	r2, [r7, #15]
 800084c:	429a      	cmp	r2, r3
 800084e:	d012      	beq.n	8000876 <lcd_display+0x9a>
	{
		if(current_state_telephone == false)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	f083 0301 	eor.w	r3, r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <lcd_display+0x88>
		{
			lcd_number = LCD_1;
 800085c:	4b80      	ldr	r3, [pc, #512]	; (8000a60 <lcd_display+0x284>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e005      	b.n	8000870 <lcd_display+0x94>
		}else if(current_state_telephone == true)
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d002      	beq.n	8000870 <lcd_display+0x94>
		{
			lcd_number = LCD_2;
 800086a:	4b7d      	ldr	r3, [pc, #500]	; (8000a60 <lcd_display+0x284>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
		}
		previous_state_telephone = current_state_telephone;
 8000870:	4a7c      	ldr	r2, [pc, #496]	; (8000a64 <lcd_display+0x288>)
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	7013      	strb	r3, [r2, #0]
	}

	if(strlen(key_buffer) == 4)
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f7ff fcb4 	bl	80001e4 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	2b04      	cmp	r3, #4
 8000880:	d10c      	bne.n	800089c <lcd_display+0xc0>
	{
		if_key_entered = true;
 8000882:	4b79      	ldr	r3, [pc, #484]	; (8000a68 <lcd_display+0x28c>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
		if(strcmp(key_buffer, access_key) == 0)
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f7ff fca0 	bl	80001d0 <strcmp>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <lcd_display+0xc0>
		{
			if_key_correct = true;
 8000896:	4b75      	ldr	r3, [pc, #468]	; (8000a6c <lcd_display+0x290>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(if_key_entered == true)
 800089c:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <lcd_display+0x28c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00d      	beq.n	80008c0 <lcd_display+0xe4>
	{
		if(if_key_correct == true)
 80008a4:	4b71      	ldr	r3, [pc, #452]	; (8000a6c <lcd_display+0x290>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <lcd_display+0xd8>
		{
			lcd_number = LCD_4;
 80008ac:	4b6c      	ldr	r3, [pc, #432]	; (8000a60 <lcd_display+0x284>)
 80008ae:	2203      	movs	r2, #3
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	e002      	b.n	80008ba <lcd_display+0xde>
		} else
		{
			lcd_number = LCD_3;
 80008b4:	4b6a      	ldr	r3, [pc, #424]	; (8000a60 <lcd_display+0x284>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	601a      	str	r2, [r3, #0]
		}
		if_key_entered = false;
 80008ba:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <lcd_display+0x28c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	}

	if(pressed_button == 'A' && if_key_correct == true)
 80008c0:	7e3b      	ldrb	r3, [r7, #24]
 80008c2:	2b41      	cmp	r3, #65	; 0x41
 80008c4:	d109      	bne.n	80008da <lcd_display+0xfe>
 80008c6:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <lcd_display+0x290>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <lcd_display+0xfe>
	{
		lcd_number = LCD_6;
 80008ce:	4b64      	ldr	r3, [pc, #400]	; (8000a60 <lcd_display+0x284>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	601a      	str	r2, [r3, #0]
		if_key_correct = false;
 80008d4:	4b65      	ldr	r3, [pc, #404]	; (8000a6c <lcd_display+0x290>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp(ble_cmd, "open") == 0)
 80008da:	4965      	ldr	r1, [pc, #404]	; (8000a70 <lcd_display+0x294>)
 80008dc:	69f8      	ldr	r0, [r7, #28]
 80008de:	f7ff fc77 	bl	80001d0 <strcmp>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <lcd_display+0x120>
	{
		if(cmd_1 == true)
 80008e8:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <lcd_display+0x298>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <lcd_display+0x120>
		{
			lcd_number = LCD_7;
 80008f0:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <lcd_display+0x284>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	601a      	str	r2, [r3, #0]
			cmd_1 = false;
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <lcd_display+0x298>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "close") == 0)
 80008fc:	495e      	ldr	r1, [pc, #376]	; (8000a78 <lcd_display+0x29c>)
 80008fe:	69f8      	ldr	r0, [r7, #28]
 8000900:	f7ff fc66 	bl	80001d0 <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d109      	bne.n	800091e <lcd_display+0x142>
	{
		if(cmd_2 == true)
 800090a:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <lcd_display+0x2a0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <lcd_display+0x142>
		{
			lcd_number = LCD_8;
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <lcd_display+0x284>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
			cmd_2 = false;
 8000918:	4b58      	ldr	r3, [pc, #352]	; (8000a7c <lcd_display+0x2a0>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "reset") == 0)
 800091e:	4958      	ldr	r1, [pc, #352]	; (8000a80 <lcd_display+0x2a4>)
 8000920:	69f8      	ldr	r0, [r7, #28]
 8000922:	f7ff fc55 	bl	80001d0 <strcmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <lcd_display+0x164>
	{
		if(cmd_3 == true)
 800092c:	4b55      	ldr	r3, [pc, #340]	; (8000a84 <lcd_display+0x2a8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <lcd_display+0x164>
		{
			lcd_number = RST;
 8000934:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <lcd_display+0x284>)
 8000936:	2208      	movs	r2, #8
 8000938:	601a      	str	r2, [r3, #0]
			cmd_3 = false;
 800093a:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <lcd_display+0x2a8>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
		}
	}


	switch(lcd_number)
 8000940:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <lcd_display+0x284>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b08      	cmp	r3, #8
 8000946:	f200 81ff 	bhi.w	8000d48 <lcd_display+0x56c>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <lcd_display+0x174>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000975 	.word	0x08000975
 8000954:	080009c5 	.word	0x080009c5
 8000958:	08000aa9 	.word	0x08000aa9
 800095c:	08000b09 	.word	0x08000b09
 8000960:	08000b73 	.word	0x08000b73
 8000964:	08000bc3 	.word	0x08000bc3
 8000968:	08000c51 	.word	0x08000c51
 800096c:	08000cb1 	.word	0x08000cb1
 8000970:	08000d3f 	.word	0x08000d3f
	{
	case LCD_1:
		lcd_set_cursor(0, 0);
 8000974:	2100      	movs	r1, #0
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fee9 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 800097c:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <lcd_display+0x2ac>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fecf 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000986:	2100      	movs	r1, #0
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fee0 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <lcd_display+0x2b0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fec6 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000998:	2100      	movs	r1, #0
 800099a:	2001      	movs	r0, #1
 800099c:	f7ff fed7 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 80009a0:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <lcd_display+0x2ac>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff febd 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fece 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_not_set);
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <lcd_display+0x2b4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff feb4 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <lcd_display+0x284>)
 80009be:	2209      	movs	r2, #9
 80009c0:	601a      	str	r2, [r3, #0]
		break;
 80009c2:	e1c2      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_2:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 80009c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c8:	4822      	ldr	r0, [pc, #136]	; (8000a54 <lcd_display+0x278>)
 80009ca:	f002 f935 	bl	8002c38 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d10e      	bne.n	80009f2 <lcd_display+0x216>
		{
			lcd_clear();
 80009d4:	f7ff fee0 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 80009d8:	2100      	movs	r1, #0
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff feb7 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <lcd_display+0x2b8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe9d 	bl	8000724 <lcd_write_string>
			back_condition = BACK_2;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <lcd_display+0x280>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e02b      	b.n	8000a4a <lcd_display+0x26e>
		} else
		{
			lcd_set_cursor(0, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff feaa 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <lcd_display+0x2ac>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe90 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fea1 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <lcd_display+0x2bc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe87 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000a16:	2100      	movs	r1, #0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fe98 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <lcd_display+0x2ac>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe7e 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fe8f 	bl	800074e <lcd_set_cursor>
			lcd_write_string(telephone_set);
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <lcd_display+0x2c0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fe75 	bl	8000724 <lcd_write_string>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <lcd_display+0x2c4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f240 228a 	movw	r2, #650	; 0x28a
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34

			can_enter_key = true;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <lcd_display+0x2c8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <lcd_display+0x284>)
 8000a4c:	2209      	movs	r2, #9
 8000a4e:	601a      	str	r2, [r3, #0]
		break;
 8000a50:	e17b      	b.n	8000d4a <lcd_display+0x56e>
 8000a52:	bf00      	nop
 8000a54:	48000400 	.word	0x48000400
 8000a58:	01e84800 	.word	0x01e84800
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	200000e4 	.word	0x200000e4
 8000a64:	20000001 	.word	0x20000001
 8000a68:	200000e8 	.word	0x200000e8
 8000a6c:	200000e9 	.word	0x200000e9
 8000a70:	08008394 	.word	0x08008394
 8000a74:	200000ea 	.word	0x200000ea
 8000a78:	0800839c 	.word	0x0800839c
 8000a7c:	200000eb 	.word	0x200000eb
 8000a80:	080083a4 	.word	0x080083a4
 8000a84:	200000ec 	.word	0x200000ec
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	20000010 	.word	0x20000010
 8000a94:	20000014 	.word	0x20000014
 8000a98:	20000018 	.word	0x20000018
 8000a9c:	2000001c 	.word	0x2000001c
 8000aa0:	200003d8 	.word	0x200003d8
 8000aa4:	200000e0 	.word	0x200000e0
	case LCD_3:
		lcd_set_cursor(0, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe4f 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ab0:	4ba8      	ldr	r3, [pc, #672]	; (8000d54 <lcd_display+0x578>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe35 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe46 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000ac2:	4ba5      	ldr	r3, [pc, #660]	; (8000d58 <lcd_display+0x57c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe2c 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fe3d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ad4:	4b9f      	ldr	r3, [pc, #636]	; (8000d54 <lcd_display+0x578>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe23 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe34 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_bad);
 8000ae6:	4b9d      	ldr	r3, [pc, #628]	; (8000d5c <lcd_display+0x580>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe1a 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000af0:	4b9b      	ldr	r3, [pc, #620]	; (8000d60 <lcd_display+0x584>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000af6:	f000 ff9f 	bl	8001a38 <reset_buffer>

		delay(delay_second*2);
 8000afa:	489a      	ldr	r0, [pc, #616]	; (8000d64 <lcd_display+0x588>)
 8000afc:	f000 ffac 	bl	8001a58 <delay>

		lcd_number = LCD_2;
 8000b00:	4b99      	ldr	r3, [pc, #612]	; (8000d68 <lcd_display+0x58c>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
		break;
 8000b06:	e120      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_4:
		lcd_set_cursor(0, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fe1f 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b10:	4b90      	ldr	r3, [pc, #576]	; (8000d54 <lcd_display+0x578>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe05 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe16 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000b22:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <lcd_display+0x590>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdfc 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe0d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b34:	4b87      	ldr	r3, [pc, #540]	; (8000d54 <lcd_display+0x578>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fdf3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fe04 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_good);
 8000b46:	4b8a      	ldr	r3, [pc, #552]	; (8000d70 <lcd_display+0x594>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fdea 	bl	8000724 <lcd_write_string>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8000b50:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <lcd_display+0x598>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34

		can_enter_key = false;
 8000b5a:	4b81      	ldr	r3, [pc, #516]	; (8000d60 <lcd_display+0x584>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000b60:	f000 ff6a 	bl	8001a38 <reset_buffer>

		delay(delay_second*2);
 8000b64:	487f      	ldr	r0, [pc, #508]	; (8000d64 <lcd_display+0x588>)
 8000b66:	f000 ff77 	bl	8001a58 <delay>

		lcd_number = LCD_5;
 8000b6a:	4b7f      	ldr	r3, [pc, #508]	; (8000d68 <lcd_display+0x58c>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
		break;
 8000b70:	e0eb      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_5:
		lcd_set_cursor(0, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fdea 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b7a:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <lcd_display+0x578>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fdd0 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fde1 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_1);
 8000b8c:	4b7a      	ldr	r3, [pc, #488]	; (8000d78 <lcd_display+0x59c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fdc7 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fdd8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b9e:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <lcd_display+0x578>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fdbe 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fdcf 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_2);
 8000bb0:	4b72      	ldr	r3, [pc, #456]	; (8000d7c <lcd_display+0x5a0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fdb5 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <lcd_display+0x58c>)
 8000bbc:	2209      	movs	r2, #9
 8000bbe:	601a      	str	r2, [r3, #0]
		break;
 8000bc0:	e0c3      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_6:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 8000bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc6:	486e      	ldr	r0, [pc, #440]	; (8000d80 <lcd_display+0x5a4>)
 8000bc8:	f002 f836 	bl	8002c38 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10e      	bne.n	8000bf0 <lcd_display+0x414>
		{
			lcd_clear();
 8000bd2:	f7ff fde1 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fdb8 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 8000bde:	4b69      	ldr	r3, [pc, #420]	; (8000d84 <lcd_display+0x5a8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fd9e 	bl	8000724 <lcd_write_string>
			back_condition = BACK_6;
 8000be8:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <lcd_display+0x5ac>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e02b      	b.n	8000c48 <lcd_display+0x46c>
		} else
		{
			lcd_set_cursor(0, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fdab 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000bf8:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <lcd_display+0x578>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd91 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fda2 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000c0a:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <lcd_display+0x57c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd88 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fd99 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000c1c:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <lcd_display+0x578>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fd7f 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fd90 	bl	800074e <lcd_set_cursor>
			lcd_write_string(unlock);
 8000c2e:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <lcd_display+0x5b0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd76 	bl	8000724 <lcd_write_string>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000c38:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <lcd_display+0x598>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f240 228a 	movw	r2, #650	; 0x28a
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34

			cmd_1 = true;
 8000c42:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <lcd_display+0x5b4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000c48:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <lcd_display+0x58c>)
 8000c4a:	2209      	movs	r2, #9
 8000c4c:	601a      	str	r2, [r3, #0]
		break;
 8000c4e:	e07c      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_7:
		lcd_set_cursor(0, 0);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fd7b 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000c58:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <lcd_display+0x578>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fd61 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000c62:	2100      	movs	r1, #0
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd72 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000c6a:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <lcd_display+0x590>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd58 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2001      	movs	r0, #1
 8000c78:	f7ff fd69 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <lcd_display+0x578>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd4f 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f7ff fd60 	bl	800074e <lcd_set_cursor>
		lcd_write_string(lock);
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <lcd_display+0x5b8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd46 	bl	8000724 <lcd_write_string>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8000c98:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <lcd_display+0x598>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34

		cmd_2 = true;
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <lcd_display+0x5bc>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <lcd_display+0x58c>)
 8000caa:	2209      	movs	r2, #9
 8000cac:	601a      	str	r2, [r3, #0]
		break;
 8000cae:	e04c      	b.n	8000d4a <lcd_display+0x56e>
	case LCD_8:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 8000cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb4:	4832      	ldr	r0, [pc, #200]	; (8000d80 <lcd_display+0x5a4>)
 8000cb6:	f001 ffbf 	bl	8002c38 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10e      	bne.n	8000cde <lcd_display+0x502>
		{
			lcd_clear();
 8000cc0:	f7ff fd6a 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fd41 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <lcd_display+0x5a8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fd27 	bl	8000724 <lcd_write_string>
			back_condition = BACK_8;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <lcd_display+0x5ac>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e02b      	b.n	8000d36 <lcd_display+0x55a>
		} else
		{
			lcd_set_cursor(0, 0);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fd34 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <lcd_display+0x578>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fd1a 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fd2b 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <lcd_display+0x57c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd11 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000d02:	2100      	movs	r1, #0
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fd22 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <lcd_display+0x578>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fd08 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000d14:	2100      	movs	r1, #0
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff fd19 	bl	800074e <lcd_set_cursor>
			lcd_write_string(reset);
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <lcd_display+0x5c0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fcff 	bl	8000724 <lcd_write_string>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <lcd_display+0x598>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f240 228a 	movw	r2, #650	; 0x28a
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

			cmd_3 = true;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <lcd_display+0x5c4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <lcd_display+0x58c>)
 8000d38:	2209      	movs	r2, #9
 8000d3a:	601a      	str	r2, [r3, #0]
		break;
 8000d3c:	e005      	b.n	8000d4a <lcd_display+0x56e>
	case RST:
		delay(delay_second*2);
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <lcd_display+0x588>)
 8000d40:	f000 fe8a 	bl	8001a58 <delay>
		NVIC_SystemReset();
 8000d44:	f7ff fc2a 	bl	800059c <__NVIC_SystemReset>
		break;
	default:
		break;
 8000d48:	bf00      	nop
	}

}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000018 	.word	0x20000018
 8000d5c:	20000020 	.word	0x20000020
 8000d60:	200000e0 	.word	0x200000e0
 8000d64:	01e84800 	.word	0x01e84800
 8000d68:	200000e4 	.word	0x200000e4
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	20000024 	.word	0x20000024
 8000d74:	200003d8 	.word	0x200003d8
 8000d78:	20000028 	.word	0x20000028
 8000d7c:	2000002c 	.word	0x2000002c
 8000d80:	48000400 	.word	0x48000400
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	20000030 	.word	0x20000030
 8000d90:	200000ea 	.word	0x200000ea
 8000d94:	20000034 	.word	0x20000034
 8000d98:	200000eb 	.word	0x200000eb
 8000d9c:	20000038 	.word	0x20000038
 8000da0:	200000ec 	.word	0x200000ec

08000da4 <lcd_display_key>:

bool lcd_display_key(char *key_buffer, bool current_state_key)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	static char *clear = "     ";

	if(current_state_key == true && can_enter_key == true)
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d015      	beq.n	8000de2 <lcd_display_key+0x3e>
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <lcd_display_key+0x48>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d011      	beq.n	8000de2 <lcd_display_key+0x3e>
	{
		lcd_set_cursor(1,11);
 8000dbe:	210b      	movs	r1, #11
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f7ff fcc4 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <lcd_display_key+0x4c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fcaa 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 11);
 8000dd0:	210b      	movs	r1, #11
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fcbb 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_buffer);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff fca3 	bl	8000724 <lcd_write_string>
		current_state_key = false;
 8000dde:	2300      	movs	r3, #0
 8000de0:	70fb      	strb	r3, [r7, #3]
	}
	return current_state_key;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000e0 	.word	0x200000e0
 8000df0:	2000003c 	.word	0x2000003c

08000df4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_GPIO_Init+0x118>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000e58:	482d      	ldr	r0, [pc, #180]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e5a:	f001 ff05 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2120      	movs	r1, #32
 8000e62:	482c      	ldr	r0, [pc, #176]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000e64:	f001 ff00 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4824      	ldr	r0, [pc, #144]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000e7e:	f001 fd31 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_SWITCH_Pin;
 8000e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAG_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000e98:	f001 fd24 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 8000e9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4818      	ldr	r0, [pc, #96]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000eb4:	f001 fd16 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin;
 8000eb8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480f      	ldr	r0, [pc, #60]	; (8000f10 <MX_GPIO_Init+0x11c>)
 8000ed2:	f001 fd07 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODEM_ENABLE_Pin;
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODEM_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_GPIO_Init+0x120>)
 8000eee:	f001 fcf9 	bl	80028e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	2028      	movs	r0, #40	; 0x28
 8000ef8:	f001 fc3f 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f001 fc58 	bl	80027b2 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000400 	.word	0x48000400

08000f18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_I2C1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <MX_I2C1_Init+0x7c>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f54:	f001 feb8 	bl	8002cc8 <HAL_I2C_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f000 fe85 	bl	8001c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f66:	f002 fa73 	bl	8003450 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f000 fe7c 	bl	8001c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f78:	f002 fab5 	bl	80034e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 fe73 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000f0 	.word	0x200000f0
 8000f90:	40005400 	.word	0x40005400
 8000f94:	10909cec 	.word	0x10909cec

08000f98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ac      	sub	sp, #176	; 0xb0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2288      	movs	r2, #136	; 0x88
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f006 fd2d 	bl	8007a18 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_I2C_MspInit+0xb0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d13a      	bne.n	800103e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc8:	2340      	movs	r3, #64	; 0x40
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 f947 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f000 fe44 	bl	8001c6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_I2C_MspInit+0xb4>)
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_I2C_MspInit+0xb4>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_I2C_MspInit+0xb4>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ffc:	23c0      	movs	r3, #192	; 0xc0
 8000ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001014:	2304      	movs	r3, #4
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101e:	4619      	mov	r1, r3
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_I2C_MspInit+0xb8>)
 8001022:	f001 fc5f 	bl	80028e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_I2C_MspInit+0xb4>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_I2C_MspInit+0xb4>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_I2C_MspInit+0xb4>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	37b0      	adds	r7, #176	; 0xb0
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400

08001054 <line_append_debug>:
void send_SMS(void);
void delay(uint32_t iterations);
void add_digit(char digit);

void line_append_debug(uint8_t value)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	if(value == '\r' || value == '\n')
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b0d      	cmp	r3, #13
 8001062:	d002      	beq.n	800106a <line_append_debug+0x16>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d16c      	bne.n	8001144 <line_append_debug+0xf0>
	{
		if(line_lenght_debug >= 0)
		{
			if(strncmp(line_buffer_debug, "B ", 2) == 0)
 800106a:	2202      	movs	r2, #2
 800106c:	493f      	ldr	r1, [pc, #252]	; (800116c <line_append_debug+0x118>)
 800106e:	4840      	ldr	r0, [pc, #256]	; (8001170 <line_append_debug+0x11c>)
 8001070:	f006 fcda 	bl	8007a28 <strncmp>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d127      	bne.n	80010ca <line_append_debug+0x76>
			{
				strncpy(line_buffer_debug_BLE, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 800107a:	224e      	movs	r2, #78	; 0x4e
 800107c:	493d      	ldr	r1, [pc, #244]	; (8001174 <line_append_debug+0x120>)
 800107e:	483e      	ldr	r0, [pc, #248]	; (8001178 <line_append_debug+0x124>)
 8001080:	f006 fce4 	bl	8007a4c <strncpy>
				line_lenght_debug_BLE = line_lenght_debug - 2;
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <line_append_debug+0x128>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3b02      	subs	r3, #2
 800108a:	4a3d      	ldr	r2, [pc, #244]	; (8001180 <line_append_debug+0x12c>)
 800108c:	6013      	str	r3, [r2, #0]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\r';
 800108e:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <line_append_debug+0x12c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	493a      	ldr	r1, [pc, #232]	; (8001180 <line_append_debug+0x12c>)
 8001096:	600a      	str	r2, [r1, #0]
 8001098:	4a37      	ldr	r2, [pc, #220]	; (8001178 <line_append_debug+0x124>)
 800109a:	210d      	movs	r1, #13
 800109c:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\n';
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <line_append_debug+0x12c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	4936      	ldr	r1, [pc, #216]	; (8001180 <line_append_debug+0x12c>)
 80010a6:	600a      	str	r2, [r1, #0]
 80010a8:	4a33      	ldr	r2, [pc, #204]	; (8001178 <line_append_debug+0x124>)
 80010aa:	210a      	movs	r1, #10
 80010ac:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE] = '\0';
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <line_append_debug+0x12c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <line_append_debug+0x124>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)line_buffer_debug_BLE, line_lenght_debug_BLE);
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <line_append_debug+0x12c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	492d      	ldr	r1, [pc, #180]	; (8001178 <line_append_debug+0x124>)
 80010c2:	4830      	ldr	r0, [pc, #192]	; (8001184 <line_append_debug+0x130>)
 80010c4:	f005 f888 	bl	80061d8 <HAL_UART_Transmit_IT>
 80010c8:	e026      	b.n	8001118 <line_append_debug+0xc4>
			} else if (strncmp(line_buffer_debug, "G ", 2) == 0)
 80010ca:	2202      	movs	r2, #2
 80010cc:	492e      	ldr	r1, [pc, #184]	; (8001188 <line_append_debug+0x134>)
 80010ce:	4828      	ldr	r0, [pc, #160]	; (8001170 <line_append_debug+0x11c>)
 80010d0:	f006 fcaa 	bl	8007a28 <strncmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11e      	bne.n	8001118 <line_append_debug+0xc4>
			{
				strncpy(line_buffer_debug_GSM, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 80010da:	224e      	movs	r2, #78	; 0x4e
 80010dc:	4925      	ldr	r1, [pc, #148]	; (8001174 <line_append_debug+0x120>)
 80010de:	482b      	ldr	r0, [pc, #172]	; (800118c <line_append_debug+0x138>)
 80010e0:	f006 fcb4 	bl	8007a4c <strncpy>
				line_lenght_debug_GSM = line_lenght_debug - 2;
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <line_append_debug+0x128>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b02      	subs	r3, #2
 80010ea:	4a29      	ldr	r2, [pc, #164]	; (8001190 <line_append_debug+0x13c>)
 80010ec:	6013      	str	r3, [r2, #0]
				line_buffer_debug_GSM[line_lenght_debug_GSM++] = '\n';
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <line_append_debug+0x13c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	4926      	ldr	r1, [pc, #152]	; (8001190 <line_append_debug+0x13c>)
 80010f6:	600a      	str	r2, [r1, #0]
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <line_append_debug+0x138>)
 80010fa:	210a      	movs	r1, #10
 80010fc:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_GSM[line_lenght_debug_GSM] = '\0';
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <line_append_debug+0x13c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <line_append_debug+0x138>)
 8001104:	2100      	movs	r1, #0
 8001106:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)line_buffer_debug_GSM, line_lenght_debug_GSM);
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <line_append_debug+0x13c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	491e      	ldr	r1, [pc, #120]	; (800118c <line_append_debug+0x138>)
 8001112:	4820      	ldr	r0, [pc, #128]	; (8001194 <line_append_debug+0x140>)
 8001114:	f005 f860 	bl	80061d8 <HAL_UART_Transmit_IT>
			}
			line_buffer_debug[line_lenght_debug] = '\0';
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <line_append_debug+0x128>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <line_append_debug+0x11c>)
 800111e:	2100      	movs	r1, #0
 8001120:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <line_append_debug+0x144>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_debug, strlen(line_buffer_debug));
 8001128:	4811      	ldr	r0, [pc, #68]	; (8001170 <line_append_debug+0x11c>)
 800112a:	f7ff f85b 	bl	80001e4 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29b      	uxth	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <line_append_debug+0x11c>)
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <line_append_debug+0x148>)
 8001138:	f005 f84e 	bl	80061d8 <HAL_UART_Transmit_IT>
			line_lenght_debug = 0;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <line_append_debug+0x128>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
		if(line_lenght_debug >= 0)
 8001142:	e00f      	b.n	8001164 <line_append_debug+0x110>
		}
	} else
	{
		if(line_lenght_debug >= LINE_MAX_LENGTH)
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <line_append_debug+0x128>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b4f      	cmp	r3, #79	; 0x4f
 800114a:	d902      	bls.n	8001152 <line_append_debug+0xfe>
		{
			line_lenght_debug = 0;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <line_append_debug+0x128>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
		}
		line_buffer_debug[line_lenght_debug++] = value;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <line_append_debug+0x128>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	4908      	ldr	r1, [pc, #32]	; (800117c <line_append_debug+0x128>)
 800115a:	600a      	str	r2, [r1, #0]
 800115c:	4904      	ldr	r1, [pc, #16]	; (8001170 <line_append_debug+0x11c>)
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	54ca      	strb	r2, [r1, r3]
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800847c 	.word	0x0800847c
 8001170:	20000144 	.word	0x20000144
 8001174:	20000146 	.word	0x20000146
 8001178:	200001ec 	.word	0x200001ec
 800117c:	200002e8 	.word	0x200002e8
 8001180:	200002ec 	.word	0x200002ec
 8001184:	20000534 	.word	0x20000534
 8001188:	08008480 	.word	0x08008480
 800118c:	20000198 	.word	0x20000198
 8001190:	200002f0 	.word	0x200002f0
 8001194:	20000424 	.word	0x20000424
 8001198:	200002fc 	.word	0x200002fc
 800119c:	200004ac 	.word	0x200004ac

080011a0 <line_append_bluetooth>:

void line_append_bluetooth(uint8_t value)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]

	if(value == '\r' || value == '\n')
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b0d      	cmp	r3, #13
 80011ae:	d002      	beq.n	80011b6 <line_append_bluetooth+0x16>
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b0a      	cmp	r3, #10
 80011b4:	d119      	bne.n	80011ea <line_append_bluetooth+0x4a>
	{
		if(line_lenght_bluetooth > 0)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <line_append_bluetooth+0x104>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d06e      	beq.n	800129c <line_append_bluetooth+0xfc>
		{
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <line_append_bluetooth+0x104>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <line_append_bluetooth+0x108>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 80011c8:	4b38      	ldr	r3, [pc, #224]	; (80012ac <line_append_bluetooth+0x10c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 80011ce:	4836      	ldr	r0, [pc, #216]	; (80012a8 <line_append_bluetooth+0x108>)
 80011d0:	f7ff f808 	bl	80001e4 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4933      	ldr	r1, [pc, #204]	; (80012a8 <line_append_bluetooth+0x108>)
 80011dc:	4834      	ldr	r0, [pc, #208]	; (80012b0 <line_append_bluetooth+0x110>)
 80011de:	f004 fffb 	bl	80061d8 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <line_append_bluetooth+0x104>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		if(line_lenght_bluetooth > 0)
 80011e8:	e058      	b.n	800129c <line_append_bluetooth+0xfc>
		}
	} else if(value == '#')
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b23      	cmp	r3, #35	; 0x23
 80011ee:	d124      	bne.n	800123a <line_append_bluetooth+0x9a>
	{
		if(line_lenght_bluetooth > 0)
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <line_append_bluetooth+0x104>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d051      	beq.n	800129c <line_append_bluetooth+0xfc>
		{
			strncpy(phone_number, line_buffer_bluetooth, 9);
 80011f8:	2209      	movs	r2, #9
 80011fa:	492b      	ldr	r1, [pc, #172]	; (80012a8 <line_append_bluetooth+0x108>)
 80011fc:	482d      	ldr	r0, [pc, #180]	; (80012b4 <line_append_bluetooth+0x114>)
 80011fe:	f006 fc25 	bl	8007a4c <strncpy>
			phone_number[9] = '\0';
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <line_append_bluetooth+0x114>)
 8001204:	2200      	movs	r2, #0
 8001206:	725a      	strb	r2, [r3, #9]
			if_send_end_line = true;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <line_append_bluetooth+0x10c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
			if_phone_number_set = true;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <line_append_bluetooth+0x118>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
			if_phone_number_set_latch = true;
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <line_append_bluetooth+0x11c>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)phone_number, strlen(phone_number));
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <line_append_bluetooth+0x114>)
 800121c:	f7fe ffe2 	bl	80001e4 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4923      	ldr	r1, [pc, #140]	; (80012b4 <line_append_bluetooth+0x114>)
 8001228:	4821      	ldr	r0, [pc, #132]	; (80012b0 <line_append_bluetooth+0x110>)
 800122a:	f004 ffd5 	bl	80061d8 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <line_append_bluetooth+0x104>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

			send_SMS();
 8001234:	f000 f91c 	bl	8001470 <send_SMS>
		{
			line_lenght_bluetooth = 0;
		}
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
	}
}
 8001238:	e030      	b.n	800129c <line_append_bluetooth+0xfc>
	} else if(value == '*')
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b2a      	cmp	r3, #42	; 0x2a
 800123e:	d11d      	bne.n	800127c <line_append_bluetooth+0xdc>
		if(line_lenght_bluetooth > 0)
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <line_append_bluetooth+0x104>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d029      	beq.n	800129c <line_append_bluetooth+0xfc>
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <line_append_bluetooth+0x104>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <line_append_bluetooth+0x108>)
 800124e:	2100      	movs	r1, #0
 8001250:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <line_append_bluetooth+0x10c>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
			strcpy(open_close_cmd, line_buffer_bluetooth);
 8001258:	4913      	ldr	r1, [pc, #76]	; (80012a8 <line_append_bluetooth+0x108>)
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <line_append_bluetooth+0x120>)
 800125c:	f006 fc36 	bl	8007acc <strcpy>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <line_append_bluetooth+0x108>)
 8001262:	f7fe ffbf 	bl	80001e4 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29b      	uxth	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	490e      	ldr	r1, [pc, #56]	; (80012a8 <line_append_bluetooth+0x108>)
 800126e:	4810      	ldr	r0, [pc, #64]	; (80012b0 <line_append_bluetooth+0x110>)
 8001270:	f004 ffb2 	bl	80061d8 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <line_append_bluetooth+0x104>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	e00f      	b.n	800129c <line_append_bluetooth+0xfc>
		if(line_lenght_bluetooth >= LINE_MAX_LENGTH)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <line_append_bluetooth+0x104>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b4f      	cmp	r3, #79	; 0x4f
 8001282:	d902      	bls.n	800128a <line_append_bluetooth+0xea>
			line_lenght_bluetooth = 0;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <line_append_bluetooth+0x104>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <line_append_bluetooth+0x104>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	4904      	ldr	r1, [pc, #16]	; (80012a4 <line_append_bluetooth+0x104>)
 8001292:	600a      	str	r2, [r1, #0]
 8001294:	4904      	ldr	r1, [pc, #16]	; (80012a8 <line_append_bluetooth+0x108>)
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	54ca      	strb	r2, [r1, r3]
}
 800129a:	e7ff      	b.n	800129c <line_append_bluetooth+0xfc>
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200002f4 	.word	0x200002f4
 80012a8:	20000240 	.word	0x20000240
 80012ac:	200002fc 	.word	0x200002fc
 80012b0:	200004ac 	.word	0x200004ac
 80012b4:	20000304 	.word	0x20000304
 80012b8:	200002fd 	.word	0x200002fd
 80012bc:	200002fe 	.word	0x200002fe
 80012c0:	20000320 	.word	0x20000320

080012c4 <line_append_gsm>:

void line_append_gsm(uint8_t value)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	if(line_lenght_gsm < LINE_MAX_LENGTH)
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <line_append_gsm+0x3c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b4f      	cmp	r3, #79	; 0x4f
 80012d4:	d80d      	bhi.n	80012f2 <line_append_gsm+0x2e>
	{
		line_buffer_gsm[line_lenght_gsm++] = value;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <line_append_gsm+0x3c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	4908      	ldr	r1, [pc, #32]	; (8001300 <line_append_gsm+0x3c>)
 80012de:	600a      	str	r2, [r1, #0]
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <line_append_gsm+0x40>)
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	54ca      	strb	r2, [r1, r3]
		last_byte_time = HAL_GetTick();
 80012e6:	f001 f93d 	bl	8002564 <HAL_GetTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <line_append_gsm+0x44>)
 80012ee:	6013      	str	r3, [r2, #0]
	} else
	{
		line_lenght_gsm = 0;
	}
}
 80012f0:	e002      	b.n	80012f8 <line_append_gsm+0x34>
		line_lenght_gsm = 0;
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <line_append_gsm+0x3c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002f8 	.word	0x200002f8
 8001304:	20000294 	.word	0x20000294
 8001308:	20000300 	.word	0x20000300

0800130c <check_timeout_gsm>:

void check_timeout_gsm(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	if(line_lenght_gsm > 0 && (HAL_GetTick() - last_byte_time > TIMEOUT_MS))
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <check_timeout_gsm+0x44>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d019      	beq.n	800134c <check_timeout_gsm+0x40>
 8001318:	f001 f924 	bl	8002564 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <check_timeout_gsm+0x48>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b32      	cmp	r3, #50	; 0x32
 8001326:	d911      	bls.n	800134c <check_timeout_gsm+0x40>
	{
		line_buffer_gsm[line_lenght_gsm] = '\0';
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <check_timeout_gsm+0x44>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <check_timeout_gsm+0x4c>)
 800132e:	2100      	movs	r1, #0
 8001330:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_gsm, strlen(line_buffer_gsm));
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <check_timeout_gsm+0x4c>)
 8001334:	f7fe ff56 	bl	80001e4 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4906      	ldr	r1, [pc, #24]	; (8001358 <check_timeout_gsm+0x4c>)
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <check_timeout_gsm+0x50>)
 8001342:	f004 ff49 	bl	80061d8 <HAL_UART_Transmit_IT>
		line_lenght_gsm = 0;
 8001346:	4b02      	ldr	r3, [pc, #8]	; (8001350 <check_timeout_gsm+0x44>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002f8 	.word	0x200002f8
 8001354:	20000300 	.word	0x20000300
 8001358:	20000294 	.word	0x20000294
 800135c:	200004ac 	.word	0x200004ac

08001360 <send_end_line>:

void send_end_line(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	static char end_signs[3] = "\r\n\0";

	if(if_send_end_line == true)
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <send_end_line+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <send_end_line+0x1c>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)end_signs, 3);
 800136c:	2203      	movs	r2, #3
 800136e:	4905      	ldr	r1, [pc, #20]	; (8001384 <send_end_line+0x24>)
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <send_end_line+0x28>)
 8001372:	f004 ff31 	bl	80061d8 <HAL_UART_Transmit_IT>
		if_send_end_line = false;
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <send_end_line+0x20>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
	}
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002fc 	.word	0x200002fc
 8001384:	20000040 	.word	0x20000040
 8001388:	200004ac 	.word	0x200004ac

0800138c <HAL_UART_RxCpltCallback>:

uint8_t uart2_rx_buffer, uart1_rx_buffer, uart3_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_UART_RxCpltCallback+0x68>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10a      	bne.n	80013b2 <HAL_UART_RxCpltCallback+0x26>
	{
		line_append_debug(uart2_rx_buffer);
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_UART_RxCpltCallback+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe57 	bl	8001054 <line_append_debug>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 80013a6:	2201      	movs	r2, #1
 80013a8:	4913      	ldr	r1, [pc, #76]	; (80013f8 <HAL_UART_RxCpltCallback+0x6c>)
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <HAL_UART_RxCpltCallback+0x68>)
 80013ac:	f004 ff72 	bl	8006294 <HAL_UART_Receive_IT>
	else if(huart == &huart3)
	{
		line_append_bluetooth(uart3_rx_buffer);
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
	}
}
 80013b0:	e01c      	b.n	80013ec <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_UART_RxCpltCallback+0x70>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10a      	bne.n	80013d0 <HAL_UART_RxCpltCallback+0x44>
		line_append_gsm(uart1_rx_buffer);
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_UART_RxCpltCallback+0x74>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff80 	bl	80012c4 <line_append_gsm>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <HAL_UART_RxCpltCallback+0x74>)
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <HAL_UART_RxCpltCallback+0x70>)
 80013ca:	f004 ff63 	bl	8006294 <HAL_UART_Receive_IT>
}
 80013ce:	e00d      	b.n	80013ec <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_UART_RxCpltCallback+0x78>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d109      	bne.n	80013ec <HAL_UART_RxCpltCallback+0x60>
		line_append_bluetooth(uart3_rx_buffer);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_UART_RxCpltCallback+0x7c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fedf 	bl	80011a0 <line_append_bluetooth>
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <HAL_UART_RxCpltCallback+0x7c>)
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <HAL_UART_RxCpltCallback+0x78>)
 80013e8:	f004 ff54 	bl	8006294 <HAL_UART_Receive_IT>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200004ac 	.word	0x200004ac
 80013f8:	20000327 	.word	0x20000327
 80013fc:	20000424 	.word	0x20000424
 8001400:	20000328 	.word	0x20000328
 8001404:	20000534 	.word	0x20000534
 8001408:	20000329 	.word	0x20000329

0800140c <access_key_draw>:

void access_key_draw(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	static uint32_t random_number;
	static uint16_t access_code;

	if(if_phone_number_set == true)
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <access_key_draw+0x48>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <access_key_draw+0x44>
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <access_key_draw+0x4c>)
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <access_key_draw+0x50>)
 800141c:	f003 fc47 	bl	8004cae <HAL_RNG_GenerateRandomNumber>
		access_code = random_number % 10000;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <access_key_draw+0x4c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <access_key_draw+0x54>)
 8001426:	fba3 1302 	umull	r1, r3, r3, r2
 800142a:	0b5b      	lsrs	r3, r3, #13
 800142c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001430:	fb01 f303 	mul.w	r3, r1, r3
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <access_key_draw+0x58>)
 800143a:	801a      	strh	r2, [r3, #0]
		sprintf(access_key, "%04u", access_code);
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <access_key_draw+0x58>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4909      	ldr	r1, [pc, #36]	; (8001468 <access_key_draw+0x5c>)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <access_key_draw+0x60>)
 8001446:	f006 fac7 	bl	80079d8 <siprintf>
		if_phone_number_set = false;
 800144a:	4b02      	ldr	r3, [pc, #8]	; (8001454 <access_key_draw+0x48>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
	}
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002fd 	.word	0x200002fd
 8001458:	20000354 	.word	0x20000354
 800145c:	200003a0 	.word	0x200003a0
 8001460:	d1b71759 	.word	0xd1b71759
 8001464:	20000358 	.word	0x20000358
 8001468:	08008484 	.word	0x08008484
 800146c:	20000310 	.word	0x20000310

08001470 <send_SMS>:
}sender_state;

int message_number = MESSAGE_1;

void send_SMS(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	static char message_cmgf[] = "AT+CMGF=1\r";
	static char message_cscs[] = "AT+CSCS=\"GSM\"\r";
	static char message_cmgs[31];
	sprintf(message_cmgs, "AT+CMGS=\"+48%s\"\r", phone_number);
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <send_SMS+0xcc>)
 8001476:	4932      	ldr	r1, [pc, #200]	; (8001540 <send_SMS+0xd0>)
 8001478:	4832      	ldr	r0, [pc, #200]	; (8001544 <send_SMS+0xd4>)
 800147a:	f006 faad 	bl	80079d8 <siprintf>
	access_key_draw();
 800147e:	f7ff ffc5 	bl	800140c <access_key_draw>
	static char message_message[34];
	sprintf(message_message, "Kod dostepu do skrytki: %s", access_key);
 8001482:	4a31      	ldr	r2, [pc, #196]	; (8001548 <send_SMS+0xd8>)
 8001484:	4931      	ldr	r1, [pc, #196]	; (800154c <send_SMS+0xdc>)
 8001486:	4832      	ldr	r0, [pc, #200]	; (8001550 <send_SMS+0xe0>)
 8001488:	f006 faa6 	bl	80079d8 <siprintf>
	static char message_ctrlz = 0x1A;

	delay(100);
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f000 fae3 	bl	8001a58 <delay>

	switch(message_number)
 8001492:	4b30      	ldr	r3, [pc, #192]	; (8001554 <send_SMS+0xe4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d84d      	bhi.n	8001536 <send_SMS+0xc6>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <send_SMS+0x30>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014b5 	.word	0x080014b5
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	080014ed 	.word	0x080014ed
 80014ac:	08001509 	.word	0x08001509
 80014b0:	08001525 	.word	0x08001525
	{
	case MESSAGE_1:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgf, strlen(message_cmgf));
 80014b4:	4828      	ldr	r0, [pc, #160]	; (8001558 <send_SMS+0xe8>)
 80014b6:	f7fe fe95 	bl	80001e4 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	4925      	ldr	r1, [pc, #148]	; (8001558 <send_SMS+0xe8>)
 80014c2:	4826      	ldr	r0, [pc, #152]	; (800155c <send_SMS+0xec>)
 80014c4:	f004 fe88 	bl	80061d8 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_2;
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <send_SMS+0xe4>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
		break;
 80014ce:	e033      	b.n	8001538 <send_SMS+0xc8>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cscs, strlen(message_cscs));
 80014d0:	4823      	ldr	r0, [pc, #140]	; (8001560 <send_SMS+0xf0>)
 80014d2:	f7fe fe87 	bl	80001e4 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <send_SMS+0xf0>)
 80014de:	481f      	ldr	r0, [pc, #124]	; (800155c <send_SMS+0xec>)
 80014e0:	f004 fe7a 	bl	80061d8 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_3;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <send_SMS+0xe4>)
 80014e6:	2202      	movs	r2, #2
 80014e8:	601a      	str	r2, [r3, #0]
		break;
 80014ea:	e025      	b.n	8001538 <send_SMS+0xc8>
	case MESSAGE_3:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgs, strlen(message_cmgs));
 80014ec:	4815      	ldr	r0, [pc, #84]	; (8001544 <send_SMS+0xd4>)
 80014ee:	f7fe fe79 	bl	80001e4 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4912      	ldr	r1, [pc, #72]	; (8001544 <send_SMS+0xd4>)
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <send_SMS+0xec>)
 80014fc:	f004 fe6c 	bl	80061d8 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_4;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <send_SMS+0xe4>)
 8001502:	2203      	movs	r2, #3
 8001504:	601a      	str	r2, [r3, #0]
		break;
 8001506:	e017      	b.n	8001538 <send_SMS+0xc8>
	case MESSAGE_4:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_message, strlen(message_message));
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <send_SMS+0xe0>)
 800150a:	f7fe fe6b 	bl	80001e4 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	490e      	ldr	r1, [pc, #56]	; (8001550 <send_SMS+0xe0>)
 8001516:	4811      	ldr	r0, [pc, #68]	; (800155c <send_SMS+0xec>)
 8001518:	f004 fe5e 	bl	80061d8 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_5;
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <send_SMS+0xe4>)
 800151e:	2204      	movs	r2, #4
 8001520:	601a      	str	r2, [r3, #0]
		break;
 8001522:	e009      	b.n	8001538 <send_SMS+0xc8>
	case MESSAGE_5:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&message_ctrlz, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	490f      	ldr	r1, [pc, #60]	; (8001564 <send_SMS+0xf4>)
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <send_SMS+0xec>)
 800152a:	f004 fe55 	bl	80061d8 <HAL_UART_Transmit_IT>
		message_number = DONE;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <send_SMS+0xe4>)
 8001530:	2205      	movs	r2, #5
 8001532:	601a      	str	r2, [r3, #0]
		break;
 8001534:	e000      	b.n	8001538 <send_SMS+0xc8>
	default:
		break;
 8001536:	bf00      	nop
	}
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000304 	.word	0x20000304
 8001540:	0800848c 	.word	0x0800848c
 8001544:	2000035c 	.word	0x2000035c
 8001548:	20000310 	.word	0x20000310
 800154c:	080084a0 	.word	0x080084a0
 8001550:	2000037c 	.word	0x2000037c
 8001554:	2000032c 	.word	0x2000032c
 8001558:	20000044 	.word	0x20000044
 800155c:	20000424 	.word	0x20000424
 8001560:	20000050 	.word	0x20000050
 8001564:	2000005f 	.word	0x2000005f

08001568 <send_AT_init>:

void send_AT_init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	static char AT_init[] = "AT\r\n";

	HAL_UART_Transmit_IT(&huart1, (uint8_t*)AT_init, strlen(AT_init));
 800156c:	480f      	ldr	r0, [pc, #60]	; (80015ac <send_AT_init+0x44>)
 800156e:	f7fe fe39 	bl	80001e4 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <send_AT_init+0x44>)
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <send_AT_init+0x48>)
 800157c:	f004 fe2c 	bl	80061d8 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)AT_init, strlen(AT_init));
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <send_AT_init+0x44>)
 8001582:	f7fe fe2f 	bl	80001e4 <strlen>
 8001586:	4603      	mov	r3, r0
 8001588:	b29b      	uxth	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <send_AT_init+0x44>)
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <send_AT_init+0x4c>)
 8001590:	f004 fe22 	bl	80061d8 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AT_init, strlen(AT_init));
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <send_AT_init+0x44>)
 8001596:	f7fe fe25 	bl	80001e4 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29b      	uxth	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	4902      	ldr	r1, [pc, #8]	; (80015ac <send_AT_init+0x44>)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <send_AT_init+0x50>)
 80015a4:	f004 fe18 	bl	80061d8 <HAL_UART_Transmit_IT>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000060 	.word	0x20000060
 80015b0:	20000424 	.word	0x20000424
 80015b4:	200004ac 	.word	0x200004ac
 80015b8:	20000534 	.word	0x20000534

080015bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <HAL_UART_TxCpltCallback+0x30>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d105      	bne.n	80015d8 <HAL_UART_TxCpltCallback+0x1c>
	{
		if(if_phone_number_set_latch == true)
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_UART_TxCpltCallback+0x34>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_TxCpltCallback+0x1c>
		{
			send_SMS();
 80015d4:	f7ff ff4c 	bl	8001470 <send_SMS>
		}
	}
	if(huart == &huart2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_UART_TxCpltCallback+0x38>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_UART_TxCpltCallback+0x28>
	{
		send_end_line();
 80015e0:	f7ff febe 	bl	8001360 <send_end_line>
	}
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000424 	.word	0x20000424
 80015f0:	200002fe 	.word	0x200002fe
 80015f4:	200004ac 	.word	0x200004ac

080015f8 <HAL_GPIO_EXTI_Callback>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
volatile uint8_t pressed_key = '\0';

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8001602:	f000 ffaf 	bl	8002564 <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	4aaf      	ldr	r2, [pc, #700]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800160a:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 200 )
 800160c:	4bae      	ldr	r3, [pc, #696]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4bae      	ldr	r3, [pc, #696]	; (80018cc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2bc8      	cmp	r3, #200	; 0xc8
 8001618:	f240 81d9 	bls.w	80019ce <HAL_GPIO_EXTI_Callback+0x3d6>
	{
		GPIO_InitStructPrivate.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 800161c:	4bac      	ldr	r3, [pc, #688]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800161e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001622:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001624:	4baa      	ldr	r3, [pc, #680]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800162a:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	4ba7      	ldr	r3, [pc, #668]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 8001636:	49a6      	ldr	r1, [pc, #664]	; (80018d0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001638:	48a6      	ldr	r0, [pc, #664]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800163a:	f001 f953 	bl	80028e4 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	48a5      	ldr	r0, [pc, #660]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001644:	f001 fb10 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	48a2      	ldr	r0, [pc, #648]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800164e:	f001 fb0b 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001658:	489f      	ldr	r0, [pc, #636]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800165a:	f001 fb05 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	489c      	ldr	r0, [pc, #624]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001666:	f001 faff 	bl	8002c68 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001670:	d10b      	bne.n	800168a <HAL_GPIO_EXTI_Callback+0x92>
 8001672:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001678:	f001 fade 	bl	8002c38 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_EXTI_Callback+0x92>
		{
			pressed_key = '1';
 8001682:	4b96      	ldr	r3, [pc, #600]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001684:	2231      	movs	r2, #49	; 0x31
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e02e      	b.n	80016e8 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001690:	d10b      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0xb2>
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	488f      	ldr	r0, [pc, #572]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001698:	f001 face 	bl	8002c38 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_EXTI_Callback+0xb2>
		{
			pressed_key = '2';
 80016a2:	4b8e      	ldr	r3, [pc, #568]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016a4:	2232      	movs	r2, #50	; 0x32
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	e01e      	b.n	80016e8 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b0:	d10b      	bne.n	80016ca <HAL_GPIO_EXTI_Callback+0xd2>
 80016b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b6:	4887      	ldr	r0, [pc, #540]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016b8:	f001 fabe 	bl	8002c38 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_EXTI_Callback+0xd2>
		{
			pressed_key = '3';
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016c4:	2233      	movs	r2, #51	; 0x33
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e00e      	b.n	80016e8 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d0:	d10a      	bne.n	80016e8 <HAL_GPIO_EXTI_Callback+0xf0>
 80016d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d6:	487f      	ldr	r0, [pc, #508]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016d8:	f001 faae 	bl	8002c38 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <HAL_GPIO_EXTI_Callback+0xf0>
		{
			pressed_key = 'A';
 80016e2:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016e4:	2241      	movs	r2, #65	; 0x41
 80016e6:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2140      	movs	r1, #64	; 0x40
 80016ec:	487a      	ldr	r0, [pc, #488]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016ee:	f001 fabb 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	4878      	ldr	r0, [pc, #480]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016f8:	f001 fab6 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4875      	ldr	r0, [pc, #468]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001704:	f001 fab0 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170e:	4872      	ldr	r0, [pc, #456]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001710:	f001 faaa 	bl	8002c68 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171a:	d10b      	bne.n	8001734 <HAL_GPIO_EXTI_Callback+0x13c>
 800171c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001720:	486c      	ldr	r0, [pc, #432]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001722:	f001 fa89 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_EXTI_Callback+0x13c>
		{
			pressed_key = '4';
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 800172e:	2234      	movs	r2, #52	; 0x34
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e02e      	b.n	8001792 <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173a:	d10b      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0x15c>
 800173c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001740:	4864      	ldr	r0, [pc, #400]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001742:	f001 fa79 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_EXTI_Callback+0x15c>
		{
			pressed_key = '5';
 800174c:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 800174e:	2235      	movs	r2, #53	; 0x35
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	e01e      	b.n	8001792 <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800175a:	d10b      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x17c>
 800175c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001760:	485c      	ldr	r0, [pc, #368]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001762:	f001 fa69 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_EXTI_Callback+0x17c>
		{
			pressed_key = '6';
 800176c:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 800176e:	2236      	movs	r2, #54	; 0x36
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e00e      	b.n	8001792 <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800177a:	d10a      	bne.n	8001792 <HAL_GPIO_EXTI_Callback+0x19a>
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	4854      	ldr	r0, [pc, #336]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001782:	f001 fa59 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_GPIO_EXTI_Callback+0x19a>
		{
			pressed_key = 'B';
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 800178e:	2242      	movs	r2, #66	; 0x42
 8001790:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	4850      	ldr	r0, [pc, #320]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001798:	f001 fa66 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	484d      	ldr	r0, [pc, #308]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017a2:	f001 fa61 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ac:	484a      	ldr	r0, [pc, #296]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017ae:	f001 fa5b 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b8:	4847      	ldr	r0, [pc, #284]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017ba:	f001 fa55 	bl	8002c68 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c4:	d10b      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0x1e6>
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4842      	ldr	r0, [pc, #264]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017cc:	f001 fa34 	bl	8002c38 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_EXTI_Callback+0x1e6>
		{
			pressed_key = '7';
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80017d8:	2237      	movs	r2, #55	; 0x37
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e02e      	b.n	800183c <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e4:	d10b      	bne.n	80017fe <HAL_GPIO_EXTI_Callback+0x206>
 80017e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ea:	483a      	ldr	r0, [pc, #232]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017ec:	f001 fa24 	bl	8002c38 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_EXTI_Callback+0x206>
		{
			pressed_key = '8';
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80017f8:	2238      	movs	r2, #56	; 0x38
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e01e      	b.n	800183c <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001804:	d10b      	bne.n	800181e <HAL_GPIO_EXTI_Callback+0x226>
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	4832      	ldr	r0, [pc, #200]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800180c:	f001 fa14 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_EXTI_Callback+0x226>
		{
			pressed_key = '9';
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001818:	2239      	movs	r2, #57	; 0x39
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e00e      	b.n	800183c <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001824:	d10a      	bne.n	800183c <HAL_GPIO_EXTI_Callback+0x244>
 8001826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182a:	482a      	ldr	r0, [pc, #168]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800182c:	f001 fa04 	bl	8002c38 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_GPIO_EXTI_Callback+0x244>
		{
			pressed_key = 'C';
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001838:	2243      	movs	r2, #67	; 0x43
 800183a:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	4825      	ldr	r0, [pc, #148]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001842:	f001 fa11 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	4823      	ldr	r0, [pc, #140]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800184c:	f001 fa0c 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001858:	f001 fa06 	bl	8002c68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481d      	ldr	r0, [pc, #116]	; (80018d8 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001864:	f001 fa00 	bl	8002c68 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186e:	d10b      	bne.n	8001888 <HAL_GPIO_EXTI_Callback+0x290>
 8001870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001874:	4817      	ldr	r0, [pc, #92]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001876:	f001 f9df 	bl	8002c38 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_EXTI_Callback+0x290>
		{
			pressed_key = '*';
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001882:	222a      	movs	r2, #42	; 0x2a
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e03a      	b.n	80018fe <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d10b      	bne.n	80018a8 <HAL_GPIO_EXTI_Callback+0x2b0>
 8001890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001896:	f001 f9cf 	bl	8002c38 <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_EXTI_Callback+0x2b0>
		{
			pressed_key = '0';
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e02a      	b.n	80018fe <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ae:	d117      	bne.n	80018e0 <HAL_GPIO_EXTI_Callback+0x2e8>
 80018b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b4:	4807      	ldr	r0, [pc, #28]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80018b6:	f001 f9bf 	bl	8002c38 <HAL_GPIO_ReadPin>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00f      	beq.n	80018e0 <HAL_GPIO_EXTI_Callback+0x2e8>
		{
			pressed_key = '#';
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018c2:	2223      	movs	r2, #35	; 0x23
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e01a      	b.n	80018fe <HAL_GPIO_EXTI_Callback+0x306>
 80018c8:	20000348 	.word	0x20000348
 80018cc:	20000344 	.word	0x20000344
 80018d0:	20000330 	.word	0x20000330
 80018d4:	48000400 	.word	0x48000400
 80018d8:	48000800 	.word	0x48000800
 80018dc:	2000034c 	.word	0x2000034c
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e6:	d10a      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x306>
 80018e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ec:	483a      	ldr	r0, [pc, #232]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80018ee:	f001 f9a3 	bl	8002c38 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_EXTI_Callback+0x306>
		{
			pressed_key = 'D';
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 80018fa:	2244      	movs	r2, #68	; 0x44
 80018fc:	701a      	strb	r2, [r3, #0]
		}

		  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80018fe:	2201      	movs	r2, #1
 8001900:	2140      	movs	r1, #64	; 0x40
 8001902:	4837      	ldr	r0, [pc, #220]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001904:	f001 f9b0 	bl	8002c68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 8001908:	2201      	movs	r2, #1
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	4834      	ldr	r0, [pc, #208]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x3e8>)
 800190e:	f001 f9ab 	bl	8002c68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001918:	4831      	ldr	r0, [pc, #196]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x3e8>)
 800191a:	f001 f9a5 	bl	8002c68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001924:	482e      	ldr	r0, [pc, #184]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001926:	f001 f99f 	bl	8002c68 <HAL_GPIO_WritePin>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x3ec>)
 800192c:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8001930:	605a      	str	r2, [r3, #4]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001934:	2202      	movs	r2, #2
 8001936:	609a      	str	r2, [r3, #8]
		  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 8001938:	492a      	ldr	r1, [pc, #168]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x3ec>)
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x3e0>)
 800193c:	f000 ffd2 	bl	80028e4 <HAL_GPIO_Init>

		  if((pressed_key == '1'|| pressed_key == '2'|| pressed_key == '3'|| pressed_key == '4'|| pressed_key == '5'|| pressed_key == '6'|| pressed_key == '7'|| pressed_key == '8'|| pressed_key == '9'|| pressed_key == '0') && if_phone_number_set_latch == true)
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b31      	cmp	r3, #49	; 0x31
 8001948:	d02c      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b32      	cmp	r3, #50	; 0x32
 8001952:	d027      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b33      	cmp	r3, #51	; 0x33
 800195c:	d022      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b34      	cmp	r3, #52	; 0x34
 8001966:	d01d      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b35      	cmp	r3, #53	; 0x35
 8001970:	d018      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b36      	cmp	r3, #54	; 0x36
 800197a:	d013      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b37      	cmp	r3, #55	; 0x37
 8001984:	d00e      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b38      	cmp	r3, #56	; 0x38
 800198e:	d009      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b39      	cmp	r3, #57	; 0x39
 8001998:	d004      	beq.n	80019a4 <HAL_GPIO_EXTI_Callback+0x3ac>
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b30      	cmp	r3, #48	; 0x30
 80019a2:	d110      	bne.n	80019c6 <HAL_GPIO_EXTI_Callback+0x3ce>
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_GPIO_EXTI_Callback+0x3f0>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_GPIO_EXTI_Callback+0x3ce>
		  		  {
		  			  char pressed_digit = pressed_key;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	73fb      	strb	r3, [r7, #15]
		  			  add_digit(pressed_digit);
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f81f 	bl	80019f8 <add_digit>
		  			  pressed_key = '\0';
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
		  			  if_key_pressed = true;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_GPIO_EXTI_Callback+0x3f4>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
		  		  }

		  previousMillis = currentMillis;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_GPIO_EXTI_Callback+0x3f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_GPIO_EXTI_Callback+0x3fc>)
 80019cc:	6013      	str	r3, [r2, #0]

	}
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	48000400 	.word	0x48000400
 80019dc:	2000034c 	.word	0x2000034c
 80019e0:	48000800 	.word	0x48000800
 80019e4:	20000330 	.word	0x20000330
 80019e8:	200002fe 	.word	0x200002fe
 80019ec:	200002ff 	.word	0x200002ff
 80019f0:	20000348 	.word	0x20000348
 80019f4:	20000344 	.word	0x20000344

080019f8 <add_digit>:

int current_index = 0;

void add_digit(char digit)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	if(current_index < BUFFER_SIZE - 1)
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <add_digit+0x38>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	dc0c      	bgt.n	8001a24 <add_digit+0x2c>
	{
		key_buffer[current_index++] = digit;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <add_digit+0x38>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <add_digit+0x38>)
 8001a12:	600a      	str	r2, [r1, #0]
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <add_digit+0x3c>)
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	54ca      	strb	r2, [r1, r3]
		key_buffer[current_index] = '\0';
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <add_digit+0x38>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <add_digit+0x3c>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	54d1      	strb	r1, [r2, r3]
	}
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000350 	.word	0x20000350
 8001a34:	20000318 	.word	0x20000318

08001a38 <reset_buffer>:

void reset_buffer()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	memset(key_buffer, 0, BUFFER_SIZE);
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <reset_buffer+0x18>)
 8001a42:	f005 ffe9 	bl	8007a18 <memset>
	current_index = 0;
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <reset_buffer+0x1c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000318 	.word	0x20000318
 8001a54:	20000350 	.word	0x20000350

08001a58 <delay>:

void delay(uint32_t iterations)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	while(iterations-- > 0)
 8001a60:	e000      	b.n	8001a64 <delay+0xc>
	{
		__NOP();
 8001a62:	bf00      	nop
	while(iterations-- > 0)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <delay+0xa>
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a82:	f000 fd06 	bl	8002492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a86:	f000 f88f 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8a:	f7ff f9b3 	bl	8000df4 <MX_GPIO_Init>
  MX_RNG_Init();
 8001a8e:	f000 f8f3 	bl	8001c78 <MX_RNG_Init>
  MX_RTC_Init();
 8001a92:	f000 f951 	bl	8001d38 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001a96:	f000 fb45 	bl	8002124 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a9a:	f000 fb73 	bl	8002184 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001a9e:	f000 fba1 	bl	80021e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001aa2:	f7ff fa39 	bl	8000f18 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001aa6:	f000 fa73 	bl	8001f90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2120      	movs	r1, #32
 8001aae:	482f      	ldr	r0, [pc, #188]	; (8001b6c <main+0xf0>)
 8001ab0:	f001 f8da 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ab8:	f000 fd60 	bl	800257c <HAL_Delay>

  lcd_init();
 8001abc:	f7fe fe03 	bl	80006c6 <lcd_init>
  send_AT_init();
 8001ac0:	f7ff fd52 	bl	8001568 <send_AT_init>

  lcd_backlight(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7fe fe71 	bl	80007ac <lcd_backlight>
  lcd_clear();
 8001aca:	f7fe fe65 	bl	8000798 <lcd_clear>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4827      	ldr	r0, [pc, #156]	; (8001b70 <main+0xf4>)
 8001ad2:	f003 fb97 	bl	8005204 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <main+0xf4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34

  memset(key_buffer, '\0', BUFFER_SIZE);
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <main+0xf8>)
 8001ae6:	f005 ff97 	bl	8007a18 <memset>

  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2140      	movs	r1, #64	; 0x40
 8001aee:	4822      	ldr	r0, [pc, #136]	; (8001b78 <main+0xfc>)
 8001af0:	f001 f8ba 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	481f      	ldr	r0, [pc, #124]	; (8001b78 <main+0xfc>)
 8001afa:	f001 f8b5 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <main+0xfc>)
 8001b06:	f001 f8af 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b10:	4819      	ldr	r0, [pc, #100]	; (8001b78 <main+0xfc>)
 8001b12:	f001 f8a9 	bl	8002c68 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 8001b16:	2201      	movs	r2, #1
 8001b18:	4918      	ldr	r1, [pc, #96]	; (8001b7c <main+0x100>)
 8001b1a:	4819      	ldr	r0, [pc, #100]	; (8001b80 <main+0x104>)
 8001b1c:	f004 fbba 	bl	8006294 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	4918      	ldr	r1, [pc, #96]	; (8001b84 <main+0x108>)
 8001b24:	4818      	ldr	r0, [pc, #96]	; (8001b88 <main+0x10c>)
 8001b26:	f004 fbb5 	bl	8006294 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4917      	ldr	r1, [pc, #92]	; (8001b8c <main+0x110>)
 8001b2e:	4818      	ldr	r0, [pc, #96]	; (8001b90 <main+0x114>)
 8001b30:	f004 fbb0 	bl	8006294 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_timeout_gsm();
 8001b34:	f7ff fbea 	bl	800130c <check_timeout_gsm>
	  lcd_display(if_phone_number_set_latch, if_key_pressed, key_buffer, access_key, pressed_key, open_close_cmd);
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <main+0x118>)
 8001b3a:	7818      	ldrb	r0, [r3, #0]
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <main+0x11c>)
 8001b3e:	7819      	ldrb	r1, [r3, #0]
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <main+0x120>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <main+0x124>)
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <main+0x128>)
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <main+0xf8>)
 8001b50:	f7fe fe44 	bl	80007dc <lcd_display>
	  if_key_pressed = lcd_display_key(key_buffer, if_key_pressed);
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <main+0x11c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4806      	ldr	r0, [pc, #24]	; (8001b74 <main+0xf8>)
 8001b5c:	f7ff f922 	bl	8000da4 <lcd_display_key>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <main+0x11c>)
 8001b66:	701a      	strb	r2, [r3, #0]
	  check_timeout_gsm();
 8001b68:	e7e4      	b.n	8001b34 <main+0xb8>
 8001b6a:	bf00      	nop
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	200003d8 	.word	0x200003d8
 8001b74:	20000318 	.word	0x20000318
 8001b78:	48000800 	.word	0x48000800
 8001b7c:	20000327 	.word	0x20000327
 8001b80:	200004ac 	.word	0x200004ac
 8001b84:	20000328 	.word	0x20000328
 8001b88:	20000424 	.word	0x20000424
 8001b8c:	20000329 	.word	0x20000329
 8001b90:	20000534 	.word	0x20000534
 8001b94:	200002fe 	.word	0x200002fe
 8001b98:	200002ff 	.word	0x200002ff
 8001b9c:	2000034c 	.word	0x2000034c
 8001ba0:	20000320 	.word	0x20000320
 8001ba4:	20000310 	.word	0x20000310

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b096      	sub	sp, #88	; 0x58
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2244      	movs	r2, #68	; 0x44
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 ff2e 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bce:	f001 fcf5 	bl	80035bc <HAL_PWREx_ControlVoltageScaling>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bd8:	f000 f848 	bl	8001c6c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bdc:	f001 fcd0 	bl	8003580 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <SystemClock_Config+0xc0>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <SystemClock_Config+0xc0>)
 8001be8:	f023 0318 	bic.w	r3, r3, #24
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001bf0:	2314      	movs	r3, #20
 8001bf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c00:	2360      	movs	r3, #96	; 0x60
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c04:	2302      	movs	r3, #2
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c10:	2328      	movs	r3, #40	; 0x28
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fd1f 	bl	8003668 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001c30:	f000 f81c 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	230f      	movs	r3, #15
 8001c36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f8e7 	bl	8003e20 <HAL_RCC_ClockConfig>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c58:	f000 f808 	bl	8001c6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001c5c:	f002 fdee 	bl	800483c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001c60:	bf00      	nop
 8001c62:	3758      	adds	r7, #88	; 0x58
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <Error_Handler+0x8>
	...

08001c78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_RNG_Init+0x20>)
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <MX_RNG_Init+0x24>)
 8001c80:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_RNG_Init+0x20>)
 8001c84:	f002 ffbc 	bl	8004c00 <HAL_RNG_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c8e:	f7ff ffed 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200003a0 	.word	0x200003a0
 8001c9c:	50060800 	.word	0x50060800

08001ca0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0a6      	sub	sp, #152	; 0x98
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2288      	movs	r2, #136	; 0x88
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 feb1 	bl	8007a18 <memset>
  if(rngHandle->Instance==RNG)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_RNG_MspInit+0x90>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d133      	bne.n	8001d28 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001cc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cda:	2307      	movs	r3, #7
 8001cdc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ce6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f002 fab9 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001cfc:	f7ff ffb6 	bl	8001c6c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_RNG_MspInit+0x94>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <HAL_RNG_MspInit+0x94>)
 8001d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RNG_MspInit+0x94>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 2, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	2050      	movs	r0, #80	; 0x50
 8001d1e:	f000 fd2c 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001d22:	2050      	movs	r0, #80	; 0x50
 8001d24:	f000 fd45 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3798      	adds	r7, #152	; 0x98
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	50060800 	.word	0x50060800
 8001d34:	40021000 	.word	0x40021000

08001d38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <MX_RTC_Init+0x4c>)
 8001d40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d4a:	227f      	movs	r2, #127	; 0x7f
 8001d4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d50:	22ff      	movs	r2, #255	; 0xff
 8001d52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_RTC_Init+0x48>)
 8001d6e:	f003 f873 	bl	8004e58 <HAL_RTC_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001d78:	f7ff ff78 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200003b0 	.word	0x200003b0
 8001d84:	40002800 	.word	0x40002800

08001d88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0a4      	sub	sp, #144	; 0x90
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2288      	movs	r2, #136	; 0x88
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f005 fe3d 	bl	8007a18 <memset>
  if(rtcHandle->Instance==RTC)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a10      	ldr	r2, [pc, #64]	; (8001de4 <HAL_RTC_MspInit+0x5c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d118      	bne.n	8001dda <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fa54 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dc6:	f7ff ff51 	bl	8001c6c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RTC_MspInit+0x60>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_RTC_MspInit+0x60>)
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3790      	adds	r7, #144	; 0x90
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40002800 	.word	0x40002800
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_MspInit+0x44>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_MspInit+0x44>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_MspInit+0x44>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_MspInit+0x44>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_MspInit+0x44>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_MspInit+0x44>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 fb5c 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <USART1_IRQHandler+0x10>)
 8001e8e:	f004 fa4d 	bl	800632c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000424 	.word	0x20000424

08001e9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USART2_IRQHandler+0x10>)
 8001ea2:	f004 fa43 	bl	800632c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200004ac 	.word	0x200004ac

08001eb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USART3_IRQHandler+0x10>)
 8001eb6:	f004 fa39 	bl	800632c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000534 	.word	0x20000534

08001ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001ec8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ecc:	f000 fee4 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8001ed0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ed4:	f000 fee0 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8001ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001edc:	f000 fedc 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001ee0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ee4:	f000 fed8 	bl	8002c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <RNG_IRQHandler+0x10>)
 8001ef2:	f002 ff32 	bl	8004d5a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200003a0 	.word	0x200003a0

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f005 fda0 	bl	8007a74 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20018000 	.word	0x20018000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200003d4 	.word	0x200003d4
 8001f68:	20000708 	.word	0x20000708

08001f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <SystemInit+0x20>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <SystemInit+0x20>)
 8001f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	; 0x38
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <MX_TIM2_Init+0xec>)
 8001fc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <MX_TIM2_Init+0xec>)
 8001fcc:	224f      	movs	r2, #79	; 0x4f
 8001fce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <MX_TIM2_Init+0xec>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <MX_TIM2_Init+0xec>)
 8001fd8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <MX_TIM2_Init+0xec>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <MX_TIM2_Init+0xec>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fea:	4824      	ldr	r0, [pc, #144]	; (800207c <MX_TIM2_Init+0xec>)
 8001fec:	f003 f852 	bl	8005094 <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ff6:	f7ff fe39 	bl	8001c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002004:	4619      	mov	r1, r3
 8002006:	481d      	ldr	r0, [pc, #116]	; (800207c <MX_TIM2_Init+0xec>)
 8002008:	f003 fb16 	bl	8005638 <HAL_TIM_ConfigClockSource>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002012:	f7ff fe2b 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002016:	4819      	ldr	r0, [pc, #100]	; (800207c <MX_TIM2_Init+0xec>)
 8002018:	f003 f893 	bl	8005142 <HAL_TIM_PWM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002022:	f7ff fe23 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4811      	ldr	r0, [pc, #68]	; (800207c <MX_TIM2_Init+0xec>)
 8002036:	f003 fff9 	bl	800602c <HAL_TIMEx_MasterConfigSynchronization>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002040:	f7ff fe14 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	; 0x60
 8002046:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM2_Init+0xec>)
 800205e:	f003 f9d7 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002068:	f7ff fe00 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM2_Init+0xec>)
 800206e:	f000 f825 	bl	80020bc <HAL_TIM_MspPostInit>

}
 8002072:	bf00      	nop
 8002074:	3738      	adds	r7, #56	; 0x38
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200003d8 	.word	0x200003d8

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d10b      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_TIM_Base_MspInit+0x38>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_TIM_Base_MspInit+0x38>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6593      	str	r3, [r2, #88]	; 0x58
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_TIM_Base_MspInit+0x38>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d11c      	bne.n	8002118 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin;
 80020f6:	2301      	movs	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002106:	2301      	movs	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_0_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f000 fbe6 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000

08002124 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_USART1_UART_Init+0x58>)
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <MX_USART1_UART_Init+0x5c>)
 800212c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_USART1_UART_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_USART1_UART_Init+0x58>)
 800214a:	220c      	movs	r2, #12
 800214c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <MX_USART1_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002162:	2200      	movs	r2, #0
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_USART1_UART_Init+0x58>)
 8002168:	f003 ffe8 	bl	800613c <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002172:	f7ff fd7b 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000424 	.word	0x20000424
 8002180:	40013800 	.word	0x40013800

08002184 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_USART2_UART_Init+0x58>)
 800218a:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <MX_USART2_UART_Init+0x5c>)
 800218c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <MX_USART2_UART_Init+0x58>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_USART2_UART_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_USART2_UART_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_USART2_UART_Init+0x58>)
 80021c8:	f003 ffb8 	bl	800613c <HAL_UART_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021d2:	f7ff fd4b 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200004ac 	.word	0x200004ac
 80021e0:	40004400 	.word	0x40004400

080021e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_USART3_UART_Init+0x58>)
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <MX_USART3_UART_Init+0x5c>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_USART3_UART_Init+0x58>)
 80021f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_USART3_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_USART3_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_USART3_UART_Init+0x58>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_USART3_UART_Init+0x58>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <MX_USART3_UART_Init+0x58>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_USART3_UART_Init+0x58>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <MX_USART3_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_USART3_UART_Init+0x58>)
 8002222:	2200      	movs	r2, #0
 8002224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_USART3_UART_Init+0x58>)
 8002228:	f003 ff88 	bl	800613c <HAL_UART_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002232:	f7ff fd1b 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000534 	.word	0x20000534
 8002240:	40004800 	.word	0x40004800

08002244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b0b0      	sub	sp, #192	; 0xc0
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	2288      	movs	r2, #136	; 0x88
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fbd7 	bl	8007a18 <memset>
  if(uartHandle->Instance==USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6f      	ldr	r2, [pc, #444]	; (800242c <HAL_UART_MspInit+0x1e8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d145      	bne.n	8002300 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002278:	2300      	movs	r3, #0
 800227a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800227c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f001 fff1 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800228c:	f7ff fcee 	bl	8001c6c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002290:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002294:	4a66      	ldr	r2, [pc, #408]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229a:	6613      	str	r3, [r2, #96]	; 0x60
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022da:	2307      	movs	r3, #7
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ea:	f000 fafb 	bl	80028e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2108      	movs	r1, #8
 80022f2:	2025      	movs	r0, #37	; 0x25
 80022f4:	f000 fa41 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f8:	2025      	movs	r0, #37	; 0x25
 80022fa:	f000 fa5a 	bl	80027b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022fe:	e091      	b.n	8002424 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_UART_MspInit+0x1f0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d144      	bne.n	8002394 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800230a:	2302      	movs	r3, #2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800230e:	2300      	movs	r3, #0
 8002310:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f001 ffa6 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8002322:	f7ff fca3 	bl	8001c6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a41      	ldr	r2, [pc, #260]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002356:	230c      	movs	r3, #12
 8002358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800236e:	2307      	movs	r3, #7
 8002370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237e:	f000 fab1 	bl	80028e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	210a      	movs	r1, #10
 8002386:	2026      	movs	r0, #38	; 0x26
 8002388:	f000 f9f7 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238c:	2026      	movs	r0, #38	; 0x26
 800238e:	f000 fa10 	bl	80027b2 <HAL_NVIC_EnableIRQ>
}
 8002392:	e047      	b.n	8002424 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_UART_MspInit+0x1f4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d142      	bne.n	8002424 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800239e:	2304      	movs	r3, #4
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 ff5c 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_MspInit+0x176>
      Error_Handler();
 80023b6:	f7ff fc59 	bl	8001c6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_UART_MspInit+0x1ec>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ea:	2330      	movs	r3, #48	; 0x30
 80023ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002402:	2307      	movs	r3, #7
 8002404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800240c:	4619      	mov	r1, r3
 800240e:	480b      	ldr	r0, [pc, #44]	; (800243c <HAL_UART_MspInit+0x1f8>)
 8002410:	f000 fa68 	bl	80028e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2108      	movs	r1, #8
 8002418:	2027      	movs	r0, #39	; 0x27
 800241a:	f000 f9ae 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800241e:	2027      	movs	r0, #39	; 0x27
 8002420:	f000 f9c7 	bl	80027b2 <HAL_NVIC_EnableIRQ>
}
 8002424:	bf00      	nop
 8002426:	37c0      	adds	r7, #192	; 0xc0
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40013800 	.word	0x40013800
 8002430:	40021000 	.word	0x40021000
 8002434:	40004400 	.word	0x40004400
 8002438:	40004800 	.word	0x40004800
 800243c:	48000800 	.word	0x48000800

08002440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002444:	f7ff fd92 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopForever+0x6>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LoopForever+0xe>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <LoopForever+0x16>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246e:	f005 fb07 	bl	8007a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002472:	f7ff fb03 	bl	8001a7c <main>

08002476 <LoopForever>:

LoopForever:
    b LoopForever
 8002476:	e7fe      	b.n	8002476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002478:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002484:	08008548 	.word	0x08008548
  ldr r2, =_sbss
 8002488:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800248c:	20000708 	.word	0x20000708

08002490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC1_2_IRQHandler>

08002492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249c:	2003      	movs	r0, #3
 800249e:	f000 f961 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a2:	2000      	movs	r0, #0
 80024a4:	f000 f80e 	bl	80024c4 <HAL_InitTick>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	e001      	b.n	80024b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024b4:	f7ff fc9a 	bl	8001dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_InitTick+0x6c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d023      	beq.n	8002520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_InitTick+0x70>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_InitTick+0x6c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f96d 	bl	80027ce <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10f      	bne.n	800251a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d809      	bhi.n	8002514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 f937 	bl	800277a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800250c:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_InitTick+0x74>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e007      	b.n	8002524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e004      	b.n	8002524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e001      	b.n	8002524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000070 	.word	0x20000070
 8002534:	20000068 	.word	0x20000068
 8002538:	2000006c 	.word	0x2000006c

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000070 	.word	0x20000070
 8002560:	200005bc 	.word	0x200005bc

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	200005bc 	.word	0x200005bc

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000070 	.word	0x20000070

080025c4 <__NVIC_SetPriorityGrouping>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	; (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff3e 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff31 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d008      	beq.n	8002810 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2204      	movs	r2, #4
 8002802:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e022      	b.n	8002856 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	f003 021c 	and.w	r2, r3, #28
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d005      	beq.n	8002886 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	e029      	b.n	80028da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020e 	bic.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f003 021c 	and.w	r2, r3, #28
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
    }
  }
  return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f2:	e17f      	b.n	8002bf4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8171 	beq.w	8002bee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d005      	beq.n	8002924 <HAL_GPIO_Init+0x40>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d130      	bne.n	8002986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295a:	2201      	movs	r2, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0201 	and.w	r2, r3, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	d118      	bne.n	80029c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002998:	2201      	movs	r2, #1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f003 0201 	and.w	r2, r3, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d017      	beq.n	8002a00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d123      	bne.n	8002a54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	6939      	ldr	r1, [r7, #16]
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0203 	and.w	r2, r3, #3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80ac 	beq.w	8002bee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002aae:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <HAL_GPIO_Init+0x334>)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ad8:	d025      	beq.n	8002b26 <HAL_GPIO_Init+0x242>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4f      	ldr	r2, [pc, #316]	; (8002c1c <HAL_GPIO_Init+0x338>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x23e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	; (8002c20 <HAL_GPIO_Init+0x33c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x23a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4d      	ldr	r2, [pc, #308]	; (8002c24 <HAL_GPIO_Init+0x340>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x236>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_GPIO_Init+0x344>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x232>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4b      	ldr	r2, [pc, #300]	; (8002c2c <HAL_GPIO_Init+0x348>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x22e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4a      	ldr	r2, [pc, #296]	; (8002c30 <HAL_GPIO_Init+0x34c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x22a>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b0e:	2307      	movs	r3, #7
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x244>
 8002b26:	2300      	movs	r3, #0
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b38:	4937      	ldr	r1, [pc, #220]	; (8002c18 <HAL_GPIO_Init+0x334>)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f47f ae78 	bne.w	80028f4 <HAL_GPIO_Init+0x10>
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000c00 	.word	0x48000c00
 8002c28:	48001000 	.word	0x48001000
 8002c2c:	48001400 	.word	0x48001400
 8002c30:	48001800 	.word	0x48001800
 8002c34:	40010400 	.word	0x40010400

08002c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e001      	b.n	8002c5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c78:	787b      	ldrb	r3, [r7, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fc9e 	bl	80015f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e08d      	b.n	8002df6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe f952 	bl	8000f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	e006      	b.n	8002d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d108      	bne.n	8002d6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	e007      	b.n	8002d7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69d9      	ldr	r1, [r3, #28]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	f040 80fd 	bne.w	800301c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2C_Master_Transmit+0x30>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e0f6      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e38:	f7ff fb94 	bl	8002564 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2319      	movs	r3, #25
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f914 	bl	8003078 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0e1      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2221      	movs	r2, #33	; 0x21
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2210      	movs	r2, #16
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2bff      	cmp	r3, #255	; 0xff
 8002e8a:	d906      	bls.n	8002e9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e007      	b.n	8002eaa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d024      	beq.n	8002efc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	8979      	ldrh	r1, [r7, #10]
 8002eee:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <HAL_I2C_Master_Transmit+0x228>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fa79 	bl	80033ec <I2C_TransferConfig>
 8002efa:	e066      	b.n	8002fca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_I2C_Master_Transmit+0x228>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa6e 	bl	80033ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f10:	e05b      	b.n	8002fca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f8fd 	bl	8003116 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07b      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d034      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x1ca>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d130      	bne.n	8002fca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f880 	bl	8003078 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e04d      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d90e      	bls.n	8002faa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	22ff      	movs	r2, #255	; 0xff
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	8979      	ldrh	r1, [r7, #10]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa22 	bl	80033ec <I2C_TransferConfig>
 8002fa8:	e00f      	b.n	8002fca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa11 	bl	80033ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d19e      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	6a39      	ldr	r1, [r7, #32]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8e3 	bl	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e01a      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2220      	movs	r2, #32
 8002fee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_I2C_Master_Transmit+0x22c>)
 8002ffc:	400b      	ands	r3, r1
 8002ffe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	80002000 	.word	0x80002000
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d103      	bne.n	800304e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d007      	beq.n	800306c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	619a      	str	r2, [r3, #24]
  }
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003088:	e031      	b.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d02d      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff fa67 	bl	8002564 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d122      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d113      	bne.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d0be      	beq.n	800308a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003122:	e033      	b.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f87f 	bl	800322c <I2C_IsErrorOccurred>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e031      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d025      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7ff fa10 	bl	8002564 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11a      	bne.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	d013      	beq.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d1c4      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b0:	e02f      	b.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f838 	bl	800322c <I2C_IsErrorOccurred>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02d      	b.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7ff f9cd 	bl	8002564 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d11a      	bne.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d013      	beq.n	8003212 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d1c8      	bne.n	80031b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d068      	beq.n	800332a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2210      	movs	r2, #16
 800325e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003260:	e049      	b.n	80032f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d045      	beq.n	80032f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7ff f97b 	bl	8002564 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_IsErrorOccurred+0x54>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d13a      	bne.n	80032f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003292:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a2:	d121      	bne.n	80032e8 <I2C_IsErrorOccurred+0xbc>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032aa:	d01d      	beq.n	80032e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d01a      	beq.n	80032e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032c2:	f7ff f94f 	bl	8002564 <HAL_GetTick>
 80032c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c8:	e00e      	b.n	80032e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ca:	f7ff f94b 	bl	8002564 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b19      	cmp	r3, #25
 80032d6:	d907      	bls.n	80032e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80032e6:	e006      	b.n	80032f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d1e9      	bne.n	80032ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b20      	cmp	r3, #32
 8003302:	d003      	beq.n	800330c <I2C_IsErrorOccurred+0xe0>
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0aa      	beq.n	8003262 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800330c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2220      	movs	r2, #32
 800331a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003390:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01c      	beq.n	80033da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff fe45 	bl	8003030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <I2C_IsErrorOccurred+0x1bc>)
 80033b2:	400b      	ands	r3, r1
 80033b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3728      	adds	r7, #40	; 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	460b      	mov	r3, r1
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	4613      	mov	r3, r2
 80033fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003404:	7a7b      	ldrb	r3, [r7, #9]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800340c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	4313      	orrs	r3, r2
 8003416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800341a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	0d5b      	lsrs	r3, r3, #21
 8003426:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <I2C_TransferConfig+0x60>)
 800342c:	430b      	orrs	r3, r1
 800342e:	43db      	mvns	r3, r3
 8003430:	ea02 0103 	and.w	r1, r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	03ff63ff 	.word	0x03ff63ff

08003450 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d138      	bne.n	80034d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003470:	2302      	movs	r3, #2
 8003472:	e032      	b.n	80034da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d139      	bne.n	8003570 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003506:	2302      	movs	r3, #2
 8003508:	e033      	b.n	8003572 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2224      	movs	r2, #36	; 0x24
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003538:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40007000 	.word	0x40007000

080035bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ca:	d130      	bne.n	800362e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d038      	beq.n	800364c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ea:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2232      	movs	r2, #50	; 0x32
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0c9b      	lsrs	r3, r3, #18
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003600:	e002      	b.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3b01      	subs	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003614:	d102      	bne.n	800361c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f2      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003628:	d110      	bne.n	800364c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e00f      	b.n	800364e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d007      	beq.n	800364c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003644:	4a05      	ldr	r2, [pc, #20]	; (800365c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40007000 	.word	0x40007000
 8003660:	20000068 	.word	0x20000068
 8003664:	431bde83 	.word	0x431bde83

08003668 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e3ca      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800367a:	4b97      	ldr	r3, [pc, #604]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003684:	4b94      	ldr	r3, [pc, #592]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80e4 	beq.w	8003864 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4a>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	f040 808b 	bne.w	80037c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 8087 	bne.w	80037c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b2:	4b89      	ldr	r3, [pc, #548]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_RCC_OscConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e3a2      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	4b82      	ldr	r3, [pc, #520]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_RCC_OscConfig+0x7c>
 80036da:	4b7f      	ldr	r3, [pc, #508]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e2:	e005      	b.n	80036f0 <HAL_RCC_OscConfig+0x88>
 80036e4:	4b7c      	ldr	r3, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d223      	bcs.n	800373c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fd55 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e383      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003708:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a72      	ldr	r2, [pc, #456]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800370e:	f043 0308 	orr.w	r3, r3, #8
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b70      	ldr	r3, [pc, #448]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	496d      	ldr	r1, [pc, #436]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003726:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	4968      	ldr	r1, [pc, #416]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
 800373a:	e025      	b.n	8003788 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a65      	ldr	r2, [pc, #404]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4960      	ldr	r1, [pc, #384]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	495b      	ldr	r1, [pc, #364]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fd15 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e343      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003788:	f000 fc4a 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b52      	ldr	r3, [pc, #328]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	4950      	ldr	r1, [pc, #320]	; (80038dc <HAL_RCC_OscConfig+0x274>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
 80037a4:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_RCC_OscConfig+0x278>)
 80037a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037a8:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_RCC_OscConfig+0x27c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fe89 	bl	80024c4 <HAL_InitTick>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d052      	beq.n	8003862 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	e327      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d032      	beq.n	800382e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037c8:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a42      	ldr	r2, [pc, #264]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037d4:	f7fe fec6 	bl	8002564 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037dc:	f7fe fec2 	bl	8002564 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e310      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a36      	ldr	r2, [pc, #216]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4931      	ldr	r1, [pc, #196]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	492c      	ldr	r1, [pc, #176]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e01a      	b.n	8003864 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800383a:	f7fe fe93 	bl	8002564 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003842:	f7fe fe8f 	bl	8002564 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e2dd      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003854:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x1da>
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003862:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d074      	beq.n	800395a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b08      	cmp	r3, #8
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x21a>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d10e      	bne.n	800389a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d10b      	bne.n	800389a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d064      	beq.n	8003958 <HAL_RCC_OscConfig+0x2f0>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d160      	bne.n	8003958 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e2ba      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x24a>
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e026      	b.n	8003900 <HAL_RCC_OscConfig+0x298>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ba:	d115      	bne.n	80038e8 <HAL_RCC_OscConfig+0x280>
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a02      	ldr	r2, [pc, #8]	; (80038d8 <HAL_RCC_OscConfig+0x270>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x298>
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080084bc 	.word	0x080084bc
 80038e0:	20000068 	.word	0x20000068
 80038e4:	2000006c 	.word	0x2000006c
 80038e8:	4ba0      	ldr	r3, [pc, #640]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a9f      	ldr	r2, [pc, #636]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b9d      	ldr	r3, [pc, #628]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a9c      	ldr	r2, [pc, #624]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80038fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fe2c 	bl	8002564 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fe fe28 	bl	8002564 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	; 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e276      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003922:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x2a8>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fe fe18 	bl	8002564 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fe fe14 	bl	8002564 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e262      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x2d0>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d060      	beq.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d005      	beq.n	8003978 <HAL_RCC_OscConfig+0x310>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d119      	bne.n	80039a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d116      	bne.n	80039a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003978:	4b7c      	ldr	r3, [pc, #496]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_OscConfig+0x328>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e23f      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	4973      	ldr	r1, [pc, #460]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a4:	e040      	b.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d023      	beq.n	80039f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ae:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe fdd3 	bl	8002564 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe fdcf 	bl	8002564 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e21d      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d4:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	495f      	ldr	r1, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	e018      	b.n	8003a28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5c      	ldr	r2, [pc, #368]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 80039fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fe fdaf 	bl	8002564 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fe fdab 	bl	8002564 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1f9      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d03c      	beq.n	8003aae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3c:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a42:	4a4a      	ldr	r2, [pc, #296]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fd8a 	bl	8002564 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7fe fd86 	bl	8002564 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1d4      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a66:	4b41      	ldr	r3, [pc, #260]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ef      	beq.n	8003a54 <HAL_RCC_OscConfig+0x3ec>
 8003a74:	e01b      	b.n	8003aae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a76:	4b3d      	ldr	r3, [pc, #244]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe fd6d 	bl	8002564 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7fe fd69 	bl	8002564 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1b7      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa0:	4b32      	ldr	r3, [pc, #200]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ef      	bne.n	8003a8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a6 	beq.w	8003c08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abc:	2300      	movs	r3, #0
 8003abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10d      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003acc:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_RCC_OscConfig+0x508>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d118      	bne.n	8003b26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_OscConfig+0x508>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_RCC_OscConfig+0x508>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fd30 	bl	8002564 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fe fd2c 	bl	8002564 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e17a      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_RCC_OscConfig+0x508>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4d8>
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b3e:	e029      	b.n	8003b94 <HAL_RCC_OscConfig+0x52c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d115      	bne.n	8003b74 <HAL_RCC_OscConfig+0x50c>
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <HAL_RCC_OscConfig+0x504>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b68:	e014      	b.n	8003b94 <HAL_RCC_OscConfig+0x52c>
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
 8003b74:	4b9c      	ldr	r3, [pc, #624]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	4a9b      	ldr	r2, [pc, #620]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b84:	4b98      	ldr	r3, [pc, #608]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a97      	ldr	r2, [pc, #604]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d016      	beq.n	8003bca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fce2 	bl	8002564 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fcde 	bl	8002564 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e12a      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bba:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ed      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x53c>
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bca:	f7fe fccb 	bl	8002564 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd0:	e00a      	b.n	8003be8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fcc7 	bl	8002564 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e113      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003be8:	4b7f      	ldr	r3, [pc, #508]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ed      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a79      	ldr	r2, [pc, #484]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80fe 	beq.w	8003e0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f040 80d0 	bne.w	8003dbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c1c:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d130      	bne.n	8003c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d127      	bne.n	8003c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d11f      	bne.n	8003c92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5c:	2a07      	cmp	r2, #7
 8003c5e:	bf14      	ite	ne
 8003c60:	2201      	movne	r2, #1
 8003c62:	2200      	moveq	r2, #0
 8003c64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d113      	bne.n	8003c92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	085b      	lsrs	r3, r3, #1
 8003c76:	3b01      	subs	r3, #1
 8003c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	085b      	lsrs	r3, r3, #1
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d06e      	beq.n	8003d70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	d069      	beq.n	8003d6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0ad      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b4c      	ldr	r3, [pc, #304]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a4b      	ldr	r2, [pc, #300]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cc0:	f7fe fc50 	bl	8002564 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fe fc4c 	bl	8002564 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e09a      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	4b40      	ldr	r3, [pc, #256]	; (8003dec <HAL_RCC_OscConfig+0x784>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d00:	0212      	lsls	r2, r2, #8
 8003d02:	4311      	orrs	r1, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d08:	0852      	lsrs	r2, r2, #1
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	0552      	lsls	r2, r2, #21
 8003d0e:	4311      	orrs	r1, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d14:	0852      	lsrs	r2, r2, #1
 8003d16:	3a01      	subs	r2, #1
 8003d18:	0652      	lsls	r2, r2, #25
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d20:	0912      	lsrs	r2, r2, #4
 8003d22:	0452      	lsls	r2, r2, #17
 8003d24:	430a      	orrs	r2, r1
 8003d26:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d44:	f7fe fc0e 	bl	8002564 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fe fc0a 	bl	8002564 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e058      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d6a:	e050      	b.n	8003e0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e04f      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d148      	bne.n	8003e0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a16      	ldr	r2, [pc, #88]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d94:	f7fe fbe6 	bl	8002564 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe fbe2 	bl	8002564 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e030      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x734>
 8003dba:	e028      	b.n	8003e0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d023      	beq.n	8003e0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x780>)
 8003dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fe fbc9 	bl	8002564 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe fbc5 	bl	8002564 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d905      	bls.n	8003df0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e013      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_OscConfig+0x7b0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ec      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_RCC_OscConfig+0x7b0>)
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4905      	ldr	r1, [pc, #20]	; (8003e18 <HAL_RCC_OscConfig+0x7b0>)
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_OscConfig+0x7b4>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	60cb      	str	r3, [r1, #12]
 8003e08:	e001      	b.n	8003e0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	feeefffc 	.word	0xfeeefffc

08003e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0e7      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b75      	ldr	r3, [pc, #468]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d910      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b72      	ldr	r3, [pc, #456]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4970      	ldr	r1, [pc, #448]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b6e      	ldr	r3, [pc, #440]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cf      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d908      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4960      	ldr	r1, [pc, #384]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d04c      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	4b5a      	ldr	r3, [pc, #360]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d121      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0a6      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	4b54      	ldr	r3, [pc, #336]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e09a      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed6:	4b4e      	ldr	r3, [pc, #312]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e08e      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e086      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4943      	ldr	r1, [pc, #268]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fe fb2c 	bl	8002564 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fe fb28 	bl	8002564 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e06e      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b3a      	ldr	r3, [pc, #232]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d010      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d208      	bcs.n	8003f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	492b      	ldr	r1, [pc, #172]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f66:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d210      	bcs.n	8003f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4923      	ldr	r1, [pc, #140]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <HAL_RCC_ClockConfig+0x1ec>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e036      	b.n	8004004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4918      	ldr	r1, [pc, #96]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4910      	ldr	r1, [pc, #64]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd4:	f000 f824 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	490b      	ldr	r1, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x1f4>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff0:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1fc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fa63 	bl	80024c4 <HAL_InitTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	72fb      	strb	r3, [r7, #11]

  return status;
 8004002:	7afb      	ldrb	r3, [r7, #11]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40022000 	.word	0x40022000
 8004010:	40021000 	.word	0x40021000
 8004014:	080084bc 	.word	0x080084bc
 8004018:	20000068 	.word	0x20000068
 800401c:	2000006c 	.word	0x2000006c

08004020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402e:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x34>
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d121      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d11e      	bne.n	8004092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004054:	4b34      	ldr	r3, [pc, #208]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004060:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e005      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004070:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	091b      	lsrs	r3, r3, #4
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800407c:	4a2b      	ldr	r2, [pc, #172]	; (800412c <HAL_RCC_GetSysClockFreq+0x10c>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d102      	bne.n	800409e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_GetSysClockFreq+0x110>)
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	e004      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_RCC_GetSysClockFreq+0x114>)
 80040a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d134      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d003      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0xac>
 80040c4:	e005      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_GetSysClockFreq+0x110>)
 80040c8:	617b      	str	r3, [r7, #20]
      break;
 80040ca:	e005      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ce:	617b      	str	r3, [r7, #20]
      break;
 80040d0:	e002      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	617b      	str	r3, [r7, #20]
      break;
 80040d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	fb03 f202 	mul.w	r2, r3, r2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <HAL_RCC_GetSysClockFreq+0x108>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	0e5b      	lsrs	r3, r3, #25
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	3301      	adds	r3, #1
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004118:	69bb      	ldr	r3, [r7, #24]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	080084d4 	.word	0x080084d4
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000068 	.word	0x20000068

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	080084cc 	.word	0x080084cc

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004180:	f7ff ffda 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0adb      	lsrs	r3, r3, #11
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4904      	ldr	r1, [pc, #16]	; (80041a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	080084cc 	.word	0x080084cc

080041a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041c0:	f7ff f9ee 	bl	80035a0 <HAL_PWREx_GetVoltageRange>
 80041c4:	6178      	str	r0, [r7, #20]
 80041c6:	e014      	b.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	; 0x58
 80041d4:	4b22      	ldr	r3, [pc, #136]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e0:	f7ff f9de 	bl	80035a0 <HAL_PWREx_GetVoltageRange>
 80041e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d10b      	bne.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d919      	bls.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2ba0      	cmp	r3, #160	; 0xa0
 8004204:	d902      	bls.n	800420c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004206:	2302      	movs	r3, #2
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e013      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e010      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d902      	bls.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004218:	2303      	movs	r3, #3
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e00a      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b80      	cmp	r3, #128	; 0x80
 8004222:	d102      	bne.n	800422a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004224:	2302      	movs	r3, #2
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	e004      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d101      	bne.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004230:	2301      	movs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 0207 	bic.w	r2, r3, #7
 800423c:	4909      	ldr	r1, [pc, #36]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	40022000 	.word	0x40022000

08004268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004270:	2300      	movs	r3, #0
 8004272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004274:	2300      	movs	r3, #0
 8004276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d041      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800428c:	d02a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800428e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004292:	d824      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004298:	d008      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800429a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800429e:	d81e      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a8:	d010      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042aa:	e018      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042ac:	4b86      	ldr	r3, [pc, #536]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a85      	ldr	r2, [pc, #532]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b8:	e015      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 facb 	bl	800485c <RCCEx_PLLSAI1_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ca:	e00c      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3320      	adds	r3, #32
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fbb6 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	74fb      	strb	r3, [r7, #19]
      break;
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ec:	4b76      	ldr	r3, [pc, #472]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fa:	4973      	ldr	r1, [pc, #460]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d041      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800431c:	d02a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800431e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004322:	d824      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004328:	d008      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800432a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800432e:	d81e      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004338:	d010      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800433a:	e018      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800433c:	4b62      	ldr	r3, [pc, #392]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004346:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004348:	e015      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa83 	bl	800485c <RCCEx_PLLSAI1_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800435a:	e00c      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3320      	adds	r3, #32
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fb6e 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800436c:	e003      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	74fb      	strb	r3, [r7, #19]
      break;
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437c:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438a:	494f      	ldr	r1, [pc, #316]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004392:	e001      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7cfb      	ldrb	r3, [r7, #19]
 8004396:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80a0 	beq.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043aa:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	4a40      	ldr	r2, [pc, #256]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ca:	6593      	str	r3, [r2, #88]	; 0x58
 80043cc:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d8:	2301      	movs	r3, #1
 80043da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043dc:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e8:	f7fe f8bc 	bl	8002564 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ee:	e009      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fe f8b8 	bl	8002564 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d902      	bls.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	74fb      	strb	r3, [r7, #19]
        break;
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004404:	4b31      	ldr	r3, [pc, #196]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d15c      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004416:	4b2c      	ldr	r3, [pc, #176]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01f      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	d019      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004440:	4b21      	ldr	r3, [pc, #132]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe f877 	bl	8002564 <HAL_GetTick>
 8004476:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004478:	e00b      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fe f873 	bl	8002564 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d902      	bls.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	74fb      	strb	r3, [r7, #19]
            break;
 8004490:	e006      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ec      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b6:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	74bb      	strb	r3, [r7, #18]
 80044c4:	e006      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d4:	7c7b      	ldrb	r3, [r7, #17]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044da:	4b9e      	ldr	r3, [pc, #632]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	4a9d      	ldr	r2, [pc, #628]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044f2:	4b98      	ldr	r3, [pc, #608]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f023 0203 	bic.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	4994      	ldr	r1, [pc, #592]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004514:	4b8f      	ldr	r3, [pc, #572]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f023 020c 	bic.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	498c      	ldr	r1, [pc, #560]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004536:	4b87      	ldr	r3, [pc, #540]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	4983      	ldr	r1, [pc, #524]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	497b      	ldr	r1, [pc, #492]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	4972      	ldr	r1, [pc, #456]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0320 	and.w	r3, r3, #32
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459c:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	496a      	ldr	r1, [pc, #424]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045cc:	4961      	ldr	r1, [pc, #388]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045e0:	4b5c      	ldr	r3, [pc, #368]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ee:	4959      	ldr	r1, [pc, #356]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004602:	4b54      	ldr	r3, [pc, #336]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	4950      	ldr	r1, [pc, #320]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004624:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	4948      	ldr	r1, [pc, #288]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	493f      	ldr	r1, [pc, #252]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d028      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004668:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004686:	d106      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004688:	4b32      	ldr	r3, [pc, #200]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a31      	ldr	r2, [pc, #196]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004692:	60d3      	str	r3, [r2, #12]
 8004694:	e011      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800469e:	d10c      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f8d8 	bl	800485c <RCCEx_PLLSAI1_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d028      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	491f      	ldr	r1, [pc, #124]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f0:	60d3      	str	r3, [r2, #12]
 80046f2:	e011      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	3304      	adds	r3, #4
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f8a9 	bl	800485c <RCCEx_PLLSAI1_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470e:	7cfb      	ldrb	r3, [r7, #19]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02b      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	4908      	ldr	r1, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004742:	d109      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a02      	ldr	r2, [pc, #8]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474e:	60d3      	str	r3, [r2, #12]
 8004750:	e014      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004760:	d10c      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f877 	bl	800485c <RCCEx_PLLSAI1_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d02f      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	4928      	ldr	r1, [pc, #160]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a6:	d10d      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	2102      	movs	r1, #2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 f854 	bl	800485c <RCCEx_PLLSAI1_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d014      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	74bb      	strb	r3, [r7, #18]
 80047c2:	e011      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3320      	adds	r3, #32
 80047d2:	2102      	movs	r1, #2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f935 	bl	8004a44 <RCCEx_PLLSAI2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004802:	490d      	ldr	r1, [pc, #52]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800482e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a04      	ldr	r2, [pc, #16]	; (8004858 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000

0800485c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800486a:	4b75      	ldr	r3, [pc, #468]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d018      	beq.n	80048a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004876:	4b72      	ldr	r3, [pc, #456]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0203 	and.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
       ||
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
       ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d047      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	e044      	b.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d018      	beq.n	80048e2 <RCCEx_PLLSAI1_Config+0x86>
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d825      	bhi.n	8004900 <RCCEx_PLLSAI1_Config+0xa4>
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d002      	beq.n	80048be <RCCEx_PLLSAI1_Config+0x62>
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d009      	beq.n	80048d0 <RCCEx_PLLSAI1_Config+0x74>
 80048bc:	e020      	b.n	8004900 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048be:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11d      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ce:	e01a      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048d0:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e0:	e013      	b.n	800490a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048e2:	4b57      	ldr	r3, [pc, #348]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ee:	4b54      	ldr	r3, [pc, #336]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048fe:	e006      	b.n	800490e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e004      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004916:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	430b      	orrs	r3, r1
 800492c:	4944      	ldr	r1, [pc, #272]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d17d      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fd fe0e 	bl	8002564 <HAL_GetTick>
 8004948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800494a:	e009      	b.n	8004960 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800494c:	f7fd fe0a 	bl	8002564 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d902      	bls.n	8004960 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	73fb      	strb	r3, [r7, #15]
        break;
 800495e:	e005      	b.n	800496c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1ef      	bne.n	800494c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d160      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	0211      	lsls	r1, r2, #8
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	0912      	lsrs	r2, r2, #4
 8004990:	0452      	lsls	r2, r2, #17
 8004992:	430a      	orrs	r2, r1
 8004994:	492a      	ldr	r1, [pc, #168]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
 800499a:	e027      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d112      	bne.n	80049c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a2:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	0211      	lsls	r1, r2, #8
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6912      	ldr	r2, [r2, #16]
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	0552      	lsls	r2, r2, #21
 80049be:	430a      	orrs	r2, r1
 80049c0:	491f      	ldr	r1, [pc, #124]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]
 80049c6:	e011      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	0211      	lsls	r1, r2, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6952      	ldr	r2, [r2, #20]
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0652      	lsls	r2, r2, #25
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4916      	ldr	r1, [pc, #88]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd fdb4 	bl	8002564 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fe:	e009      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a00:	f7fd fdb0 	bl	8002564 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d902      	bls.n	8004a14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
          break;
 8004a12:	e005      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ef      	beq.n	8004a00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4904      	ldr	r1, [pc, #16]	; (8004a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a52:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a5e:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0203 	and.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d10d      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
       ||
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a76:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
       ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d047      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e044      	b.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d018      	beq.n	8004aca <RCCEx_PLLSAI2_Config+0x86>
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d825      	bhi.n	8004ae8 <RCCEx_PLLSAI2_Config+0xa4>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d002      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x62>
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d009      	beq.n	8004ab8 <RCCEx_PLLSAI2_Config+0x74>
 8004aa4:	e020      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aa6:	4b55      	ldr	r3, [pc, #340]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11d      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab6:	e01a      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab8:	4b50      	ldr	r3, [pc, #320]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d116      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac8:	e013      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aca:	4b4c      	ldr	r3, [pc, #304]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad6:	4b49      	ldr	r3, [pc, #292]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ae6:	e006      	b.n	8004af6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      break;
 8004aec:	e004      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004afe:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6819      	ldr	r1, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	430b      	orrs	r3, r1
 8004b14:	4939      	ldr	r1, [pc, #228]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d167      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2c:	f7fd fd1a 	bl	8002564 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b32:	e009      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b34:	f7fd fd16 	bl	8002564 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d902      	bls.n	8004b48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	73fb      	strb	r3, [r7, #15]
        break;
 8004b46:	e005      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b48:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ef      	bne.n	8004b34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d14a      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6892      	ldr	r2, [r2, #8]
 8004b70:	0211      	lsls	r1, r2, #8
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	0912      	lsrs	r2, r2, #4
 8004b78:	0452      	lsls	r2, r2, #17
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	491f      	ldr	r1, [pc, #124]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	614b      	str	r3, [r1, #20]
 8004b82:	e011      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6892      	ldr	r2, [r2, #8]
 8004b94:	0211      	lsls	r1, r2, #8
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6912      	ldr	r2, [r2, #16]
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4916      	ldr	r1, [pc, #88]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fcd6 	bl	8002564 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bba:	e009      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bbc:	f7fd fcd2 	bl	8002564 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004bce:	e005      	b.n	8004bdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ef      	beq.n	8004bbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000

08004c00 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e049      	b.n	8004ca6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	795b      	ldrb	r3, [r3, #5]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fd f83c 	bl	8001ca0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0204 	orr.w	r2, r2, #4
 8004c3c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d104      	bne.n	8004c56 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e027      	b.n	8004ca6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c56:	f7fd fc85 	bl	8002564 <HAL_GetTick>
 8004c5a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c5c:	e015      	b.n	8004c8a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004c5e:	f7fd fc81 	bl	8002564 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d90e      	bls.n	8004c8a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d107      	bne.n	8004c8a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00d      	b.n	8004ca6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d0e2      	beq.n	8004c5e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	791b      	ldrb	r3, [r3, #4]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e044      	b.n	8004d52 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	795b      	ldrb	r3, [r3, #5]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d133      	bne.n	8004d40 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cde:	f7fd fc41 	bl	8002564 <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ce4:	e018      	b.n	8004d18 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ce6:	f7fd fc3d 	bl	8002564 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d911      	bls.n	8004d18 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00a      	beq.n	8004d18 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e01c      	b.n	8004d52 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d1df      	bne.n	8004ce6 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	715a      	strb	r2, [r3, #5]
 8004d3e:	e004      	b.n	8004d4a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	711a      	strb	r2, [r3, #4]

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e01f      	b.n	8004dc4 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01a      	beq.n	8004dc4 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	e00c      	b.n	8004dc4 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0208 	bic.w	r2, r2, #8
 8004dc2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d10b      	bne.n	8004de2 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f837 	bl	8004e44 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004dde:	605a      	str	r2, [r3, #4]

    return;
 8004de0:	e022      	b.n	8004e28 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0208 	bic.w	r2, r2, #8
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	795b      	ldrb	r3, [r3, #5]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d00b      	beq.n	8004e28 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f803 	bl	8004e2e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d079      	beq.n	8004f5e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc ff82 	bl	8001d88 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d058      	beq.n	8004f4c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ca      	movs	r2, #202	; 0xca
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2253      	movs	r2, #83	; 0x53
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f880 	bl	8004fb0 <RTC_EnterInitMode>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d127      	bne.n	8004f0a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68d2      	ldr	r2, [r2, #12]
 8004ef4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6919      	ldr	r1, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	041a      	lsls	r2, r3, #16
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f884 	bl	8005018 <RTC_ExitInitMode>
 8004f10:	4603      	mov	r3, r0
 8004f12:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0203 	bic.w	r2, r2, #3
 8004f28:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24
 8004f4a:	e001      	b.n	8004f50 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <HAL_RTC_WaitForSynchro+0x44>)
 8004f76:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004f78:	f7fd faf4 	bl	8002564 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f7e:	e009      	b.n	8004f94 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f80:	f7fd faf0 	bl	8002564 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f8e:	d901      	bls.n	8004f94 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e007      	b.n	8004fa4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ee      	beq.n	8004f80 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	0003ff5f 	.word	0x0003ff5f

08004fb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d120      	bne.n	800500c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fd4:	f7fd fac6 	bl	8002564 <HAL_GetTick>
 8004fd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fda:	e00d      	b.n	8004ff8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fdc:	f7fd fac2 	bl	8002564 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fea:	d905      	bls.n	8004ff8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <RTC_EnterInitMode+0x5c>
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d1e7      	bne.n	8004fdc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <RTC_ExitInitMode+0x78>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a19      	ldr	r2, [pc, #100]	; (8005090 <RTC_ExitInitMode+0x78>)
 800502a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <RTC_ExitInitMode+0x78>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10c      	bne.n	8005056 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff93 	bl	8004f68 <HAL_RTC_WaitForSynchro>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01e      	beq.n	8005086 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2203      	movs	r2, #3
 800504c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	73fb      	strb	r3, [r7, #15]
 8005054:	e017      	b.n	8005086 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <RTC_ExitInitMode+0x78>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <RTC_ExitInitMode+0x78>)
 800505c:	f023 0320 	bic.w	r3, r3, #32
 8005060:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff80 	bl	8004f68 <HAL_RTC_WaitForSynchro>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2203      	movs	r2, #3
 8005072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <RTC_ExitInitMode+0x78>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	4a04      	ldr	r2, [pc, #16]	; (8005090 <RTC_ExitInitMode+0x78>)
 8005080:	f043 0320 	orr.w	r3, r3, #32
 8005084:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40002800 	.word	0x40002800

08005094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e049      	b.n	800513a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc ffe0 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 fb7a 	bl	80057cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e049      	b.n	80051e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d106      	bne.n	800516e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f841 	bl	80051f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f000 fb23 	bl	80057cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x24>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e03c      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d109      	bne.n	8005242 <HAL_TIM_PWM_Start+0x3e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e02f      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x58>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e022      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x72>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e015      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x8c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <HAL_TIM_PWM_Start+0x9e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e09c      	b.n	80053e4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0xb6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	e023      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0xc6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c8:	e01b      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xd6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d8:	e013      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xe6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xf6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f8:	e003      	b.n	8005302 <HAL_TIM_PWM_Start+0xfe>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fe68 	bl	8005fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a35      	ldr	r2, [pc, #212]	; (80053ec <HAL_TIM_PWM_Start+0x1e8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a34      	ldr	r2, [pc, #208]	; (80053f0 <HAL_TIM_PWM_Start+0x1ec>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <HAL_TIM_PWM_Start+0x1f0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a31      	ldr	r2, [pc, #196]	; (80053f8 <HAL_TIM_PWM_Start+0x1f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_PWM_Start+0x13e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <HAL_TIM_PWM_Start+0x1f8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_Start+0x142>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_TIM_PWM_Start+0x144>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_TIM_PWM_Start+0x1e8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01d      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536e:	d018      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a22      	ldr	r2, [pc, #136]	; (8005400 <HAL_TIM_PWM_Start+0x1fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_TIM_PWM_Start+0x200>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <HAL_TIM_PWM_Start+0x204>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_TIM_PWM_Start+0x1ec>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x19e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <HAL_TIM_PWM_Start+0x1f0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d115      	bne.n	80053ce <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b18      	ldr	r3, [pc, #96]	; (800540c <HAL_TIM_PWM_Start+0x208>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b06      	cmp	r3, #6
 80053b2:	d015      	beq.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ba:	d011      	beq.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053cc:	e008      	b.n	80053e0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f042 0201 	orr.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e000      	b.n	80053e2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ff      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b14      	cmp	r3, #20
 800543a:	f200 80f0 	bhi.w	800561e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005499 	.word	0x08005499
 8005448:	0800561f 	.word	0x0800561f
 800544c:	0800561f 	.word	0x0800561f
 8005450:	0800561f 	.word	0x0800561f
 8005454:	080054d9 	.word	0x080054d9
 8005458:	0800561f 	.word	0x0800561f
 800545c:	0800561f 	.word	0x0800561f
 8005460:	0800561f 	.word	0x0800561f
 8005464:	0800551b 	.word	0x0800551b
 8005468:	0800561f 	.word	0x0800561f
 800546c:	0800561f 	.word	0x0800561f
 8005470:	0800561f 	.word	0x0800561f
 8005474:	0800555b 	.word	0x0800555b
 8005478:	0800561f 	.word	0x0800561f
 800547c:	0800561f 	.word	0x0800561f
 8005480:	0800561f 	.word	0x0800561f
 8005484:	0800559d 	.word	0x0800559d
 8005488:	0800561f 	.word	0x0800561f
 800548c:	0800561f 	.word	0x0800561f
 8005490:	0800561f 	.word	0x0800561f
 8005494:	080055dd 	.word	0x080055dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fa2e 	bl	8005900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6999      	ldr	r1, [r3, #24]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      break;
 80054d6:	e0a5      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fa9e 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      break;
 8005518:	e084      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fb07 	bl	8005b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]
      break;
 8005558:	e064      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb6f 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	61da      	str	r2, [r3, #28]
      break;
 800559a:	e043      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fbb8 	bl	8005d18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0208 	orr.w	r2, r2, #8
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0204 	bic.w	r2, r2, #4
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055da:	e023      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fbfc 	bl	8005de0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	021a      	lsls	r2, r3, #8
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800561c:	e002      	b.n	8005624 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	75fb      	strb	r3, [r7, #23]
      break;
 8005622:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop

08005638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x1c>
 8005650:	2302      	movs	r3, #2
 8005652:	e0b6      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x18a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	d03e      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0xd8>
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	f200 8087 	bhi.w	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	f000 8086 	beq.w	80057ae <HAL_TIM_ConfigClockSource+0x176>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d87f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056a8:	2b70      	cmp	r3, #112	; 0x70
 80056aa:	d01a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xaa>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d87b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056b0:	2b60      	cmp	r3, #96	; 0x60
 80056b2:	d050      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x11e>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d877      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056b8:	2b50      	cmp	r3, #80	; 0x50
 80056ba:	d03c      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xfe>
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d873      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d058      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x13e>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d86f      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d064      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d86b      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d060      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d867      	bhi.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05c      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d05a      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x15e>
 80056e0:	e062      	b.n	80057a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f2:	f000 fc55 	bl	8005fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	609a      	str	r2, [r3, #8]
      break;
 800570e:	e04f      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005720:	f000 fc3e 	bl	8005fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005732:	609a      	str	r2, [r3, #8]
      break;
 8005734:	e03c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	461a      	mov	r2, r3
 8005744:	f000 fbb2 	bl	8005eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2150      	movs	r1, #80	; 0x50
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fc0b 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005754:	e02c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fbd1 	bl	8005f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2160      	movs	r1, #96	; 0x60
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fbfb 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005774:	e01c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fb92 	bl	8005eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2140      	movs	r1, #64	; 0x40
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fbeb 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 8005794:	e00c      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f000 fbe2 	bl	8005f6a <TIM_ITRx_SetConfig>
      break;
 80057a6:	e003      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      break;
 80057ac:	e000      	b.n	80057b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a40      	ldr	r2, [pc, #256]	; (80058e0 <TIM_Base_SetConfig+0x114>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ea:	d00f      	beq.n	800580c <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3d      	ldr	r2, [pc, #244]	; (80058e4 <TIM_Base_SetConfig+0x118>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3c      	ldr	r2, [pc, #240]	; (80058e8 <TIM_Base_SetConfig+0x11c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3b      	ldr	r2, [pc, #236]	; (80058ec <TIM_Base_SetConfig+0x120>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3a      	ldr	r2, [pc, #232]	; (80058f0 <TIM_Base_SetConfig+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d108      	bne.n	800581e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2f      	ldr	r2, [pc, #188]	; (80058e0 <TIM_Base_SetConfig+0x114>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d01b      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2c      	ldr	r2, [pc, #176]	; (80058e4 <TIM_Base_SetConfig+0x118>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d017      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2b      	ldr	r2, [pc, #172]	; (80058e8 <TIM_Base_SetConfig+0x11c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <TIM_Base_SetConfig+0x120>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00f      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <TIM_Base_SetConfig+0x124>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00b      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a28      	ldr	r2, [pc, #160]	; (80058f4 <TIM_Base_SetConfig+0x128>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <TIM_Base_SetConfig+0x12c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d003      	beq.n	8005866 <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a26      	ldr	r2, [pc, #152]	; (80058fc <TIM_Base_SetConfig+0x130>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d108      	bne.n	8005878 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <TIM_Base_SetConfig+0x114>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00f      	beq.n	80058c4 <TIM_Base_SetConfig+0xf8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <TIM_Base_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00b      	beq.n	80058c4 <TIM_Base_SetConfig+0xf8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <TIM_Base_SetConfig+0x128>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a10      	ldr	r2, [pc, #64]	; (80058f8 <TIM_Base_SetConfig+0x12c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0xf8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a0f      	ldr	r2, [pc, #60]	; (80058fc <TIM_Base_SetConfig+0x130>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d103      	bne.n	80058cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691a      	ldr	r2, [r3, #16]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	615a      	str	r2, [r3, #20]
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f023 0201 	bic.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a2c      	ldr	r2, [pc, #176]	; (8005a0c <TIM_OC1_SetConfig+0x10c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00f      	beq.n	8005980 <TIM_OC1_SetConfig+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a2b      	ldr	r2, [pc, #172]	; (8005a10 <TIM_OC1_SetConfig+0x110>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_OC1_SetConfig+0x80>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <TIM_OC1_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_OC1_SetConfig+0x80>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <TIM_OC1_SetConfig+0x118>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_OC1_SetConfig+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <TIM_OC1_SetConfig+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10c      	bne.n	800599a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0308 	bic.w	r3, r3, #8
 8005986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f023 0304 	bic.w	r3, r3, #4
 8005998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1b      	ldr	r2, [pc, #108]	; (8005a0c <TIM_OC1_SetConfig+0x10c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_OC1_SetConfig+0xc2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <TIM_OC1_SetConfig+0x110>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_OC1_SetConfig+0xc2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <TIM_OC1_SetConfig+0x114>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC1_SetConfig+0xc2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <TIM_OC1_SetConfig+0x118>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC1_SetConfig+0xc2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <TIM_OC1_SetConfig+0x11c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d111      	bne.n	80059e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	621a      	str	r2, [r3, #32]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f023 0210 	bic.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <TIM_OC2_SetConfig+0x100>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d003      	beq.n	8005a8c <TIM_OC2_SetConfig+0x6c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a27      	ldr	r2, [pc, #156]	; (8005b24 <TIM_OC2_SetConfig+0x104>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10d      	bne.n	8005aa8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <TIM_OC2_SetConfig+0x100>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xb0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <TIM_OC2_SetConfig+0x104>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xb0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <TIM_OC2_SetConfig+0x108>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xb0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <TIM_OC2_SetConfig+0x10c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <TIM_OC2_SetConfig+0x110>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d113      	bne.n	8005af8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <TIM_OC3_SetConfig+0xfc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC3_SetConfig+0x6a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a26      	ldr	r2, [pc, #152]	; (8005c34 <TIM_OC3_SetConfig+0x100>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10d      	bne.n	8005bba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <TIM_OC3_SetConfig+0xfc>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_OC3_SetConfig+0xae>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	; (8005c34 <TIM_OC3_SetConfig+0x100>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_OC3_SetConfig+0xae>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1a      	ldr	r2, [pc, #104]	; (8005c38 <TIM_OC3_SetConfig+0x104>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_OC3_SetConfig+0xae>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <TIM_OC3_SetConfig+0x108>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC3_SetConfig+0xae>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <TIM_OC3_SetConfig+0x10c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d113      	bne.n	8005c0a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	bf00      	nop
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40013400 	.word	0x40013400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	031b      	lsls	r3, r3, #12
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <TIM_OC4_SetConfig+0xc0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x84>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <TIM_OC4_SetConfig+0xc4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x84>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <TIM_OC4_SetConfig+0xc8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x84>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <TIM_OC4_SetConfig+0xcc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC4_SetConfig+0x84>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <TIM_OC4_SetConfig+0xd0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d109      	bne.n	8005cdc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40012c00 	.word	0x40012c00
 8005d08:	40013400 	.word	0x40013400
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800

08005d18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <TIM_OC5_SetConfig+0xb4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00f      	beq.n	8005d92 <TIM_OC5_SetConfig+0x7a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <TIM_OC5_SetConfig+0xb8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_OC5_SetConfig+0x7a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <TIM_OC5_SetConfig+0xbc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <TIM_OC5_SetConfig+0x7a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <TIM_OC5_SetConfig+0xc0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC5_SetConfig+0x7a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <TIM_OC5_SetConfig+0xc4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d109      	bne.n	8005da6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	051b      	lsls	r3, r3, #20
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <TIM_OC6_SetConfig+0xb8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00f      	beq.n	8005e5c <TIM_OC6_SetConfig+0x7c>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a17      	ldr	r2, [pc, #92]	; (8005e9c <TIM_OC6_SetConfig+0xbc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00b      	beq.n	8005e5c <TIM_OC6_SetConfig+0x7c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <TIM_OC6_SetConfig+0xc0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d007      	beq.n	8005e5c <TIM_OC6_SetConfig+0x7c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <TIM_OC6_SetConfig+0xc4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC6_SetConfig+0x7c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <TIM_OC6_SetConfig+0xc8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d109      	bne.n	8005e70 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40013400 	.word	0x40013400
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 030a 	bic.w	r3, r3, #10
 8005ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b087      	sub	sp, #28
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f023 0210 	bic.w	r2, r3, #16
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	031b      	lsls	r3, r3, #12
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f043 0307 	orr.w	r3, r3, #7
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	609a      	str	r2, [r3, #8]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	609a      	str	r2, [r3, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1a      	ldr	r2, [r3, #32]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	43db      	mvns	r3, r3
 8006002:	401a      	ands	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	fa01 f303 	lsl.w	r3, r1, r3
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e068      	b.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d004      	beq.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2d      	ldr	r2, [pc, #180]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d108      	bne.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800607e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01d      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b6:	d018      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10c      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40013400 	.word	0x40013400
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40014000 	.word	0x40014000

0800613c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e040      	b.n	80061d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fc f870 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	; 0x24
 8006168:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fe8a 	bl	8006e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fbcf 	bl	800692c <UART_SetConfig>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d101      	bne.n	8006198 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e01b      	b.n	80061d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ff09 	bl	8006fe0 <UART_CheckIdleState>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80061d8:	b480      	push	{r7}
 80061da:	b08b      	sub	sp, #44	; 0x2c
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	4613      	mov	r3, r2
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d147      	bne.n	800627e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Transmit_IT+0x22>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e040      	b.n	8006280 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2221      	movs	r2, #33	; 0x21
 8006226:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d107      	bne.n	8006242 <HAL_UART_Transmit_IT+0x6a>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_UART_Transmit_IT+0xb4>)
 800623e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006240:	e002      	b.n	8006248 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a12      	ldr	r2, [pc, #72]	; (8006290 <HAL_UART_Transmit_IT+0xb8>)
 8006246:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	613b      	str	r3, [r7, #16]
   return(result);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	69f9      	ldr	r1, [r7, #28]
 800626c:	6a3a      	ldr	r2, [r7, #32]
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	61bb      	str	r3, [r7, #24]
   return(result);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e6      	bne.n	8006248 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	372c      	adds	r7, #44	; 0x2c
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	08007539 	.word	0x08007539
 8006290:	08007481 	.word	0x08007481

08006294 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d137      	bne.n	800631c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_UART_Receive_IT+0x24>
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e030      	b.n	800631e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a18      	ldr	r2, [pc, #96]	; (8006328 <HAL_UART_Receive_IT+0x94>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01f      	beq.n	800630c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	613b      	str	r3, [r7, #16]
   return(result);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	61bb      	str	r3, [r7, #24]
   return(result);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	461a      	mov	r2, r3
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 ff74 	bl	8007200 <UART_Start_Receive_IT>
 8006318:	4603      	mov	r3, r0
 800631a:	e000      	b.n	800631e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40008000 	.word	0x40008000

0800632c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b0ba      	sub	sp, #232	; 0xe8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006356:	f640 030f 	movw	r3, #2063	; 0x80f
 800635a:	4013      	ands	r3, r2
 800635c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d115      	bne.n	8006394 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00f      	beq.n	8006394 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 82ae 	beq.w	80068e6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	4798      	blx	r3
      }
      return;
 8006392:	e2a8      	b.n	80068e6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 8117 	beq.w	80065cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80063ae:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <HAL_UART_IRQHandler+0x298>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 810a 	beq.w	80065cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d011      	beq.n	80063e8 <HAL_UART_IRQHandler+0xbc>
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2201      	movs	r2, #1
 80063d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_UART_IRQHandler+0xec>
 80063f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2202      	movs	r2, #2
 8006406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640e:	f043 0204 	orr.w	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d011      	beq.n	8006448 <HAL_UART_IRQHandler+0x11c>
 8006424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2204      	movs	r2, #4
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	f043 0202 	orr.w	r2, r3, #2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006464:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00b      	beq.n	8006484 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2208      	movs	r2, #8
 8006472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647a:	f043 0208 	orr.w	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <HAL_UART_IRQHandler+0x18a>
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00c      	beq.n	80064b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8214 	beq.w	80068ea <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006506:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650a:	2b00      	cmp	r3, #0
 800650c:	d04f      	beq.n	80065ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 ff3c 	bl	800738c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d141      	bne.n	80065a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800653c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800654e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800655a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d9      	bne.n	8006522 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006572:	2b00      	cmp	r3, #0
 8006574:	d013      	beq.n	800659e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657a:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <HAL_UART_IRQHandler+0x29c>)
 800657c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	4618      	mov	r0, r3
 8006584:	f7fc f96d 	bl	8002862 <HAL_DMA_Abort_IT>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d017      	beq.n	80065be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e00f      	b.n	80065be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9ae 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	e00b      	b.n	80065be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9aa 	bl	8006900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e007      	b.n	80065be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f9a6 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80065bc:	e195      	b.n	80068ea <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	bf00      	nop
    return;
 80065c0:	e193      	b.n	80068ea <HAL_UART_IRQHandler+0x5be>
 80065c2:	bf00      	nop
 80065c4:	04000120 	.word	0x04000120
 80065c8:	08007455 	.word	0x08007455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	f040 814e 	bne.w	8006872 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8147 	beq.w	8006872 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 8140 	beq.w	8006872 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	f040 80b8 	bne.w	800677a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006616:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8167 	beq.w	80068ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800662a:	429a      	cmp	r2, r3
 800662c:	f080 815f 	bcs.w	80068ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 8086 	bne.w	8006758 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800667a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800668e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1da      	bne.n	800664c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3308      	adds	r3, #8
 800669c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3308      	adds	r3, #8
 80066b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e1      	bne.n	8006696 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	f023 0310 	bic.w	r3, r3, #16
 800672c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800673a:	65bb      	str	r3, [r7, #88]	; 0x58
 800673c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e4      	bne.n	8006718 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	4618      	mov	r0, r3
 8006754:	f7fc f847 	bl	80027e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800676a:	b29b      	uxth	r3, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f8ce 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006778:	e0b9      	b.n	80068ee <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006786:	b29b      	uxth	r3, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80ab 	beq.w	80068f2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800679c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80a6 	beq.w	80068f2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067c8:	647b      	str	r3, [r7, #68]	; 0x44
 80067ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e4      	bne.n	80067a6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3308      	adds	r3, #8
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	e853 3f00 	ldrex	r3, [r3]
 80067ea:	623b      	str	r3, [r7, #32]
   return(result);
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006800:	633a      	str	r2, [r7, #48]	; 0x30
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e3      	bne.n	80067dc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	60fb      	str	r3, [r7, #12]
   return(result);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0310 	bic.w	r3, r3, #16
 800683c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	617b      	str	r3, [r7, #20]
   return(result);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e4      	bne.n	8006828 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f852 	bl	8006914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006870:	e03f      	b.n	80068f2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <HAL_UART_IRQHandler+0x570>
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 f895 	bl	80079c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800689a:	e02d      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800689c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01c      	beq.n	80068f6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
    }
    return;
 80068c4:	e017      	b.n	80068f6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00c      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fe8a 	bl	80075f8 <UART_EndTransmit_IT>
    return;
 80068e4:	e008      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068e6:	bf00      	nop
 80068e8:	e006      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80068ea:	bf00      	nop
 80068ec:	e004      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80068f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80068f8:	37e8      	adds	r7, #232	; 0xe8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop

08006900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006930:	b08a      	sub	sp, #40	; 0x28
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	4313      	orrs	r3, r2
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4ba4      	ldr	r3, [pc, #656]	; (8006bec <UART_SetConfig+0x2c0>)
 800695c:	4013      	ands	r3, r2
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006964:	430b      	orrs	r3, r1
 8006966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a99      	ldr	r2, [pc, #612]	; (8006bf0 <UART_SetConfig+0x2c4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006994:	4313      	orrs	r3, r2
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a8:	430a      	orrs	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a90      	ldr	r2, [pc, #576]	; (8006bf4 <UART_SetConfig+0x2c8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d126      	bne.n	8006a04 <UART_SetConfig+0xd8>
 80069b6:	4b90      	ldr	r3, [pc, #576]	; (8006bf8 <UART_SetConfig+0x2cc>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d81b      	bhi.n	80069fc <UART_SetConfig+0xd0>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0xa0>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069f5 	.word	0x080069f5
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e116      	b.n	8006c12 <UART_SetConfig+0x2e6>
 80069e4:	2302      	movs	r3, #2
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e112      	b.n	8006c12 <UART_SetConfig+0x2e6>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e10e      	b.n	8006c12 <UART_SetConfig+0x2e6>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e10a      	b.n	8006c12 <UART_SetConfig+0x2e6>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a02:	e106      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7c      	ldr	r2, [pc, #496]	; (8006bfc <UART_SetConfig+0x2d0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d138      	bne.n	8006a80 <UART_SetConfig+0x154>
 8006a0e:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	d82d      	bhi.n	8006a78 <UART_SetConfig+0x14c>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <UART_SetConfig+0xf8>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a79 	.word	0x08006a79
 8006a30:	08006a79 	.word	0x08006a79
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
 8006a40:	08006a79 	.word	0x08006a79
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5e:	e0d8      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a60:	2302      	movs	r3, #2
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e0d4      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a68:	2304      	movs	r3, #4
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e0d0      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a70:	2308      	movs	r3, #8
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e0cc      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e0c8      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5e      	ldr	r2, [pc, #376]	; (8006c00 <UART_SetConfig+0x2d4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d125      	bne.n	8006ad6 <UART_SetConfig+0x1aa>
 8006a8a:	4b5b      	ldr	r3, [pc, #364]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d016      	beq.n	8006ac6 <UART_SetConfig+0x19a>
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d818      	bhi.n	8006ace <UART_SetConfig+0x1a2>
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d00a      	beq.n	8006ab6 <UART_SetConfig+0x18a>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d814      	bhi.n	8006ace <UART_SetConfig+0x1a2>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <UART_SetConfig+0x182>
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d008      	beq.n	8006abe <UART_SetConfig+0x192>
 8006aac:	e00f      	b.n	8006ace <UART_SetConfig+0x1a2>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab4:	e0ad      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abc:	e0a9      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac4:	e0a5      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006acc:	e0a1      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad4:	e09d      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4a      	ldr	r2, [pc, #296]	; (8006c04 <UART_SetConfig+0x2d8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d125      	bne.n	8006b2c <UART_SetConfig+0x200>
 8006ae0:	4b45      	ldr	r3, [pc, #276]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aea:	2bc0      	cmp	r3, #192	; 0xc0
 8006aec:	d016      	beq.n	8006b1c <UART_SetConfig+0x1f0>
 8006aee:	2bc0      	cmp	r3, #192	; 0xc0
 8006af0:	d818      	bhi.n	8006b24 <UART_SetConfig+0x1f8>
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d00a      	beq.n	8006b0c <UART_SetConfig+0x1e0>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d814      	bhi.n	8006b24 <UART_SetConfig+0x1f8>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <UART_SetConfig+0x1d8>
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d008      	beq.n	8006b14 <UART_SetConfig+0x1e8>
 8006b02:	e00f      	b.n	8006b24 <UART_SetConfig+0x1f8>
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e082      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e07e      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e07a      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e076      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e072      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <UART_SetConfig+0x2dc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d12a      	bne.n	8006b8c <UART_SetConfig+0x260>
 8006b36:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b44:	d01a      	beq.n	8006b7c <UART_SetConfig+0x250>
 8006b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4a:	d81b      	bhi.n	8006b84 <UART_SetConfig+0x258>
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b50:	d00c      	beq.n	8006b6c <UART_SetConfig+0x240>
 8006b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b56:	d815      	bhi.n	8006b84 <UART_SetConfig+0x258>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <UART_SetConfig+0x238>
 8006b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b60:	d008      	beq.n	8006b74 <UART_SetConfig+0x248>
 8006b62:	e00f      	b.n	8006b84 <UART_SetConfig+0x258>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e052      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e04e      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e04a      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e046      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e042      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <UART_SetConfig+0x2c4>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d13a      	bne.n	8006c0c <UART_SetConfig+0x2e0>
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <UART_SetConfig+0x2cc>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba4:	d01a      	beq.n	8006bdc <UART_SetConfig+0x2b0>
 8006ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006baa:	d81b      	bhi.n	8006be4 <UART_SetConfig+0x2b8>
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb0:	d00c      	beq.n	8006bcc <UART_SetConfig+0x2a0>
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb6:	d815      	bhi.n	8006be4 <UART_SetConfig+0x2b8>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <UART_SetConfig+0x298>
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x2a8>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x2b8>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e022      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e01e      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e01a      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e016      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x2e6>
 8006bec:	efff69f3 	.word	0xefff69f3
 8006bf0:	40008000 	.word	0x40008000
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40004400 	.word	0x40004400
 8006c00:	40004800 	.word	0x40004800
 8006c04:	40004c00 	.word	0x40004c00
 8006c08:	40005000 	.word	0x40005000
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a9f      	ldr	r2, [pc, #636]	; (8006e94 <UART_SetConfig+0x568>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d17a      	bne.n	8006d12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d824      	bhi.n	8006c6e <UART_SetConfig+0x342>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x300>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c6f 	.word	0x08006c6f
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006c5f 	.word	0x08006c5f
 8006c40:	08006c6f 	.word	0x08006c6f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c6f 	.word	0x08006c6f
 8006c4c:	08006c67 	.word	0x08006c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd fa7e 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8006c54:	61f8      	str	r0, [r7, #28]
        break;
 8006c56:	e010      	b.n	8006c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b8f      	ldr	r3, [pc, #572]	; (8006e98 <UART_SetConfig+0x56c>)
 8006c5a:	61fb      	str	r3, [r7, #28]
        break;
 8006c5c:	e00d      	b.n	8006c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fd f9df 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8006c62:	61f8      	str	r0, [r7, #28]
        break;
 8006c64:	e009      	b.n	8006c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	61fb      	str	r3, [r7, #28]
        break;
 8006c6c:	e005      	b.n	8006c7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80fb 	beq.w	8006e78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d305      	bcc.n	8006c9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d903      	bls.n	8006ca6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca4:	e0e8      	b.n	8006e78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	461c      	mov	r4, r3
 8006cac:	4615      	mov	r5, r2
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	022b      	lsls	r3, r5, #8
 8006cb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cbc:	0222      	lsls	r2, r4, #8
 8006cbe:	68f9      	ldr	r1, [r7, #12]
 8006cc0:	6849      	ldr	r1, [r1, #4]
 8006cc2:	0849      	lsrs	r1, r1, #1
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	4688      	mov	r8, r1
 8006cc8:	4681      	mov	r9, r0
 8006cca:	eb12 0a08 	adds.w	sl, r2, r8
 8006cce:	eb43 0b09 	adc.w	fp, r3, r9
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	f7f9 fadc 	bl	80002a0 <__aeabi_uldivmod>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4613      	mov	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf6:	d308      	bcc.n	8006d0a <UART_SetConfig+0x3de>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cfe:	d204      	bcs.n	8006d0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	e0b6      	b.n	8006e78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d10:	e0b2      	b.n	8006e78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1a:	d15e      	bne.n	8006dda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d828      	bhi.n	8006d76 <UART_SetConfig+0x44a>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <UART_SetConfig+0x400>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d59 	.word	0x08006d59
 8006d34:	08006d61 	.word	0x08006d61
 8006d38:	08006d77 	.word	0x08006d77
 8006d3c:	08006d67 	.word	0x08006d67
 8006d40:	08006d77 	.word	0x08006d77
 8006d44:	08006d77 	.word	0x08006d77
 8006d48:	08006d77 	.word	0x08006d77
 8006d4c:	08006d6f 	.word	0x08006d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d50:	f7fd f9fe 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8006d54:	61f8      	str	r0, [r7, #28]
        break;
 8006d56:	e014      	b.n	8006d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d58:	f7fd fa10 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8006d5c:	61f8      	str	r0, [r7, #28]
        break;
 8006d5e:	e010      	b.n	8006d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d60:	4b4d      	ldr	r3, [pc, #308]	; (8006e98 <UART_SetConfig+0x56c>)
 8006d62:	61fb      	str	r3, [r7, #28]
        break;
 8006d64:	e00d      	b.n	8006d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d66:	f7fd f95b 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8006d6a:	61f8      	str	r0, [r7, #28]
        break;
 8006d6c:	e009      	b.n	8006d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d72:	61fb      	str	r3, [r7, #28]
        break;
 8006d74:	e005      	b.n	8006d82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d077      	beq.n	8006e78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	005a      	lsls	r2, r3, #1
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	085b      	lsrs	r3, r3, #1
 8006d92:	441a      	add	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b0f      	cmp	r3, #15
 8006da2:	d916      	bls.n	8006dd2 <UART_SetConfig+0x4a6>
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006daa:	d212      	bcs.n	8006dd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f023 030f 	bic.w	r3, r3, #15
 8006db4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	8afb      	ldrh	r3, [r7, #22]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	8afa      	ldrh	r2, [r7, #22]
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	e052      	b.n	8006e78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dd8:	e04e      	b.n	8006e78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d827      	bhi.n	8006e32 <UART_SetConfig+0x506>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x4bc>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fd f9a0 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8006e10:	61f8      	str	r0, [r7, #28]
        break;
 8006e12:	e014      	b.n	8006e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fd f9b2 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8006e18:	61f8      	str	r0, [r7, #28]
        break;
 8006e1a:	e010      	b.n	8006e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <UART_SetConfig+0x56c>)
 8006e1e:	61fb      	str	r3, [r7, #28]
        break;
 8006e20:	e00d      	b.n	8006e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fd f8fd 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8006e26:	61f8      	str	r0, [r7, #28]
        break;
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	61fb      	str	r3, [r7, #28]
        break;
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d019      	beq.n	8006e78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	085a      	lsrs	r2, r3, #1
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d909      	bls.n	8006e72 <UART_SetConfig+0x546>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d205      	bcs.n	8006e72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60da      	str	r2, [r3, #12]
 8006e70:	e002      	b.n	8006e78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	40008000 	.word	0x40008000
 8006e98:	00f42400 	.word	0x00f42400

08006e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	d10a      	bne.n	8006fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b098      	sub	sp, #96	; 0x60
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff0:	f7fb fab8 	bl	8002564 <HAL_GetTick>
 8006ff4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b08      	cmp	r3, #8
 8007002:	d12e      	bne.n	8007062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700c:	2200      	movs	r2, #0
 800700e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f88c 	bl	8007130 <UART_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d021      	beq.n	8007062 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007032:	653b      	str	r3, [r7, #80]	; 0x50
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703c:	647b      	str	r3, [r7, #68]	; 0x44
 800703e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800704a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e062      	b.n	8007128 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b04      	cmp	r3, #4
 800706e:	d149      	bne.n	8007104 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007078:	2200      	movs	r2, #0
 800707a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f856 	bl	8007130 <UART_WaitOnFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d03c      	beq.n	8007104 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	623b      	str	r3, [r7, #32]
   return(result);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800709e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a8:	633b      	str	r3, [r7, #48]	; 0x30
 80070aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e6      	bne.n	800708a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3308      	adds	r3, #8
 80070c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	e853 3f00 	ldrex	r3, [r3]
 80070ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070dc:	61fa      	str	r2, [r7, #28]
 80070de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e5      	bne.n	80070bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e011      	b.n	8007128 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3758      	adds	r7, #88	; 0x58
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	4613      	mov	r3, r2
 800713e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007140:	e049      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d045      	beq.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714a:	f7fb fa0b 	bl	8002564 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <UART_WaitOnFlagUntilTimeout+0x30>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e048      	b.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d031      	beq.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b08      	cmp	r3, #8
 800717e:	d110      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2208      	movs	r2, #8
 8007186:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f8ff 	bl	800738c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2208      	movs	r2, #8
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e029      	b.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b0:	d111      	bne.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f8e5 	bl	800738c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e00f      	b.n	80071f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4013      	ands	r3, r2
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	bf0c      	ite	eq
 80071e6:	2301      	moveq	r3, #1
 80071e8:	2300      	movne	r3, #0
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d0a6      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007200:	b480      	push	{r7}
 8007202:	b097      	sub	sp, #92	; 0x5c
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	4613      	mov	r3, r2
 800720c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	d10e      	bne.n	8007252 <UART_Start_Receive_IT+0x52>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d105      	bne.n	8007248 <UART_Start_Receive_IT+0x48>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007242:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007246:	e02d      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	22ff      	movs	r2, #255	; 0xff
 800724c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007250:	e028      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10d      	bne.n	8007276 <UART_Start_Receive_IT+0x76>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <UART_Start_Receive_IT+0x6c>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800726a:	e01b      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	227f      	movs	r2, #127	; 0x7f
 8007270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007274:	e016      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800727e:	d10d      	bne.n	800729c <UART_Start_Receive_IT+0x9c>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <UART_Start_Receive_IT+0x92>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	227f      	movs	r2, #127	; 0x7f
 800728c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007290:	e008      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	223f      	movs	r2, #63	; 0x3f
 8007296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800729a:	e003      	b.n	80072a4 <UART_Start_Receive_IT+0xa4>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2222      	movs	r2, #34	; 0x22
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	657b      	str	r3, [r7, #84]	; 0x54
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80072d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e5      	bne.n	80072b4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f0:	d107      	bne.n	8007302 <UART_Start_Receive_IT+0x102>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <UART_Start_Receive_IT+0x184>)
 80072fe:	669a      	str	r2, [r3, #104]	; 0x68
 8007300:	e002      	b.n	8007308 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <UART_Start_Receive_IT+0x188>)
 8007306:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d019      	beq.n	8007344 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
 8007330:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_Start_Receive_IT+0x110>
 8007342:	e018      	b.n	8007376 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	613b      	str	r3, [r7, #16]
   return(result);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f043 0320 	orr.w	r3, r3, #32
 8007358:	653b      	str	r3, [r7, #80]	; 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007362:	623b      	str	r3, [r7, #32]
 8007364:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	69f9      	ldr	r1, [r7, #28]
 8007368:	6a3a      	ldr	r2, [r7, #32]
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e6      	bne.n	8007344 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	375c      	adds	r7, #92	; 0x5c
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	08007809 	.word	0x08007809
 8007388:	0800764d 	.word	0x0800764d

0800738c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b095      	sub	sp, #84	; 0x54
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073b2:	643b      	str	r3, [r7, #64]	; 0x40
 80073b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d118      	bne.n	8007434 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f023 0310 	bic.w	r3, r3, #16
 8007416:	647b      	str	r3, [r7, #68]	; 0x44
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6979      	ldr	r1, [r7, #20]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	613b      	str	r3, [r7, #16]
   return(result);
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007448:	bf00      	nop
 800744a:	3754      	adds	r7, #84	; 0x54
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7ff fa44 	bl	8006900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007478:	bf00      	nop
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b08f      	sub	sp, #60	; 0x3c
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748c:	2b21      	cmp	r3, #33	; 0x21
 800748e:	d14d      	bne.n	800752c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d132      	bne.n	8007502 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e6      	bne.n	800749c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	60bb      	str	r3, [r7, #8]
   return(result);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6979      	ldr	r1, [r7, #20]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	613b      	str	r3, [r7, #16]
   return(result);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e6      	bne.n	80074ce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007500:	e014      	b.n	800752c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007506:	781a      	ldrb	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	b292      	uxth	r2, r2
 800750e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800752c:	bf00      	nop
 800752e:	373c      	adds	r7, #60	; 0x3c
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b091      	sub	sp, #68	; 0x44
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007544:	2b21      	cmp	r3, #33	; 0x21
 8007546:	d151      	bne.n	80075ec <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d132      	bne.n	80075ba <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	623b      	str	r3, [r7, #32]
   return(result);
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007568:	63bb      	str	r3, [r7, #56]	; 0x38
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	633b      	str	r3, [r7, #48]	; 0x30
 8007574:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e6      	bne.n	8007554 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	60fb      	str	r3, [r7, #12]
   return(result);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	69b9      	ldr	r1, [r7, #24]
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	617b      	str	r3, [r7, #20]
   return(result);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e6      	bne.n	8007586 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80075b8:	e018      	b.n	80075ec <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075cc:	b292      	uxth	r2, r2
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80075ec:	bf00      	nop
 80075ee:	3744      	adds	r7, #68	; 0x44
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	60bb      	str	r3, [r7, #8]
   return(result);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	613b      	str	r3, [r7, #16]
   return(result);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e6      	bne.n	8007600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7f9 ffbc 	bl	80015bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007644:	bf00      	nop
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b09c      	sub	sp, #112	; 0x70
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800765a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007664:	2b22      	cmp	r3, #34	; 0x22
 8007666:	f040 80be 	bne.w	80077e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007670:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007678:	b2d9      	uxtb	r1, r3
 800767a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800767e:	b2da      	uxtb	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	400a      	ands	r2, r1
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 80a3 	bne.w	80077fa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80076d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e6      	bne.n	80076b4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	667b      	str	r3, [r7, #100]	; 0x64
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007706:	647a      	str	r2, [r7, #68]	; 0x44
 8007708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800770c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a34      	ldr	r2, [pc, #208]	; (8007804 <UART_RxISR_8BIT+0x1b8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01f      	beq.n	8007778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	623b      	str	r3, [r7, #32]
   return(result);
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800775a:	663b      	str	r3, [r7, #96]	; 0x60
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007764:	633b      	str	r3, [r7, #48]	; 0x30
 8007766:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800776a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777c:	2b01      	cmp	r3, #1
 800777e:	d12e      	bne.n	80077de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	60fb      	str	r3, [r7, #12]
   return(result);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0310 	bic.w	r3, r3, #16
 800779a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	69b9      	ldr	r1, [r7, #24]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e6      	bne.n	8007786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d103      	bne.n	80077ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2210      	movs	r2, #16
 80077cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff f89c 	bl	8006914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077dc:	e00d      	b.n	80077fa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7f9 fdd4 	bl	800138c <HAL_UART_RxCpltCallback>
}
 80077e4:	e009      	b.n	80077fa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	8b1b      	ldrh	r3, [r3, #24]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0208 	orr.w	r2, r2, #8
 80077f6:	b292      	uxth	r2, r2
 80077f8:	831a      	strh	r2, [r3, #24]
}
 80077fa:	bf00      	nop
 80077fc:	3770      	adds	r7, #112	; 0x70
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40008000 	.word	0x40008000

08007808 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b09c      	sub	sp, #112	; 0x70
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007816:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007820:	2b22      	cmp	r3, #34	; 0x22
 8007822:	f040 80be 	bne.w	80079a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800782c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007834:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007836:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800783a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800783e:	4013      	ands	r3, r2
 8007840:	b29a      	uxth	r2, r3
 8007842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007844:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	1c9a      	adds	r2, r3, #2
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007856:	b29b      	uxth	r3, r3
 8007858:	3b01      	subs	r3, #1
 800785a:	b29a      	uxth	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 80a3 	bne.w	80079b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007878:	e853 3f00 	ldrex	r3, [r3]
 800787c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800787e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007884:	667b      	str	r3, [r7, #100]	; 0x64
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788e:	657b      	str	r3, [r7, #84]	; 0x54
 8007890:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800789c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1e6      	bne.n	8007870 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	663b      	str	r3, [r7, #96]	; 0x60
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078c2:	643a      	str	r2, [r7, #64]	; 0x40
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e5      	bne.n	80078a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a34      	ldr	r2, [pc, #208]	; (80079c0 <UART_RxISR_16BIT+0x1b8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d01f      	beq.n	8007934 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d018      	beq.n	8007934 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007922:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e6      	bne.n	8007902 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007938:	2b01      	cmp	r3, #1
 800793a:	d12e      	bne.n	800799a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	65bb      	str	r3, [r7, #88]	; 0x58
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007960:	61bb      	str	r3, [r7, #24]
 8007962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	613b      	str	r3, [r7, #16]
   return(result);
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e6      	bne.n	8007942 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d103      	bne.n	800798a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2210      	movs	r2, #16
 8007988:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fe ffbe 	bl	8006914 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007998:	e00d      	b.n	80079b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7f9 fcf6 	bl	800138c <HAL_UART_RxCpltCallback>
}
 80079a0:	e009      	b.n	80079b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	8b1b      	ldrh	r3, [r3, #24]
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0208 	orr.w	r2, r2, #8
 80079b2:	b292      	uxth	r2, r2
 80079b4:	831a      	strh	r2, [r3, #24]
}
 80079b6:	bf00      	nop
 80079b8:	3770      	adds	r7, #112	; 0x70
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40008000 	.word	0x40008000

080079c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <siprintf>:
 80079d8:	b40e      	push	{r1, r2, r3}
 80079da:	b500      	push	{lr}
 80079dc:	b09c      	sub	sp, #112	; 0x70
 80079de:	ab1d      	add	r3, sp, #116	; 0x74
 80079e0:	9002      	str	r0, [sp, #8]
 80079e2:	9006      	str	r0, [sp, #24]
 80079e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079e8:	4809      	ldr	r0, [pc, #36]	; (8007a10 <siprintf+0x38>)
 80079ea:	9107      	str	r1, [sp, #28]
 80079ec:	9104      	str	r1, [sp, #16]
 80079ee:	4909      	ldr	r1, [pc, #36]	; (8007a14 <siprintf+0x3c>)
 80079f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f4:	9105      	str	r1, [sp, #20]
 80079f6:	6800      	ldr	r0, [r0, #0]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	a902      	add	r1, sp, #8
 80079fc:	f000 f9c0 	bl	8007d80 <_svfiprintf_r>
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	b01c      	add	sp, #112	; 0x70
 8007a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	4770      	bx	lr
 8007a10:	200000c0 	.word	0x200000c0
 8007a14:	ffff0208 	.word	0xffff0208

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <strncmp>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	b16a      	cbz	r2, 8007a48 <strncmp+0x20>
 8007a2c:	3901      	subs	r1, #1
 8007a2e:	1884      	adds	r4, r0, r2
 8007a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d103      	bne.n	8007a44 <strncmp+0x1c>
 8007a3c:	42a0      	cmp	r0, r4
 8007a3e:	d001      	beq.n	8007a44 <strncmp+0x1c>
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	d1f5      	bne.n	8007a30 <strncmp+0x8>
 8007a44:	1ad0      	subs	r0, r2, r3
 8007a46:	bd10      	pop	{r4, pc}
 8007a48:	4610      	mov	r0, r2
 8007a4a:	e7fc      	b.n	8007a46 <strncmp+0x1e>

08007a4c <strncpy>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	3901      	subs	r1, #1
 8007a50:	4603      	mov	r3, r0
 8007a52:	b132      	cbz	r2, 8007a62 <strncpy+0x16>
 8007a54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a58:	f803 4b01 	strb.w	r4, [r3], #1
 8007a5c:	3a01      	subs	r2, #1
 8007a5e:	2c00      	cmp	r4, #0
 8007a60:	d1f7      	bne.n	8007a52 <strncpy+0x6>
 8007a62:	441a      	add	r2, r3
 8007a64:	2100      	movs	r1, #0
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d100      	bne.n	8007a6c <strncpy+0x20>
 8007a6a:	bd10      	pop	{r4, pc}
 8007a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a70:	e7f9      	b.n	8007a66 <strncpy+0x1a>
	...

08007a74 <__errno>:
 8007a74:	4b01      	ldr	r3, [pc, #4]	; (8007a7c <__errno+0x8>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200000c0 	.word	0x200000c0

08007a80 <__libc_init_array>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	4d0d      	ldr	r5, [pc, #52]	; (8007ab8 <__libc_init_array+0x38>)
 8007a84:	4c0d      	ldr	r4, [pc, #52]	; (8007abc <__libc_init_array+0x3c>)
 8007a86:	1b64      	subs	r4, r4, r5
 8007a88:	10a4      	asrs	r4, r4, #2
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	d109      	bne.n	8007aa4 <__libc_init_array+0x24>
 8007a90:	4d0b      	ldr	r5, [pc, #44]	; (8007ac0 <__libc_init_array+0x40>)
 8007a92:	4c0c      	ldr	r4, [pc, #48]	; (8007ac4 <__libc_init_array+0x44>)
 8007a94:	f000 fc72 	bl	800837c <_init>
 8007a98:	1b64      	subs	r4, r4, r5
 8007a9a:	10a4      	asrs	r4, r4, #2
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	d105      	bne.n	8007aae <__libc_init_array+0x2e>
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa8:	4798      	blx	r3
 8007aaa:	3601      	adds	r6, #1
 8007aac:	e7ee      	b.n	8007a8c <__libc_init_array+0xc>
 8007aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab2:	4798      	blx	r3
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	e7f2      	b.n	8007a9e <__libc_init_array+0x1e>
 8007ab8:	08008540 	.word	0x08008540
 8007abc:	08008540 	.word	0x08008540
 8007ac0:	08008540 	.word	0x08008540
 8007ac4:	08008544 	.word	0x08008544

08007ac8 <__retarget_lock_acquire_recursive>:
 8007ac8:	4770      	bx	lr

08007aca <__retarget_lock_release_recursive>:
 8007aca:	4770      	bx	lr

08007acc <strcpy>:
 8007acc:	4603      	mov	r3, r0
 8007ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ad2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	d1f9      	bne.n	8007ace <strcpy+0x2>
 8007ada:	4770      	bx	lr

08007adc <_free_r>:
 8007adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d044      	beq.n	8007b6c <_free_r+0x90>
 8007ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae6:	9001      	str	r0, [sp, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f1a1 0404 	sub.w	r4, r1, #4
 8007aee:	bfb8      	it	lt
 8007af0:	18e4      	addlt	r4, r4, r3
 8007af2:	f000 f8df 	bl	8007cb4 <__malloc_lock>
 8007af6:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <_free_r+0x94>)
 8007af8:	9801      	ldr	r0, [sp, #4]
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	b933      	cbnz	r3, 8007b0c <_free_r+0x30>
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6014      	str	r4, [r2, #0]
 8007b02:	b003      	add	sp, #12
 8007b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b08:	f000 b8da 	b.w	8007cc0 <__malloc_unlock>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d908      	bls.n	8007b22 <_free_r+0x46>
 8007b10:	6825      	ldr	r5, [r4, #0]
 8007b12:	1961      	adds	r1, r4, r5
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1949      	addeq	r1, r1, r5
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	e7ed      	b.n	8007afe <_free_r+0x22>
 8007b22:	461a      	mov	r2, r3
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <_free_r+0x50>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d9fa      	bls.n	8007b22 <_free_r+0x46>
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	1855      	adds	r5, r2, r1
 8007b30:	42a5      	cmp	r5, r4
 8007b32:	d10b      	bne.n	8007b4c <_free_r+0x70>
 8007b34:	6824      	ldr	r4, [r4, #0]
 8007b36:	4421      	add	r1, r4
 8007b38:	1854      	adds	r4, r2, r1
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	d1e0      	bne.n	8007b02 <_free_r+0x26>
 8007b40:	681c      	ldr	r4, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	6053      	str	r3, [r2, #4]
 8007b46:	440c      	add	r4, r1
 8007b48:	6014      	str	r4, [r2, #0]
 8007b4a:	e7da      	b.n	8007b02 <_free_r+0x26>
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x78>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	e7d6      	b.n	8007b02 <_free_r+0x26>
 8007b54:	6825      	ldr	r5, [r4, #0]
 8007b56:	1961      	adds	r1, r4, r5
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf04      	itt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	bf04      	itt	eq
 8007b64:	1949      	addeq	r1, r1, r5
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	6054      	str	r4, [r2, #4]
 8007b6a:	e7ca      	b.n	8007b02 <_free_r+0x26>
 8007b6c:	b003      	add	sp, #12
 8007b6e:	bd30      	pop	{r4, r5, pc}
 8007b70:	20000700 	.word	0x20000700

08007b74 <sbrk_aligned>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	4e0e      	ldr	r6, [pc, #56]	; (8007bb0 <sbrk_aligned+0x3c>)
 8007b78:	460c      	mov	r4, r1
 8007b7a:	6831      	ldr	r1, [r6, #0]
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	b911      	cbnz	r1, 8007b86 <sbrk_aligned+0x12>
 8007b80:	f000 fba6 	bl	80082d0 <_sbrk_r>
 8007b84:	6030      	str	r0, [r6, #0]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fba1 	bl	80082d0 <_sbrk_r>
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	d00a      	beq.n	8007ba8 <sbrk_aligned+0x34>
 8007b92:	1cc4      	adds	r4, r0, #3
 8007b94:	f024 0403 	bic.w	r4, r4, #3
 8007b98:	42a0      	cmp	r0, r4
 8007b9a:	d007      	beq.n	8007bac <sbrk_aligned+0x38>
 8007b9c:	1a21      	subs	r1, r4, r0
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f000 fb96 	bl	80082d0 <_sbrk_r>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d101      	bne.n	8007bac <sbrk_aligned+0x38>
 8007ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bac:	4620      	mov	r0, r4
 8007bae:	bd70      	pop	{r4, r5, r6, pc}
 8007bb0:	20000704 	.word	0x20000704

08007bb4 <_malloc_r>:
 8007bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb8:	1ccd      	adds	r5, r1, #3
 8007bba:	f025 0503 	bic.w	r5, r5, #3
 8007bbe:	3508      	adds	r5, #8
 8007bc0:	2d0c      	cmp	r5, #12
 8007bc2:	bf38      	it	cc
 8007bc4:	250c      	movcc	r5, #12
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	db01      	blt.n	8007bd0 <_malloc_r+0x1c>
 8007bcc:	42a9      	cmp	r1, r5
 8007bce:	d905      	bls.n	8007bdc <_malloc_r+0x28>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cb0 <_malloc_r+0xfc>
 8007be0:	f000 f868 	bl	8007cb4 <__malloc_lock>
 8007be4:	f8d8 3000 	ldr.w	r3, [r8]
 8007be8:	461c      	mov	r4, r3
 8007bea:	bb5c      	cbnz	r4, 8007c44 <_malloc_r+0x90>
 8007bec:	4629      	mov	r1, r5
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f7ff ffc0 	bl	8007b74 <sbrk_aligned>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	d155      	bne.n	8007ca6 <_malloc_r+0xf2>
 8007bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8007bfe:	4626      	mov	r6, r4
 8007c00:	2e00      	cmp	r6, #0
 8007c02:	d145      	bne.n	8007c90 <_malloc_r+0xdc>
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	d048      	beq.n	8007c9a <_malloc_r+0xe6>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	eb04 0903 	add.w	r9, r4, r3
 8007c12:	f000 fb5d 	bl	80082d0 <_sbrk_r>
 8007c16:	4581      	cmp	r9, r0
 8007c18:	d13f      	bne.n	8007c9a <_malloc_r+0xe6>
 8007c1a:	6821      	ldr	r1, [r4, #0]
 8007c1c:	1a6d      	subs	r5, r5, r1
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff ffa7 	bl	8007b74 <sbrk_aligned>
 8007c26:	3001      	adds	r0, #1
 8007c28:	d037      	beq.n	8007c9a <_malloc_r+0xe6>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	442b      	add	r3, r5
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	f8d8 3000 	ldr.w	r3, [r8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d038      	beq.n	8007caa <_malloc_r+0xf6>
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	42a2      	cmp	r2, r4
 8007c3c:	d12b      	bne.n	8007c96 <_malloc_r+0xe2>
 8007c3e:	2200      	movs	r2, #0
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e00f      	b.n	8007c64 <_malloc_r+0xb0>
 8007c44:	6822      	ldr	r2, [r4, #0]
 8007c46:	1b52      	subs	r2, r2, r5
 8007c48:	d41f      	bmi.n	8007c8a <_malloc_r+0xd6>
 8007c4a:	2a0b      	cmp	r2, #11
 8007c4c:	d917      	bls.n	8007c7e <_malloc_r+0xca>
 8007c4e:	1961      	adds	r1, r4, r5
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	6025      	str	r5, [r4, #0]
 8007c54:	bf18      	it	ne
 8007c56:	6059      	strne	r1, [r3, #4]
 8007c58:	6863      	ldr	r3, [r4, #4]
 8007c5a:	bf08      	it	eq
 8007c5c:	f8c8 1000 	streq.w	r1, [r8]
 8007c60:	5162      	str	r2, [r4, r5]
 8007c62:	604b      	str	r3, [r1, #4]
 8007c64:	4638      	mov	r0, r7
 8007c66:	f104 060b 	add.w	r6, r4, #11
 8007c6a:	f000 f829 	bl	8007cc0 <__malloc_unlock>
 8007c6e:	f026 0607 	bic.w	r6, r6, #7
 8007c72:	1d23      	adds	r3, r4, #4
 8007c74:	1af2      	subs	r2, r6, r3
 8007c76:	d0ae      	beq.n	8007bd6 <_malloc_r+0x22>
 8007c78:	1b9b      	subs	r3, r3, r6
 8007c7a:	50a3      	str	r3, [r4, r2]
 8007c7c:	e7ab      	b.n	8007bd6 <_malloc_r+0x22>
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	6862      	ldr	r2, [r4, #4]
 8007c82:	d1dd      	bne.n	8007c40 <_malloc_r+0x8c>
 8007c84:	f8c8 2000 	str.w	r2, [r8]
 8007c88:	e7ec      	b.n	8007c64 <_malloc_r+0xb0>
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	6864      	ldr	r4, [r4, #4]
 8007c8e:	e7ac      	b.n	8007bea <_malloc_r+0x36>
 8007c90:	4634      	mov	r4, r6
 8007c92:	6876      	ldr	r6, [r6, #4]
 8007c94:	e7b4      	b.n	8007c00 <_malloc_r+0x4c>
 8007c96:	4613      	mov	r3, r2
 8007c98:	e7cc      	b.n	8007c34 <_malloc_r+0x80>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	603b      	str	r3, [r7, #0]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f000 f80e 	bl	8007cc0 <__malloc_unlock>
 8007ca4:	e797      	b.n	8007bd6 <_malloc_r+0x22>
 8007ca6:	6025      	str	r5, [r4, #0]
 8007ca8:	e7dc      	b.n	8007c64 <_malloc_r+0xb0>
 8007caa:	605b      	str	r3, [r3, #4]
 8007cac:	deff      	udf	#255	; 0xff
 8007cae:	bf00      	nop
 8007cb0:	20000700 	.word	0x20000700

08007cb4 <__malloc_lock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__malloc_lock+0x8>)
 8007cb6:	f7ff bf07 	b.w	8007ac8 <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	200006fc 	.word	0x200006fc

08007cc0 <__malloc_unlock>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__malloc_unlock+0x8>)
 8007cc2:	f7ff bf02 	b.w	8007aca <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	200006fc 	.word	0x200006fc

08007ccc <__ssputs_r>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	688e      	ldr	r6, [r1, #8]
 8007cd2:	461f      	mov	r7, r3
 8007cd4:	42be      	cmp	r6, r7
 8007cd6:	680b      	ldr	r3, [r1, #0]
 8007cd8:	4682      	mov	sl, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	4690      	mov	r8, r2
 8007cde:	d82c      	bhi.n	8007d3a <__ssputs_r+0x6e>
 8007ce0:	898a      	ldrh	r2, [r1, #12]
 8007ce2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ce6:	d026      	beq.n	8007d36 <__ssputs_r+0x6a>
 8007ce8:	6965      	ldr	r5, [r4, #20]
 8007cea:	6909      	ldr	r1, [r1, #16]
 8007cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cf0:	eba3 0901 	sub.w	r9, r3, r1
 8007cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cf8:	1c7b      	adds	r3, r7, #1
 8007cfa:	444b      	add	r3, r9
 8007cfc:	106d      	asrs	r5, r5, #1
 8007cfe:	429d      	cmp	r5, r3
 8007d00:	bf38      	it	cc
 8007d02:	461d      	movcc	r5, r3
 8007d04:	0553      	lsls	r3, r2, #21
 8007d06:	d527      	bpl.n	8007d58 <__ssputs_r+0x8c>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7ff ff53 	bl	8007bb4 <_malloc_r>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	b360      	cbz	r0, 8007d6c <__ssputs_r+0xa0>
 8007d12:	6921      	ldr	r1, [r4, #16]
 8007d14:	464a      	mov	r2, r9
 8007d16:	f000 faeb 	bl	80082f0 <memcpy>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	6126      	str	r6, [r4, #16]
 8007d28:	6165      	str	r5, [r4, #20]
 8007d2a:	444e      	add	r6, r9
 8007d2c:	eba5 0509 	sub.w	r5, r5, r9
 8007d30:	6026      	str	r6, [r4, #0]
 8007d32:	60a5      	str	r5, [r4, #8]
 8007d34:	463e      	mov	r6, r7
 8007d36:	42be      	cmp	r6, r7
 8007d38:	d900      	bls.n	8007d3c <__ssputs_r+0x70>
 8007d3a:	463e      	mov	r6, r7
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	4632      	mov	r2, r6
 8007d40:	4641      	mov	r1, r8
 8007d42:	f000 faab 	bl	800829c <memmove>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	4433      	add	r3, r6
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	2000      	movs	r0, #0
 8007d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d58:	462a      	mov	r2, r5
 8007d5a:	f000 fad7 	bl	800830c <_realloc_r>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1e0      	bne.n	8007d26 <__ssputs_r+0x5a>
 8007d64:	6921      	ldr	r1, [r4, #16]
 8007d66:	4650      	mov	r0, sl
 8007d68:	f7ff feb8 	bl	8007adc <_free_r>
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	f8ca 3000 	str.w	r3, [sl]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7e:	e7e9      	b.n	8007d54 <__ssputs_r+0x88>

08007d80 <_svfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	4698      	mov	r8, r3
 8007d86:	898b      	ldrh	r3, [r1, #12]
 8007d88:	061b      	lsls	r3, r3, #24
 8007d8a:	b09d      	sub	sp, #116	; 0x74
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	4614      	mov	r4, r2
 8007d92:	d50e      	bpl.n	8007db2 <_svfiprintf_r+0x32>
 8007d94:	690b      	ldr	r3, [r1, #16]
 8007d96:	b963      	cbnz	r3, 8007db2 <_svfiprintf_r+0x32>
 8007d98:	2140      	movs	r1, #64	; 0x40
 8007d9a:	f7ff ff0b 	bl	8007bb4 <_malloc_r>
 8007d9e:	6028      	str	r0, [r5, #0]
 8007da0:	6128      	str	r0, [r5, #16]
 8007da2:	b920      	cbnz	r0, 8007dae <_svfiprintf_r+0x2e>
 8007da4:	230c      	movs	r3, #12
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	e0d0      	b.n	8007f50 <_svfiprintf_r+0x1d0>
 8007dae:	2340      	movs	r3, #64	; 0x40
 8007db0:	616b      	str	r3, [r5, #20]
 8007db2:	2300      	movs	r3, #0
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	2320      	movs	r3, #32
 8007db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dc0:	2330      	movs	r3, #48	; 0x30
 8007dc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f68 <_svfiprintf_r+0x1e8>
 8007dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dca:	f04f 0901 	mov.w	r9, #1
 8007dce:	4623      	mov	r3, r4
 8007dd0:	469a      	mov	sl, r3
 8007dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd6:	b10a      	cbz	r2, 8007ddc <_svfiprintf_r+0x5c>
 8007dd8:	2a25      	cmp	r2, #37	; 0x25
 8007dda:	d1f9      	bne.n	8007dd0 <_svfiprintf_r+0x50>
 8007ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8007de0:	d00b      	beq.n	8007dfa <_svfiprintf_r+0x7a>
 8007de2:	465b      	mov	r3, fp
 8007de4:	4622      	mov	r2, r4
 8007de6:	4629      	mov	r1, r5
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ff6f 	bl	8007ccc <__ssputs_r>
 8007dee:	3001      	adds	r0, #1
 8007df0:	f000 80a9 	beq.w	8007f46 <_svfiprintf_r+0x1c6>
 8007df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df6:	445a      	add	r2, fp
 8007df8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80a1 	beq.w	8007f46 <_svfiprintf_r+0x1c6>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0e:	f10a 0a01 	add.w	sl, sl, #1
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	9307      	str	r3, [sp, #28]
 8007e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2205      	movs	r2, #5
 8007e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e24:	4850      	ldr	r0, [pc, #320]	; (8007f68 <_svfiprintf_r+0x1e8>)
 8007e26:	f7f8 f9eb 	bl	8000200 <memchr>
 8007e2a:	9a04      	ldr	r2, [sp, #16]
 8007e2c:	b9d8      	cbnz	r0, 8007e66 <_svfiprintf_r+0xe6>
 8007e2e:	06d0      	lsls	r0, r2, #27
 8007e30:	bf44      	itt	mi
 8007e32:	2320      	movmi	r3, #32
 8007e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e38:	0711      	lsls	r1, r2, #28
 8007e3a:	bf44      	itt	mi
 8007e3c:	232b      	movmi	r3, #43	; 0x2b
 8007e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e42:	f89a 3000 	ldrb.w	r3, [sl]
 8007e46:	2b2a      	cmp	r3, #42	; 0x2a
 8007e48:	d015      	beq.n	8007e76 <_svfiprintf_r+0xf6>
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2000      	movs	r0, #0
 8007e50:	f04f 0c0a 	mov.w	ip, #10
 8007e54:	4621      	mov	r1, r4
 8007e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e5a:	3b30      	subs	r3, #48	; 0x30
 8007e5c:	2b09      	cmp	r3, #9
 8007e5e:	d94d      	bls.n	8007efc <_svfiprintf_r+0x17c>
 8007e60:	b1b0      	cbz	r0, 8007e90 <_svfiprintf_r+0x110>
 8007e62:	9207      	str	r2, [sp, #28]
 8007e64:	e014      	b.n	8007e90 <_svfiprintf_r+0x110>
 8007e66:	eba0 0308 	sub.w	r3, r0, r8
 8007e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	46a2      	mov	sl, r4
 8007e74:	e7d2      	b.n	8007e1c <_svfiprintf_r+0x9c>
 8007e76:	9b03      	ldr	r3, [sp, #12]
 8007e78:	1d19      	adds	r1, r3, #4
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	9103      	str	r1, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfbb      	ittet	lt
 8007e82:	425b      	neglt	r3, r3
 8007e84:	f042 0202 	orrlt.w	r2, r2, #2
 8007e88:	9307      	strge	r3, [sp, #28]
 8007e8a:	9307      	strlt	r3, [sp, #28]
 8007e8c:	bfb8      	it	lt
 8007e8e:	9204      	strlt	r2, [sp, #16]
 8007e90:	7823      	ldrb	r3, [r4, #0]
 8007e92:	2b2e      	cmp	r3, #46	; 0x2e
 8007e94:	d10c      	bne.n	8007eb0 <_svfiprintf_r+0x130>
 8007e96:	7863      	ldrb	r3, [r4, #1]
 8007e98:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9a:	d134      	bne.n	8007f06 <_svfiprintf_r+0x186>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	9203      	str	r2, [sp, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bfb8      	it	lt
 8007ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eac:	3402      	adds	r4, #2
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f78 <_svfiprintf_r+0x1f8>
 8007eb4:	7821      	ldrb	r1, [r4, #0]
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	4650      	mov	r0, sl
 8007eba:	f7f8 f9a1 	bl	8000200 <memchr>
 8007ebe:	b138      	cbz	r0, 8007ed0 <_svfiprintf_r+0x150>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	eba0 000a 	sub.w	r0, r0, sl
 8007ec6:	2240      	movs	r2, #64	; 0x40
 8007ec8:	4082      	lsls	r2, r0
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed4:	4825      	ldr	r0, [pc, #148]	; (8007f6c <_svfiprintf_r+0x1ec>)
 8007ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eda:	2206      	movs	r2, #6
 8007edc:	f7f8 f990 	bl	8000200 <memchr>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d038      	beq.n	8007f56 <_svfiprintf_r+0x1d6>
 8007ee4:	4b22      	ldr	r3, [pc, #136]	; (8007f70 <_svfiprintf_r+0x1f0>)
 8007ee6:	bb1b      	cbnz	r3, 8007f30 <_svfiprintf_r+0x1b0>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	3307      	adds	r3, #7
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	4433      	add	r3, r6
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	e768      	b.n	8007dce <_svfiprintf_r+0x4e>
 8007efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f00:	460c      	mov	r4, r1
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7a6      	b.n	8007e54 <_svfiprintf_r+0xd4>
 8007f06:	2300      	movs	r3, #0
 8007f08:	3401      	adds	r4, #1
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	4620      	mov	r0, r4
 8007f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f18:	3a30      	subs	r2, #48	; 0x30
 8007f1a:	2a09      	cmp	r2, #9
 8007f1c:	d903      	bls.n	8007f26 <_svfiprintf_r+0x1a6>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c6      	beq.n	8007eb0 <_svfiprintf_r+0x130>
 8007f22:	9105      	str	r1, [sp, #20]
 8007f24:	e7c4      	b.n	8007eb0 <_svfiprintf_r+0x130>
 8007f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7f0      	b.n	8007f12 <_svfiprintf_r+0x192>
 8007f30:	ab03      	add	r3, sp, #12
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <_svfiprintf_r+0x1f4>)
 8007f38:	a904      	add	r1, sp, #16
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f3af 8000 	nop.w
 8007f40:	1c42      	adds	r2, r0, #1
 8007f42:	4606      	mov	r6, r0
 8007f44:	d1d6      	bne.n	8007ef4 <_svfiprintf_r+0x174>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	065b      	lsls	r3, r3, #25
 8007f4a:	f53f af2d 	bmi.w	8007da8 <_svfiprintf_r+0x28>
 8007f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f50:	b01d      	add	sp, #116	; 0x74
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	ab03      	add	r3, sp, #12
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <_svfiprintf_r+0x1f4>)
 8007f5e:	a904      	add	r1, sp, #16
 8007f60:	4638      	mov	r0, r7
 8007f62:	f000 f879 	bl	8008058 <_printf_i>
 8007f66:	e7eb      	b.n	8007f40 <_svfiprintf_r+0x1c0>
 8007f68:	08008504 	.word	0x08008504
 8007f6c:	0800850e 	.word	0x0800850e
 8007f70:	00000000 	.word	0x00000000
 8007f74:	08007ccd 	.word	0x08007ccd
 8007f78:	0800850a 	.word	0x0800850a

08007f7c <_printf_common>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	4616      	mov	r6, r2
 8007f82:	4699      	mov	r9, r3
 8007f84:	688a      	ldr	r2, [r1, #8]
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	bfb8      	it	lt
 8007f90:	4613      	movlt	r3, r2
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f98:	4607      	mov	r7, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b10a      	cbz	r2, 8007fa2 <_printf_common+0x26>
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	0699      	lsls	r1, r3, #26
 8007fa6:	bf42      	ittt	mi
 8007fa8:	6833      	ldrmi	r3, [r6, #0]
 8007faa:	3302      	addmi	r3, #2
 8007fac:	6033      	strmi	r3, [r6, #0]
 8007fae:	6825      	ldr	r5, [r4, #0]
 8007fb0:	f015 0506 	ands.w	r5, r5, #6
 8007fb4:	d106      	bne.n	8007fc4 <_printf_common+0x48>
 8007fb6:	f104 0a19 	add.w	sl, r4, #25
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	6832      	ldr	r2, [r6, #0]
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc26      	bgt.n	8008012 <_printf_common+0x96>
 8007fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fc8:	1e13      	subs	r3, r2, #0
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	bf18      	it	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	0692      	lsls	r2, r2, #26
 8007fd2:	d42b      	bmi.n	800802c <_printf_common+0xb0>
 8007fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c0      	blx	r8
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d01e      	beq.n	8008020 <_printf_common+0xa4>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6922      	ldr	r2, [r4, #16]
 8007fe6:	f003 0306 	and.w	r3, r3, #6
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	bf02      	ittt	eq
 8007fee:	68e5      	ldreq	r5, [r4, #12]
 8007ff0:	6833      	ldreq	r3, [r6, #0]
 8007ff2:	1aed      	subeq	r5, r5, r3
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	bf0c      	ite	eq
 8007ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ffc:	2500      	movne	r5, #0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	bfc4      	itt	gt
 8008002:	1a9b      	subgt	r3, r3, r2
 8008004:	18ed      	addgt	r5, r5, r3
 8008006:	2600      	movs	r6, #0
 8008008:	341a      	adds	r4, #26
 800800a:	42b5      	cmp	r5, r6
 800800c:	d11a      	bne.n	8008044 <_printf_common+0xc8>
 800800e:	2000      	movs	r0, #0
 8008010:	e008      	b.n	8008024 <_printf_common+0xa8>
 8008012:	2301      	movs	r3, #1
 8008014:	4652      	mov	r2, sl
 8008016:	4649      	mov	r1, r9
 8008018:	4638      	mov	r0, r7
 800801a:	47c0      	blx	r8
 800801c:	3001      	adds	r0, #1
 800801e:	d103      	bne.n	8008028 <_printf_common+0xac>
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	3501      	adds	r5, #1
 800802a:	e7c6      	b.n	8007fba <_printf_common+0x3e>
 800802c:	18e1      	adds	r1, r4, r3
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	2030      	movs	r0, #48	; 0x30
 8008032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008036:	4422      	add	r2, r4
 8008038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800803c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008040:	3302      	adds	r3, #2
 8008042:	e7c7      	b.n	8007fd4 <_printf_common+0x58>
 8008044:	2301      	movs	r3, #1
 8008046:	4622      	mov	r2, r4
 8008048:	4649      	mov	r1, r9
 800804a:	4638      	mov	r0, r7
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d0e6      	beq.n	8008020 <_printf_common+0xa4>
 8008052:	3601      	adds	r6, #1
 8008054:	e7d9      	b.n	800800a <_printf_common+0x8e>
	...

08008058 <_printf_i>:
 8008058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	7e0f      	ldrb	r7, [r1, #24]
 800805e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008060:	2f78      	cmp	r7, #120	; 0x78
 8008062:	4691      	mov	r9, r2
 8008064:	4680      	mov	r8, r0
 8008066:	460c      	mov	r4, r1
 8008068:	469a      	mov	sl, r3
 800806a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800806e:	d807      	bhi.n	8008080 <_printf_i+0x28>
 8008070:	2f62      	cmp	r7, #98	; 0x62
 8008072:	d80a      	bhi.n	800808a <_printf_i+0x32>
 8008074:	2f00      	cmp	r7, #0
 8008076:	f000 80d4 	beq.w	8008222 <_printf_i+0x1ca>
 800807a:	2f58      	cmp	r7, #88	; 0x58
 800807c:	f000 80c0 	beq.w	8008200 <_printf_i+0x1a8>
 8008080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008088:	e03a      	b.n	8008100 <_printf_i+0xa8>
 800808a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800808e:	2b15      	cmp	r3, #21
 8008090:	d8f6      	bhi.n	8008080 <_printf_i+0x28>
 8008092:	a101      	add	r1, pc, #4	; (adr r1, 8008098 <_printf_i+0x40>)
 8008094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008098:	080080f1 	.word	0x080080f1
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008081 	.word	0x08008081
 80080a4:	08008081 	.word	0x08008081
 80080a8:	08008081 	.word	0x08008081
 80080ac:	08008081 	.word	0x08008081
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008081 	.word	0x08008081
 80080b8:	08008081 	.word	0x08008081
 80080bc:	08008081 	.word	0x08008081
 80080c0:	08008081 	.word	0x08008081
 80080c4:	08008209 	.word	0x08008209
 80080c8:	08008131 	.word	0x08008131
 80080cc:	080081c3 	.word	0x080081c3
 80080d0:	08008081 	.word	0x08008081
 80080d4:	08008081 	.word	0x08008081
 80080d8:	0800822b 	.word	0x0800822b
 80080dc:	08008081 	.word	0x08008081
 80080e0:	08008131 	.word	0x08008131
 80080e4:	08008081 	.word	0x08008081
 80080e8:	08008081 	.word	0x08008081
 80080ec:	080081cb 	.word	0x080081cb
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	602a      	str	r2, [r5, #0]
 80080f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008100:	2301      	movs	r3, #1
 8008102:	e09f      	b.n	8008244 <_printf_i+0x1ec>
 8008104:	6820      	ldr	r0, [r4, #0]
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	0607      	lsls	r7, r0, #24
 800810a:	f103 0104 	add.w	r1, r3, #4
 800810e:	6029      	str	r1, [r5, #0]
 8008110:	d501      	bpl.n	8008116 <_printf_i+0xbe>
 8008112:	681e      	ldr	r6, [r3, #0]
 8008114:	e003      	b.n	800811e <_printf_i+0xc6>
 8008116:	0646      	lsls	r6, r0, #25
 8008118:	d5fb      	bpl.n	8008112 <_printf_i+0xba>
 800811a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800811e:	2e00      	cmp	r6, #0
 8008120:	da03      	bge.n	800812a <_printf_i+0xd2>
 8008122:	232d      	movs	r3, #45	; 0x2d
 8008124:	4276      	negs	r6, r6
 8008126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812a:	485a      	ldr	r0, [pc, #360]	; (8008294 <_printf_i+0x23c>)
 800812c:	230a      	movs	r3, #10
 800812e:	e012      	b.n	8008156 <_printf_i+0xfe>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	1d19      	adds	r1, r3, #4
 8008136:	6029      	str	r1, [r5, #0]
 8008138:	0605      	lsls	r5, r0, #24
 800813a:	d501      	bpl.n	8008140 <_printf_i+0xe8>
 800813c:	681e      	ldr	r6, [r3, #0]
 800813e:	e002      	b.n	8008146 <_printf_i+0xee>
 8008140:	0641      	lsls	r1, r0, #25
 8008142:	d5fb      	bpl.n	800813c <_printf_i+0xe4>
 8008144:	881e      	ldrh	r6, [r3, #0]
 8008146:	4853      	ldr	r0, [pc, #332]	; (8008294 <_printf_i+0x23c>)
 8008148:	2f6f      	cmp	r7, #111	; 0x6f
 800814a:	bf0c      	ite	eq
 800814c:	2308      	moveq	r3, #8
 800814e:	230a      	movne	r3, #10
 8008150:	2100      	movs	r1, #0
 8008152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008156:	6865      	ldr	r5, [r4, #4]
 8008158:	60a5      	str	r5, [r4, #8]
 800815a:	2d00      	cmp	r5, #0
 800815c:	bfa2      	ittt	ge
 800815e:	6821      	ldrge	r1, [r4, #0]
 8008160:	f021 0104 	bicge.w	r1, r1, #4
 8008164:	6021      	strge	r1, [r4, #0]
 8008166:	b90e      	cbnz	r6, 800816c <_printf_i+0x114>
 8008168:	2d00      	cmp	r5, #0
 800816a:	d04b      	beq.n	8008204 <_printf_i+0x1ac>
 800816c:	4615      	mov	r5, r2
 800816e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008172:	fb03 6711 	mls	r7, r3, r1, r6
 8008176:	5dc7      	ldrb	r7, [r0, r7]
 8008178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800817c:	4637      	mov	r7, r6
 800817e:	42bb      	cmp	r3, r7
 8008180:	460e      	mov	r6, r1
 8008182:	d9f4      	bls.n	800816e <_printf_i+0x116>
 8008184:	2b08      	cmp	r3, #8
 8008186:	d10b      	bne.n	80081a0 <_printf_i+0x148>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	07de      	lsls	r6, r3, #31
 800818c:	d508      	bpl.n	80081a0 <_printf_i+0x148>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	6861      	ldr	r1, [r4, #4]
 8008192:	4299      	cmp	r1, r3
 8008194:	bfde      	ittt	le
 8008196:	2330      	movle	r3, #48	; 0x30
 8008198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800819c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081a0:	1b52      	subs	r2, r2, r5
 80081a2:	6122      	str	r2, [r4, #16]
 80081a4:	f8cd a000 	str.w	sl, [sp]
 80081a8:	464b      	mov	r3, r9
 80081aa:	aa03      	add	r2, sp, #12
 80081ac:	4621      	mov	r1, r4
 80081ae:	4640      	mov	r0, r8
 80081b0:	f7ff fee4 	bl	8007f7c <_printf_common>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d14a      	bne.n	800824e <_printf_i+0x1f6>
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	b004      	add	sp, #16
 80081be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	4833      	ldr	r0, [pc, #204]	; (8008298 <_printf_i+0x240>)
 80081cc:	2778      	movs	r7, #120	; 0x78
 80081ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	6829      	ldr	r1, [r5, #0]
 80081d6:	061f      	lsls	r7, r3, #24
 80081d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081dc:	d402      	bmi.n	80081e4 <_printf_i+0x18c>
 80081de:	065f      	lsls	r7, r3, #25
 80081e0:	bf48      	it	mi
 80081e2:	b2b6      	uxthmi	r6, r6
 80081e4:	07df      	lsls	r7, r3, #31
 80081e6:	bf48      	it	mi
 80081e8:	f043 0320 	orrmi.w	r3, r3, #32
 80081ec:	6029      	str	r1, [r5, #0]
 80081ee:	bf48      	it	mi
 80081f0:	6023      	strmi	r3, [r4, #0]
 80081f2:	b91e      	cbnz	r6, 80081fc <_printf_i+0x1a4>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	f023 0320 	bic.w	r3, r3, #32
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	2310      	movs	r3, #16
 80081fe:	e7a7      	b.n	8008150 <_printf_i+0xf8>
 8008200:	4824      	ldr	r0, [pc, #144]	; (8008294 <_printf_i+0x23c>)
 8008202:	e7e4      	b.n	80081ce <_printf_i+0x176>
 8008204:	4615      	mov	r5, r2
 8008206:	e7bd      	b.n	8008184 <_printf_i+0x12c>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	6826      	ldr	r6, [r4, #0]
 800820c:	6961      	ldr	r1, [r4, #20]
 800820e:	1d18      	adds	r0, r3, #4
 8008210:	6028      	str	r0, [r5, #0]
 8008212:	0635      	lsls	r5, r6, #24
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	d501      	bpl.n	800821c <_printf_i+0x1c4>
 8008218:	6019      	str	r1, [r3, #0]
 800821a:	e002      	b.n	8008222 <_printf_i+0x1ca>
 800821c:	0670      	lsls	r0, r6, #25
 800821e:	d5fb      	bpl.n	8008218 <_printf_i+0x1c0>
 8008220:	8019      	strh	r1, [r3, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	4615      	mov	r5, r2
 8008228:	e7bc      	b.n	80081a4 <_printf_i+0x14c>
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	602a      	str	r2, [r5, #0]
 8008230:	681d      	ldr	r5, [r3, #0]
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	2100      	movs	r1, #0
 8008236:	4628      	mov	r0, r5
 8008238:	f7f7 ffe2 	bl	8000200 <memchr>
 800823c:	b108      	cbz	r0, 8008242 <_printf_i+0x1ea>
 800823e:	1b40      	subs	r0, r0, r5
 8008240:	6060      	str	r0, [r4, #4]
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	6123      	str	r3, [r4, #16]
 8008246:	2300      	movs	r3, #0
 8008248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824c:	e7aa      	b.n	80081a4 <_printf_i+0x14c>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	462a      	mov	r2, r5
 8008252:	4649      	mov	r1, r9
 8008254:	4640      	mov	r0, r8
 8008256:	47d0      	blx	sl
 8008258:	3001      	adds	r0, #1
 800825a:	d0ad      	beq.n	80081b8 <_printf_i+0x160>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	079b      	lsls	r3, r3, #30
 8008260:	d413      	bmi.n	800828a <_printf_i+0x232>
 8008262:	68e0      	ldr	r0, [r4, #12]
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	4298      	cmp	r0, r3
 8008268:	bfb8      	it	lt
 800826a:	4618      	movlt	r0, r3
 800826c:	e7a6      	b.n	80081bc <_printf_i+0x164>
 800826e:	2301      	movs	r3, #1
 8008270:	4632      	mov	r2, r6
 8008272:	4649      	mov	r1, r9
 8008274:	4640      	mov	r0, r8
 8008276:	47d0      	blx	sl
 8008278:	3001      	adds	r0, #1
 800827a:	d09d      	beq.n	80081b8 <_printf_i+0x160>
 800827c:	3501      	adds	r5, #1
 800827e:	68e3      	ldr	r3, [r4, #12]
 8008280:	9903      	ldr	r1, [sp, #12]
 8008282:	1a5b      	subs	r3, r3, r1
 8008284:	42ab      	cmp	r3, r5
 8008286:	dcf2      	bgt.n	800826e <_printf_i+0x216>
 8008288:	e7eb      	b.n	8008262 <_printf_i+0x20a>
 800828a:	2500      	movs	r5, #0
 800828c:	f104 0619 	add.w	r6, r4, #25
 8008290:	e7f5      	b.n	800827e <_printf_i+0x226>
 8008292:	bf00      	nop
 8008294:	08008515 	.word	0x08008515
 8008298:	08008526 	.word	0x08008526

0800829c <memmove>:
 800829c:	4288      	cmp	r0, r1
 800829e:	b510      	push	{r4, lr}
 80082a0:	eb01 0402 	add.w	r4, r1, r2
 80082a4:	d902      	bls.n	80082ac <memmove+0x10>
 80082a6:	4284      	cmp	r4, r0
 80082a8:	4623      	mov	r3, r4
 80082aa:	d807      	bhi.n	80082bc <memmove+0x20>
 80082ac:	1e43      	subs	r3, r0, #1
 80082ae:	42a1      	cmp	r1, r4
 80082b0:	d008      	beq.n	80082c4 <memmove+0x28>
 80082b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082ba:	e7f8      	b.n	80082ae <memmove+0x12>
 80082bc:	4402      	add	r2, r0
 80082be:	4601      	mov	r1, r0
 80082c0:	428a      	cmp	r2, r1
 80082c2:	d100      	bne.n	80082c6 <memmove+0x2a>
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ce:	e7f7      	b.n	80082c0 <memmove+0x24>

080082d0 <_sbrk_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d06      	ldr	r5, [pc, #24]	; (80082ec <_sbrk_r+0x1c>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	f7f9 fe10 	bl	8001f00 <_sbrk>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_sbrk_r+0x1a>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_sbrk_r+0x1a>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	200006f8 	.word	0x200006f8

080082f0 <memcpy>:
 80082f0:	440a      	add	r2, r1
 80082f2:	4291      	cmp	r1, r2
 80082f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082f8:	d100      	bne.n	80082fc <memcpy+0xc>
 80082fa:	4770      	bx	lr
 80082fc:	b510      	push	{r4, lr}
 80082fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008306:	4291      	cmp	r1, r2
 8008308:	d1f9      	bne.n	80082fe <memcpy+0xe>
 800830a:	bd10      	pop	{r4, pc}

0800830c <_realloc_r>:
 800830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	4680      	mov	r8, r0
 8008312:	4614      	mov	r4, r2
 8008314:	460e      	mov	r6, r1
 8008316:	b921      	cbnz	r1, 8008322 <_realloc_r+0x16>
 8008318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800831c:	4611      	mov	r1, r2
 800831e:	f7ff bc49 	b.w	8007bb4 <_malloc_r>
 8008322:	b92a      	cbnz	r2, 8008330 <_realloc_r+0x24>
 8008324:	f7ff fbda 	bl	8007adc <_free_r>
 8008328:	4625      	mov	r5, r4
 800832a:	4628      	mov	r0, r5
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	f000 f81b 	bl	800836a <_malloc_usable_size_r>
 8008334:	4284      	cmp	r4, r0
 8008336:	4607      	mov	r7, r0
 8008338:	d802      	bhi.n	8008340 <_realloc_r+0x34>
 800833a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800833e:	d812      	bhi.n	8008366 <_realloc_r+0x5a>
 8008340:	4621      	mov	r1, r4
 8008342:	4640      	mov	r0, r8
 8008344:	f7ff fc36 	bl	8007bb4 <_malloc_r>
 8008348:	4605      	mov	r5, r0
 800834a:	2800      	cmp	r0, #0
 800834c:	d0ed      	beq.n	800832a <_realloc_r+0x1e>
 800834e:	42bc      	cmp	r4, r7
 8008350:	4622      	mov	r2, r4
 8008352:	4631      	mov	r1, r6
 8008354:	bf28      	it	cs
 8008356:	463a      	movcs	r2, r7
 8008358:	f7ff ffca 	bl	80082f0 <memcpy>
 800835c:	4631      	mov	r1, r6
 800835e:	4640      	mov	r0, r8
 8008360:	f7ff fbbc 	bl	8007adc <_free_r>
 8008364:	e7e1      	b.n	800832a <_realloc_r+0x1e>
 8008366:	4635      	mov	r5, r6
 8008368:	e7df      	b.n	800832a <_realloc_r+0x1e>

0800836a <_malloc_usable_size_r>:
 800836a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800836e:	1f18      	subs	r0, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfbc      	itt	lt
 8008374:	580b      	ldrlt	r3, [r1, r0]
 8008376:	18c0      	addlt	r0, r0, r3
 8008378:	4770      	bx	lr
	...

0800837c <_init>:
 800837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837e:	bf00      	nop
 8008380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	469e      	mov	lr, r3
 8008386:	4770      	bx	lr

08008388 <_fini>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	bf00      	nop
 800838c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838e:	bc08      	pop	{r3}
 8008390:	469e      	mov	lr, r3
 8008392:	4770      	bx	lr

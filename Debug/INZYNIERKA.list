
INZYNIERKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800865c  0800865c  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008664  08008664  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800866c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  200000c4  08008730  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08008730  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ebf  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c5e  00000000  00000000  00039ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001153  00000000  00000000  0003f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a42e  00000000  00000000  0004040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb72  00000000  00000000  0006a839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd266  00000000  00000000  000893ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006170  00000000  00000000  00186614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084a0 	.word	0x080084a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	080084a0 	.word	0x080084a0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_SystemReset+0x28>)
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <__NVIC_SystemReset+0x20>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	05fa0004 	.word	0x05fa0004

080005c8 <lcd_write_nibble>:

static bool previous_state_telephone = true;
static bool can_enter_key = false;

static void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <lcd_write_nibble+0x7c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 8000608:	f107 020f 	add.w	r2, r7, #15
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	214e      	movs	r1, #78	; 0x4e
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <lcd_write_nibble+0x80>)
 8000616:	f002 fc27 	bl	8002e68 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 ffe2 	bl	80025e4 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 800062a:	f107 020f 	add.w	r2, r7, #15
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	214e      	movs	r1, #78	; 0x4e
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <lcd_write_nibble+0x80>)
 8000638:	f002 fc16 	bl	8002e68 <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	200000f0 	.word	0x200000f0

0800064c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffad 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffa8 	bl	80005c8 <lcd_write_nibble>
	if(cmd == 0x01 || cmd == 0x02)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <lcd_send_cmd+0x38>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <lcd_send_cmd+0x3e>
	{
		HAL_Delay(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f001 ffad 	bl	80025e4 <HAL_Delay>
	}
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff8a 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff85 	bl	80005c8 <lcd_write_nibble>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <lcd_init>:

void lcd_init()
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f001 ff8a 	bl	80025e4 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ff78 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f001 ff83 	bl	80025e4 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff71 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 ff7c 	bl	80025e4 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2003      	movs	r0, #3
 80006f0:	f7ff ff6a 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 ff75 	bl	80025e4 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff63 	bl	80005c8 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 8000702:	2028      	movs	r0, #40	; 0x28
 8000704:	f7ff ffa2 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff9f 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff9c 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff99 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 800071a:	2002      	movs	r0, #2
 800071c:	f001 ff62 	bl	80025e4 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	while(*str)
 800072c:	e006      	b.n	800073c <lcd_write_string+0x18>
	{
		lcd_send_data(*str++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffab 	bl	8000692 <lcd_send_data>
	while(*str)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <lcd_write_string+0xa>
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	460a      	mov	r2, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <lcd_set_cursor+0x1c>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d003      	beq.n	8000770 <lcd_set_cursor+0x22>
 8000768:	e005      	b.n	8000776 <lcd_set_cursor+0x28>
	{
		case 0:
			address = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
			break;
 800076e:	e004      	b.n	800077a <lcd_set_cursor+0x2c>
		case 1:
			address = 0x40;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	73fb      	strb	r3, [r7, #15]
			break;
 8000774:	e001      	b.n	800077a <lcd_set_cursor+0x2c>
		default:
			address = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	4413      	add	r3, r2
 8000780:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff5e 	bl	800064c <lcd_send_cmd>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_clear>:

void lcd_clear(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff55 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 ff1e 	bl	80025e4 <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lcd_backlight>:

void lcd_backlight(uint8_t state)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <lcd_backlight+0x18>
	{
		backlight_state = 1;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <lcd_backlight+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	} else
	{
		backlight_state = 0;
	}
}
 80007c2:	e002      	b.n	80007ca <lcd_backlight+0x1e>
		backlight_state = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <lcd_backlight+0x2c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <lcd_display>:

int lcd_number = LCD_1;
int back_condition = NO_BACK;

void lcd_display(bool current_state_telephone, bool current_state_key, char *key_buffer, char *access_key, char pressed_button, char *ble_cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	460b      	mov	r3, r1
 80007ec:	73bb      	strb	r3, [r7, #14]
	static bool if_key_entered = false;
	static bool cmd_1 = false;
	static bool cmd_2 = false;
	static bool cmd_3 = false;

	if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_RESET)
 80007ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f2:	4898      	ldr	r0, [pc, #608]	; (8000a54 <lcd_display+0x278>)
 80007f4:	f002 fa54 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d120      	bne.n	8000840 <lcd_display+0x64>
	{
		switch(back_condition)
 80007fe:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <lcd_display+0x27c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d014      	beq.n	8000830 <lcd_display+0x54>
 8000806:	2b02      	cmp	r3, #2
 8000808:	dc19      	bgt.n	800083e <lcd_display+0x62>
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <lcd_display+0x38>
 800080e:	2b01      	cmp	r3, #1
 8000810:	d007      	beq.n	8000822 <lcd_display+0x46>
		case BACK_8:
			lcd_number = LCD_8;
			back_condition = NO_BACK;
			break;
		default:
			break;
 8000812:	e014      	b.n	800083e <lcd_display+0x62>
			lcd_number = LCD_2;
 8000814:	4b91      	ldr	r3, [pc, #580]	; (8000a5c <lcd_display+0x280>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <lcd_display+0x27c>)
 800081c:	2203      	movs	r2, #3
 800081e:	601a      	str	r2, [r3, #0]
			break;
 8000820:	e00e      	b.n	8000840 <lcd_display+0x64>
			lcd_number = LCD_6;
 8000822:	4b8e      	ldr	r3, [pc, #568]	; (8000a5c <lcd_display+0x280>)
 8000824:	2205      	movs	r2, #5
 8000826:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 8000828:	4b8b      	ldr	r3, [pc, #556]	; (8000a58 <lcd_display+0x27c>)
 800082a:	2203      	movs	r2, #3
 800082c:	601a      	str	r2, [r3, #0]
			break;
 800082e:	e007      	b.n	8000840 <lcd_display+0x64>
			lcd_number = LCD_8;
 8000830:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <lcd_display+0x280>)
 8000832:	2207      	movs	r2, #7
 8000834:	601a      	str	r2, [r3, #0]
			back_condition = NO_BACK;
 8000836:	4b88      	ldr	r3, [pc, #544]	; (8000a58 <lcd_display+0x27c>)
 8000838:	2203      	movs	r2, #3
 800083a:	601a      	str	r2, [r3, #0]
			break;
 800083c:	e000      	b.n	8000840 <lcd_display+0x64>
			break;
 800083e:	bf00      	nop
		}
	}


	if(current_state_telephone != previous_state_telephone)
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <lcd_display+0x284>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	429a      	cmp	r2, r3
 8000848:	d012      	beq.n	8000870 <lcd_display+0x94>
	{
		if(current_state_telephone == false)
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f083 0301 	eor.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d003      	beq.n	800085e <lcd_display+0x82>
		{
			lcd_number = LCD_1;
 8000856:	4b81      	ldr	r3, [pc, #516]	; (8000a5c <lcd_display+0x280>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e005      	b.n	800086a <lcd_display+0x8e>
		}else if(current_state_telephone == true)
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d002      	beq.n	800086a <lcd_display+0x8e>
		{
			lcd_number = LCD_2;
 8000864:	4b7d      	ldr	r3, [pc, #500]	; (8000a5c <lcd_display+0x280>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
		}
		previous_state_telephone = current_state_telephone;
 800086a:	4a7d      	ldr	r2, [pc, #500]	; (8000a60 <lcd_display+0x284>)
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	7013      	strb	r3, [r2, #0]
	}

	if(strlen(key_buffer) == 4)
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	f7ff fcb7 	bl	80001e4 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	2b04      	cmp	r3, #4
 800087a:	d10c      	bne.n	8000896 <lcd_display+0xba>
	{
		if_key_entered = true;
 800087c:	4b79      	ldr	r3, [pc, #484]	; (8000a64 <lcd_display+0x288>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
		if(strcmp(key_buffer, access_key) == 0)
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	68b8      	ldr	r0, [r7, #8]
 8000886:	f7ff fca3 	bl	80001d0 <strcmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <lcd_display+0xba>
		{
			if_key_correct = true;
 8000890:	4b75      	ldr	r3, [pc, #468]	; (8000a68 <lcd_display+0x28c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
		}
	}

	if(if_key_entered == true)
 8000896:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <lcd_display+0x288>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00d      	beq.n	80008ba <lcd_display+0xde>
	{
		if(if_key_correct == true)
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <lcd_display+0x28c>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <lcd_display+0xd2>
		{
			lcd_number = LCD_4;
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <lcd_display+0x280>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e002      	b.n	80008b4 <lcd_display+0xd8>
		} else
		{
			lcd_number = LCD_3;
 80008ae:	4b6b      	ldr	r3, [pc, #428]	; (8000a5c <lcd_display+0x280>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	601a      	str	r2, [r3, #0]
		}
		if_key_entered = false;
 80008b4:	4b6b      	ldr	r3, [pc, #428]	; (8000a64 <lcd_display+0x288>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
	}

	if(pressed_button == 'A' && if_key_correct == true)
 80008ba:	7e3b      	ldrb	r3, [r7, #24]
 80008bc:	2b41      	cmp	r3, #65	; 0x41
 80008be:	d109      	bne.n	80008d4 <lcd_display+0xf8>
 80008c0:	4b69      	ldr	r3, [pc, #420]	; (8000a68 <lcd_display+0x28c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d005      	beq.n	80008d4 <lcd_display+0xf8>
	{
		lcd_number = LCD_6;
 80008c8:	4b64      	ldr	r3, [pc, #400]	; (8000a5c <lcd_display+0x280>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	601a      	str	r2, [r3, #0]
		if_key_correct = false;
 80008ce:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <lcd_display+0x28c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp(ble_cmd, "open") == 0)
 80008d4:	4965      	ldr	r1, [pc, #404]	; (8000a6c <lcd_display+0x290>)
 80008d6:	69f8      	ldr	r0, [r7, #28]
 80008d8:	f7ff fc7a 	bl	80001d0 <strcmp>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d109      	bne.n	80008f6 <lcd_display+0x11a>
	{
		if(cmd_1 == true)
 80008e2:	4b63      	ldr	r3, [pc, #396]	; (8000a70 <lcd_display+0x294>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <lcd_display+0x11a>
		{
			lcd_number = LCD_7;
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <lcd_display+0x280>)
 80008ec:	2206      	movs	r2, #6
 80008ee:	601a      	str	r2, [r3, #0]
			cmd_1 = false;
 80008f0:	4b5f      	ldr	r3, [pc, #380]	; (8000a70 <lcd_display+0x294>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "close") == 0)
 80008f6:	495f      	ldr	r1, [pc, #380]	; (8000a74 <lcd_display+0x298>)
 80008f8:	69f8      	ldr	r0, [r7, #28]
 80008fa:	f7ff fc69 	bl	80001d0 <strcmp>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d109      	bne.n	8000918 <lcd_display+0x13c>
	{
		if(cmd_2 == true)
 8000904:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <lcd_display+0x29c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d005      	beq.n	8000918 <lcd_display+0x13c>
		{
			lcd_number = LCD_8;
 800090c:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <lcd_display+0x280>)
 800090e:	2207      	movs	r2, #7
 8000910:	601a      	str	r2, [r3, #0]
			cmd_2 = false;
 8000912:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <lcd_display+0x29c>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "reset") == 0)
 8000918:	4958      	ldr	r1, [pc, #352]	; (8000a7c <lcd_display+0x2a0>)
 800091a:	69f8      	ldr	r0, [r7, #28]
 800091c:	f7ff fc58 	bl	80001d0 <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d109      	bne.n	800093a <lcd_display+0x15e>
	{
		if(cmd_3 == true)
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <lcd_display+0x2a4>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d005      	beq.n	800093a <lcd_display+0x15e>
		{
			lcd_number = RST;
 800092e:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <lcd_display+0x280>)
 8000930:	2208      	movs	r2, #8
 8000932:	601a      	str	r2, [r3, #0]
			cmd_3 = false;
 8000934:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <lcd_display+0x2a4>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
		}
	}


	switch(lcd_number)
 800093a:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <lcd_display+0x280>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b08      	cmp	r3, #8
 8000940:	f200 8208 	bhi.w	8000d54 <lcd_display+0x578>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <lcd_display+0x170>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000971 	.word	0x08000971
 8000950:	080009c1 	.word	0x080009c1
 8000954:	08000aa9 	.word	0x08000aa9
 8000958:	08000b09 	.word	0x08000b09
 800095c:	08000b73 	.word	0x08000b73
 8000960:	08000bc3 	.word	0x08000bc3
 8000964:	08000c57 	.word	0x08000c57
 8000968:	08000cb7 	.word	0x08000cb7
 800096c:	08000d4b 	.word	0x08000d4b
	{
	case LCD_1:
		lcd_set_cursor(0, 0);
 8000970:	2100      	movs	r1, #0
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff feeb 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <lcd_display+0x2a8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fed1 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fee2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 800098a:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <lcd_display+0x2ac>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fec8 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000994:	2100      	movs	r1, #0
 8000996:	2001      	movs	r0, #1
 8000998:	f7ff fed9 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 800099c:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <lcd_display+0x2a8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff febf 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fed0 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_not_set);
 80009ae:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <lcd_display+0x2b0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff feb6 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <lcd_display+0x280>)
 80009ba:	2209      	movs	r2, #9
 80009bc:	601a      	str	r2, [r3, #0]
		break;
 80009be:	e1ca      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_2:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	4823      	ldr	r0, [pc, #140]	; (8000a54 <lcd_display+0x278>)
 80009c6:	f002 f96b 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d10e      	bne.n	80009ee <lcd_display+0x212>
		{
			lcd_clear();
 80009d0:	f7ff fee2 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff feb9 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <lcd_display+0x2b4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe9f 	bl	8000724 <lcd_write_string>
			back_condition = BACK_2;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <lcd_display+0x27c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e02e      	b.n	8000a4c <lcd_display+0x270>
		} else
		{
			lcd_set_cursor(0, 0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff feac 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <lcd_display+0x2a8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe92 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fea3 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <lcd_display+0x2b8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe89 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fe9a 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <lcd_display+0x2a8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe80 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000a24:	2100      	movs	r1, #0
 8000a26:	2001      	movs	r0, #1
 8000a28:	f7ff fe91 	bl	800074e <lcd_set_cursor>
			lcd_write_string(telephone_set);
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <lcd_display+0x2bc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe77 	bl	8000724 <lcd_write_string>

			delay(delay_second*2);
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <lcd_display+0x2c0>)
 8000a38:	f001 f832 	bl	8001aa0 <delay>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <lcd_display+0x2c4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f240 228a 	movw	r2, #650	; 0x28a
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34

			can_enter_key = true;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <lcd_display+0x2c8>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <lcd_display+0x280>)
 8000a4e:	2209      	movs	r2, #9
 8000a50:	601a      	str	r2, [r3, #0]
		break;
 8000a52:	e180      	b.n	8000d56 <lcd_display+0x57a>
 8000a54:	48000400 	.word	0x48000400
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	200000e4 	.word	0x200000e4
 8000a60:	20000001 	.word	0x20000001
 8000a64:	200000e8 	.word	0x200000e8
 8000a68:	200000e9 	.word	0x200000e9
 8000a6c:	080084b8 	.word	0x080084b8
 8000a70:	200000ea 	.word	0x200000ea
 8000a74:	080084c0 	.word	0x080084c0
 8000a78:	200000eb 	.word	0x200000eb
 8000a7c:	080084c8 	.word	0x080084c8
 8000a80:	200000ec 	.word	0x200000ec
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000000c 	.word	0x2000000c
 8000a8c:	20000010 	.word	0x20000010
 8000a90:	20000014 	.word	0x20000014
 8000a94:	20000018 	.word	0x20000018
 8000a98:	2000001c 	.word	0x2000001c
 8000a9c:	01e84800 	.word	0x01e84800
 8000aa0:	200003e8 	.word	0x200003e8
 8000aa4:	200000e0 	.word	0x200000e0
	case LCD_3:
		lcd_set_cursor(0, 0);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fe4f 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <lcd_display+0x584>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe35 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe46 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000ac2:	4ba8      	ldr	r3, [pc, #672]	; (8000d64 <lcd_display+0x588>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe2c 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000acc:	2100      	movs	r1, #0
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fe3d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ad4:	4ba2      	ldr	r3, [pc, #648]	; (8000d60 <lcd_display+0x584>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe23 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe34 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_bad);
 8000ae6:	4ba0      	ldr	r3, [pc, #640]	; (8000d68 <lcd_display+0x58c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe1a 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000af0:	4b9e      	ldr	r3, [pc, #632]	; (8000d6c <lcd_display+0x590>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000af6:	f000 ffc3 	bl	8001a80 <reset_buffer>

		delay(delay_second*2);
 8000afa:	489d      	ldr	r0, [pc, #628]	; (8000d70 <lcd_display+0x594>)
 8000afc:	f000 ffd0 	bl	8001aa0 <delay>

		lcd_number = LCD_2;
 8000b00:	4b9c      	ldr	r3, [pc, #624]	; (8000d74 <lcd_display+0x598>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
		break;
 8000b06:	e126      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_4:
		lcd_set_cursor(0, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fe1f 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <lcd_display+0x584>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fe05 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe16 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000b22:	4b95      	ldr	r3, [pc, #596]	; (8000d78 <lcd_display+0x59c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdfc 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe0d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b34:	4b8a      	ldr	r3, [pc, #552]	; (8000d60 <lcd_display+0x584>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fdf3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2001      	movs	r0, #1
 8000b42:	f7ff fe04 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_good);
 8000b46:	4b8d      	ldr	r3, [pc, #564]	; (8000d7c <lcd_display+0x5a0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fdea 	bl	8000724 <lcd_write_string>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8000b50:	4b8b      	ldr	r3, [pc, #556]	; (8000d80 <lcd_display+0x5a4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34

		can_enter_key = false;
 8000b5a:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <lcd_display+0x590>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000b60:	f000 ff8e 	bl	8001a80 <reset_buffer>

		delay(delay_second*2);
 8000b64:	4882      	ldr	r0, [pc, #520]	; (8000d70 <lcd_display+0x594>)
 8000b66:	f000 ff9b 	bl	8001aa0 <delay>

		lcd_number = LCD_5;
 8000b6a:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <lcd_display+0x598>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
		break;
 8000b70:	e0f1      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_5:
		lcd_set_cursor(0, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fdea 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <lcd_display+0x584>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fdd0 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fde1 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_1);
 8000b8c:	4b7d      	ldr	r3, [pc, #500]	; (8000d84 <lcd_display+0x5a8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fdc7 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fdd8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b9e:	4b70      	ldr	r3, [pc, #448]	; (8000d60 <lcd_display+0x584>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fdbe 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fdcf 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_2);
 8000bb0:	4b75      	ldr	r3, [pc, #468]	; (8000d88 <lcd_display+0x5ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fdb5 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000bba:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <lcd_display+0x598>)
 8000bbc:	2209      	movs	r2, #9
 8000bbe:	601a      	str	r2, [r3, #0]
		break;
 8000bc0:	e0c9      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_6:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 8000bc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc6:	4871      	ldr	r0, [pc, #452]	; (8000d8c <lcd_display+0x5b0>)
 8000bc8:	f002 f86a 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10e      	bne.n	8000bf0 <lcd_display+0x414>
		{
			lcd_clear();
 8000bd2:	f7ff fde1 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fdb8 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 8000bde:	4b6c      	ldr	r3, [pc, #432]	; (8000d90 <lcd_display+0x5b4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fd9e 	bl	8000724 <lcd_write_string>
			back_condition = BACK_6;
 8000be8:	4b6a      	ldr	r3, [pc, #424]	; (8000d94 <lcd_display+0x5b8>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e02e      	b.n	8000c4e <lcd_display+0x472>
		} else
		{
			lcd_set_cursor(0, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fdab 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000bf8:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <lcd_display+0x584>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd91 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fda2 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000c0a:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <lcd_display+0x588>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd88 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fd99 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000c1c:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <lcd_display+0x584>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fd7f 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000c26:	2100      	movs	r1, #0
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fd90 	bl	800074e <lcd_set_cursor>
			lcd_write_string(unlock);
 8000c2e:	4b5a      	ldr	r3, [pc, #360]	; (8000d98 <lcd_display+0x5bc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd76 	bl	8000724 <lcd_write_string>

			delay(delay_second*2);
 8000c38:	484d      	ldr	r0, [pc, #308]	; (8000d70 <lcd_display+0x594>)
 8000c3a:	f000 ff31 	bl	8001aa0 <delay>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000c3e:	4b50      	ldr	r3, [pc, #320]	; (8000d80 <lcd_display+0x5a4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f240 228a 	movw	r2, #650	; 0x28a
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34

			cmd_1 = true;
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <lcd_display+0x5c0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <lcd_display+0x598>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	601a      	str	r2, [r3, #0]
		break;
 8000c54:	e07f      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_7:
		lcd_set_cursor(0, 0);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fd78 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <lcd_display+0x584>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fd5e 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fd6f 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <lcd_display+0x59c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd55 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd66 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000c82:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <lcd_display+0x584>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd4c 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fd5d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(lock);
 8000c94:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <lcd_display+0x5c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd43 	bl	8000724 <lcd_write_string>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8000c9e:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <lcd_display+0x5a4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34

		cmd_2 = true;
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <lcd_display+0x5c8>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <lcd_display+0x598>)
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	601a      	str	r2, [r3, #0]
		break;
 8000cb4:	e04f      	b.n	8000d56 <lcd_display+0x57a>
	case LCD_8:
		if(HAL_GPIO_ReadPin(MAG_SWITCH_GPIO_Port, MAG_SWITCH_Pin) == GPIO_PIN_SET)
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	4834      	ldr	r0, [pc, #208]	; (8000d8c <lcd_display+0x5b0>)
 8000cbc:	f001 fff0 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10e      	bne.n	8000ce4 <lcd_display+0x508>
		{
			lcd_clear();
 8000cc6:	f7ff fd67 	bl	8000798 <lcd_clear>
			lcd_set_cursor(0, 0);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff fd3e 	bl	800074e <lcd_set_cursor>
			lcd_write_string(close_door);
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <lcd_display+0x5b4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd24 	bl	8000724 <lcd_write_string>
			back_condition = BACK_8;
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <lcd_display+0x5b8>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e02e      	b.n	8000d42 <lcd_display+0x566>
		} else
		{
			lcd_set_cursor(0, 0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fd31 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <lcd_display+0x584>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fd17 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(0, 0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fd28 	bl	800074e <lcd_set_cursor>
			lcd_write_string(door_closed);
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <lcd_display+0x588>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd0e 	bl	8000724 <lcd_write_string>

			lcd_set_cursor(1, 0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fd1f 	bl	800074e <lcd_set_cursor>
			lcd_write_string(clear_line);
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <lcd_display+0x584>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd05 	bl	8000724 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fd16 	bl	800074e <lcd_set_cursor>
			lcd_write_string(reset);
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <lcd_display+0x5cc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcfc 	bl	8000724 <lcd_write_string>

			delay(delay_second*2);
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <lcd_display+0x594>)
 8000d2e:	f000 feb7 	bl	8001aa0 <delay>

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <lcd_display+0x5a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f240 228a 	movw	r2, #650	; 0x28a
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34

			cmd_3 = true;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <lcd_display+0x5d0>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
		}

		lcd_number = DONE;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <lcd_display+0x598>)
 8000d44:	2209      	movs	r2, #9
 8000d46:	601a      	str	r2, [r3, #0]
		break;
 8000d48:	e005      	b.n	8000d56 <lcd_display+0x57a>
	case RST:
		delay(delay_second*2);
 8000d4a:	4809      	ldr	r0, [pc, #36]	; (8000d70 <lcd_display+0x594>)
 8000d4c:	f000 fea8 	bl	8001aa0 <delay>
		NVIC_SystemReset();
 8000d50:	f7ff fc24 	bl	800059c <__NVIC_SystemReset>
		break;
	default:
		break;
 8000d54:	bf00      	nop
	}

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000018 	.word	0x20000018
 8000d68:	20000020 	.word	0x20000020
 8000d6c:	200000e0 	.word	0x200000e0
 8000d70:	01e84800 	.word	0x01e84800
 8000d74:	200000e4 	.word	0x200000e4
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000024 	.word	0x20000024
 8000d80:	200003e8 	.word	0x200003e8
 8000d84:	20000028 	.word	0x20000028
 8000d88:	2000002c 	.word	0x2000002c
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	20000014 	.word	0x20000014
 8000d94:	20000004 	.word	0x20000004
 8000d98:	20000030 	.word	0x20000030
 8000d9c:	200000ea 	.word	0x200000ea
 8000da0:	20000034 	.word	0x20000034
 8000da4:	200000eb 	.word	0x200000eb
 8000da8:	20000038 	.word	0x20000038
 8000dac:	200000ec 	.word	0x200000ec

08000db0 <lcd_display_key>:

bool lcd_display_key(char *key_buffer, bool current_state_key)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
	static char *clear = "     ";

	if(current_state_key == true && can_enter_key == true)
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d015      	beq.n	8000dee <lcd_display_key+0x3e>
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <lcd_display_key+0x48>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d011      	beq.n	8000dee <lcd_display_key+0x3e>
	{
		lcd_set_cursor(1,11);
 8000dca:	210b      	movs	r1, #11
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fcbe 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <lcd_display_key+0x4c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fca4 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 11);
 8000ddc:	210b      	movs	r1, #11
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fcb5 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_buffer);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fc9d 	bl	8000724 <lcd_write_string>
		current_state_key = false;
 8000dea:	2300      	movs	r3, #0
 8000dec:	70fb      	strb	r3, [r7, #3]
	}
	return current_state_key;
 8000dee:	78fb      	ldrb	r3, [r7, #3]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000e0 	.word	0x200000e0
 8000dfc:	2000003c 	.word	0x2000003c

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a39      	ldr	r2, [pc, #228]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <MX_GPIO_Init+0x118>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000e64:	482d      	ldr	r0, [pc, #180]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e66:	f001 ff33 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2120      	movs	r1, #32
 8000e6e:	482c      	ldr	r0, [pc, #176]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000e70:	f001 ff2e 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	4824      	ldr	r0, [pc, #144]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e8a:	f001 fd5f 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_SWITCH_Pin;
 8000e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAG_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481f      	ldr	r0, [pc, #124]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000ea4:	f001 fd52 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 8000ea8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000ec0:	f001 fd44 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin;
 8000ec4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	480f      	ldr	r0, [pc, #60]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000ede:	f001 fd35 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODEM_ENABLE_Pin;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODEM_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000efa:	f001 fd27 	bl	800294c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	210c      	movs	r1, #12
 8000f02:	2028      	movs	r0, #40	; 0x28
 8000f04:	f001 fc6d 	bl	80027e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f08:	2028      	movs	r0, #40	; 0x28
 8000f0a:	f001 fc86 	bl	800281a <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000800 	.word	0x48000800
 8000f20:	48000400 	.word	0x48000400

08000f24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <MX_I2C1_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <MX_I2C1_Init+0x7c>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f60:	f001 fee6 	bl	8002d30 <HAL_I2C_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f6a:	f000 feb3 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f72:	f002 faa1 	bl	80034b8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 feaa 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_I2C1_Init+0x74>)
 8000f84:	f002 fae3 	bl	800354e <HAL_I2CEx_ConfigDigitalFilter>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 fea1 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000f0 	.word	0x200000f0
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	10909cec 	.word	0x10909cec

08000fa4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 fdb9 	bl	8007b3c <memset>
  if(i2cHandle->Instance==I2C1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a21      	ldr	r2, [pc, #132]	; (8001054 <HAL_I2C_MspInit+0xb0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d13a      	bne.n	800104a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 f9d3 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f000 fe72 	bl	8001cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	; 0xc0
 800100a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100e:	2312      	movs	r3, #18
 8001010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800102a:	4619      	mov	r1, r3
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_I2C_MspInit+0xb8>)
 800102e:	f001 fc8d 	bl	800294c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_I2C_MspInit+0xb4>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800104a:	bf00      	nop
 800104c:	37b0      	adds	r7, #176	; 0xb0
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40005400 	.word	0x40005400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_IWDG_Init+0x34>)
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <MX_IWDG_Init+0x38>)
 8001068:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_IWDG_Init+0x34>)
 800106c:	2204      	movs	r2, #4
 800106e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_IWDG_Init+0x34>)
 8001072:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001076:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_IWDG_Init+0x34>)
 800107a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800107e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_IWDG_Init+0x34>)
 8001082:	f002 fab0 	bl	80035e6 <HAL_IWDG_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800108c:	f000 fe22 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000144 	.word	0x20000144
 8001098:	40003000 	.word	0x40003000

0800109c <line_append_debug>:
void send_SMS(void);
void delay(uint32_t iterations);
void add_digit(char digit);

void line_append_debug(uint8_t value)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	if(value == '\r' || value == '\n')
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b0d      	cmp	r3, #13
 80010aa:	d002      	beq.n	80010b2 <line_append_debug+0x16>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d16c      	bne.n	800118c <line_append_debug+0xf0>
	{
		if(line_lenght_debug >= 0)
		{
			if(strncmp(line_buffer_debug, "B ", 2) == 0)
 80010b2:	2202      	movs	r2, #2
 80010b4:	493f      	ldr	r1, [pc, #252]	; (80011b4 <line_append_debug+0x118>)
 80010b6:	4840      	ldr	r0, [pc, #256]	; (80011b8 <line_append_debug+0x11c>)
 80010b8:	f006 fd48 	bl	8007b4c <strncmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d127      	bne.n	8001112 <line_append_debug+0x76>
			{
				strncpy(line_buffer_debug_BLE, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 80010c2:	224e      	movs	r2, #78	; 0x4e
 80010c4:	493d      	ldr	r1, [pc, #244]	; (80011bc <line_append_debug+0x120>)
 80010c6:	483e      	ldr	r0, [pc, #248]	; (80011c0 <line_append_debug+0x124>)
 80010c8:	f006 fd52 	bl	8007b70 <strncpy>
				line_lenght_debug_BLE = line_lenght_debug - 2;
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <line_append_debug+0x128>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b02      	subs	r3, #2
 80010d2:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <line_append_debug+0x12c>)
 80010d4:	6013      	str	r3, [r2, #0]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\r';
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <line_append_debug+0x12c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	493a      	ldr	r1, [pc, #232]	; (80011c8 <line_append_debug+0x12c>)
 80010de:	600a      	str	r2, [r1, #0]
 80010e0:	4a37      	ldr	r2, [pc, #220]	; (80011c0 <line_append_debug+0x124>)
 80010e2:	210d      	movs	r1, #13
 80010e4:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\n';
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <line_append_debug+0x12c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	4936      	ldr	r1, [pc, #216]	; (80011c8 <line_append_debug+0x12c>)
 80010ee:	600a      	str	r2, [r1, #0]
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <line_append_debug+0x124>)
 80010f2:	210a      	movs	r1, #10
 80010f4:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE] = '\0';
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <line_append_debug+0x12c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <line_append_debug+0x124>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)line_buffer_debug_BLE, line_lenght_debug_BLE);
 8001100:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <line_append_debug+0x12c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	492d      	ldr	r1, [pc, #180]	; (80011c0 <line_append_debug+0x124>)
 800110a:	4830      	ldr	r0, [pc, #192]	; (80011cc <line_append_debug+0x130>)
 800110c:	f005 f8f6 	bl	80062fc <HAL_UART_Transmit_IT>
 8001110:	e026      	b.n	8001160 <line_append_debug+0xc4>
			} else if (strncmp(line_buffer_debug, "G ", 2) == 0)
 8001112:	2202      	movs	r2, #2
 8001114:	492e      	ldr	r1, [pc, #184]	; (80011d0 <line_append_debug+0x134>)
 8001116:	4828      	ldr	r0, [pc, #160]	; (80011b8 <line_append_debug+0x11c>)
 8001118:	f006 fd18 	bl	8007b4c <strncmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11e      	bne.n	8001160 <line_append_debug+0xc4>
			{
				strncpy(line_buffer_debug_GSM, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 8001122:	224e      	movs	r2, #78	; 0x4e
 8001124:	4925      	ldr	r1, [pc, #148]	; (80011bc <line_append_debug+0x120>)
 8001126:	482b      	ldr	r0, [pc, #172]	; (80011d4 <line_append_debug+0x138>)
 8001128:	f006 fd22 	bl	8007b70 <strncpy>
				line_lenght_debug_GSM = line_lenght_debug - 2;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <line_append_debug+0x128>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b02      	subs	r3, #2
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <line_append_debug+0x13c>)
 8001134:	6013      	str	r3, [r2, #0]
				line_buffer_debug_GSM[line_lenght_debug_GSM++] = '\n';
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <line_append_debug+0x13c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	4926      	ldr	r1, [pc, #152]	; (80011d8 <line_append_debug+0x13c>)
 800113e:	600a      	str	r2, [r1, #0]
 8001140:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <line_append_debug+0x138>)
 8001142:	210a      	movs	r1, #10
 8001144:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_GSM[line_lenght_debug_GSM] = '\0';
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <line_append_debug+0x13c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <line_append_debug+0x138>)
 800114c:	2100      	movs	r1, #0
 800114e:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)line_buffer_debug_GSM, line_lenght_debug_GSM);
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <line_append_debug+0x13c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	491e      	ldr	r1, [pc, #120]	; (80011d4 <line_append_debug+0x138>)
 800115a:	4820      	ldr	r0, [pc, #128]	; (80011dc <line_append_debug+0x140>)
 800115c:	f005 f8ce 	bl	80062fc <HAL_UART_Transmit_IT>
			}
			line_buffer_debug[line_lenght_debug] = '\0';
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <line_append_debug+0x128>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <line_append_debug+0x11c>)
 8001166:	2100      	movs	r1, #0
 8001168:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <line_append_debug+0x144>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_debug, strlen(line_buffer_debug));
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <line_append_debug+0x11c>)
 8001172:	f7ff f837 	bl	80001e4 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	490e      	ldr	r1, [pc, #56]	; (80011b8 <line_append_debug+0x11c>)
 800117e:	4819      	ldr	r0, [pc, #100]	; (80011e4 <line_append_debug+0x148>)
 8001180:	f005 f8bc 	bl	80062fc <HAL_UART_Transmit_IT>
			line_lenght_debug = 0;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <line_append_debug+0x128>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		if(line_lenght_debug >= 0)
 800118a:	e00f      	b.n	80011ac <line_append_debug+0x110>
		}
	} else
	{
		if(line_lenght_debug >= LINE_MAX_LENGTH)
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <line_append_debug+0x128>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b4f      	cmp	r3, #79	; 0x4f
 8001192:	d902      	bls.n	800119a <line_append_debug+0xfe>
		{
			line_lenght_debug = 0;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <line_append_debug+0x128>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
		}
		line_buffer_debug[line_lenght_debug++] = value;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <line_append_debug+0x128>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	4908      	ldr	r1, [pc, #32]	; (80011c4 <line_append_debug+0x128>)
 80011a2:	600a      	str	r2, [r1, #0]
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <line_append_debug+0x11c>)
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	54ca      	strb	r2, [r1, r3]
	}
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080085a0 	.word	0x080085a0
 80011b8:	20000154 	.word	0x20000154
 80011bc:	20000156 	.word	0x20000156
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	200002f8 	.word	0x200002f8
 80011c8:	200002fc 	.word	0x200002fc
 80011cc:	20000544 	.word	0x20000544
 80011d0:	080085a4 	.word	0x080085a4
 80011d4:	200001a8 	.word	0x200001a8
 80011d8:	20000300 	.word	0x20000300
 80011dc:	20000434 	.word	0x20000434
 80011e0:	2000030c 	.word	0x2000030c
 80011e4:	200004bc 	.word	0x200004bc

080011e8 <line_append_bluetooth>:

void line_append_bluetooth(uint8_t value)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]

	if(value == '\r' || value == '\n')
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b0d      	cmp	r3, #13
 80011f6:	d002      	beq.n	80011fe <line_append_bluetooth+0x16>
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d119      	bne.n	8001232 <line_append_bluetooth+0x4a>
	{
		if(line_lenght_bluetooth > 0)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <line_append_bluetooth+0x104>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d06e      	beq.n	80012e4 <line_append_bluetooth+0xfc>
		{
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <line_append_bluetooth+0x104>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <line_append_bluetooth+0x108>)
 800120c:	2100      	movs	r1, #0
 800120e:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8001210:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <line_append_bluetooth+0x10c>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 8001216:	4836      	ldr	r0, [pc, #216]	; (80012f0 <line_append_bluetooth+0x108>)
 8001218:	f7fe ffe4 	bl	80001e4 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	4933      	ldr	r1, [pc, #204]	; (80012f0 <line_append_bluetooth+0x108>)
 8001224:	4834      	ldr	r0, [pc, #208]	; (80012f8 <line_append_bluetooth+0x110>)
 8001226:	f005 f869 	bl	80062fc <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <line_append_bluetooth+0x104>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
		if(line_lenght_bluetooth > 0)
 8001230:	e058      	b.n	80012e4 <line_append_bluetooth+0xfc>
		}
	} else if(value == '#')
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b23      	cmp	r3, #35	; 0x23
 8001236:	d124      	bne.n	8001282 <line_append_bluetooth+0x9a>
	{
		if(line_lenght_bluetooth > 0)
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <line_append_bluetooth+0x104>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d051      	beq.n	80012e4 <line_append_bluetooth+0xfc>
		{
			strncpy(phone_number, line_buffer_bluetooth, 9);
 8001240:	2209      	movs	r2, #9
 8001242:	492b      	ldr	r1, [pc, #172]	; (80012f0 <line_append_bluetooth+0x108>)
 8001244:	482d      	ldr	r0, [pc, #180]	; (80012fc <line_append_bluetooth+0x114>)
 8001246:	f006 fc93 	bl	8007b70 <strncpy>
			phone_number[9] = '\0';
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <line_append_bluetooth+0x114>)
 800124c:	2200      	movs	r2, #0
 800124e:	725a      	strb	r2, [r3, #9]
			if_send_end_line = true;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <line_append_bluetooth+0x10c>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
			if_phone_number_set = true;
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <line_append_bluetooth+0x118>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
			if_phone_number_set_latch = true;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <line_append_bluetooth+0x11c>)
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)phone_number, strlen(phone_number));
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <line_append_bluetooth+0x114>)
 8001264:	f7fe ffbe 	bl	80001e4 <strlen>
 8001268:	4603      	mov	r3, r0
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4923      	ldr	r1, [pc, #140]	; (80012fc <line_append_bluetooth+0x114>)
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <line_append_bluetooth+0x110>)
 8001272:	f005 f843 	bl	80062fc <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <line_append_bluetooth+0x104>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

			send_SMS();
 800127c:	f000 f91c 	bl	80014b8 <send_SMS>
		{
			line_lenght_bluetooth = 0;
		}
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
	}
}
 8001280:	e030      	b.n	80012e4 <line_append_bluetooth+0xfc>
	} else if(value == '*')
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b2a      	cmp	r3, #42	; 0x2a
 8001286:	d11d      	bne.n	80012c4 <line_append_bluetooth+0xdc>
		if(line_lenght_bluetooth > 0)
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <line_append_bluetooth+0x104>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d029      	beq.n	80012e4 <line_append_bluetooth+0xfc>
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <line_append_bluetooth+0x104>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <line_append_bluetooth+0x108>)
 8001296:	2100      	movs	r1, #0
 8001298:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <line_append_bluetooth+0x10c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
			strcpy(open_close_cmd, line_buffer_bluetooth);
 80012a0:	4913      	ldr	r1, [pc, #76]	; (80012f0 <line_append_bluetooth+0x108>)
 80012a2:	4819      	ldr	r0, [pc, #100]	; (8001308 <line_append_bluetooth+0x120>)
 80012a4:	f006 fca4 	bl	8007bf0 <strcpy>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <line_append_bluetooth+0x108>)
 80012aa:	f7fe ff9b 	bl	80001e4 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	490e      	ldr	r1, [pc, #56]	; (80012f0 <line_append_bluetooth+0x108>)
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <line_append_bluetooth+0x110>)
 80012b8:	f005 f820 	bl	80062fc <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <line_append_bluetooth+0x104>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	e00f      	b.n	80012e4 <line_append_bluetooth+0xfc>
		if(line_lenght_bluetooth >= LINE_MAX_LENGTH)
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <line_append_bluetooth+0x104>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b4f      	cmp	r3, #79	; 0x4f
 80012ca:	d902      	bls.n	80012d2 <line_append_bluetooth+0xea>
			line_lenght_bluetooth = 0;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <line_append_bluetooth+0x104>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <line_append_bluetooth+0x104>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <line_append_bluetooth+0x104>)
 80012da:	600a      	str	r2, [r1, #0]
 80012dc:	4904      	ldr	r1, [pc, #16]	; (80012f0 <line_append_bluetooth+0x108>)
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	54ca      	strb	r2, [r1, r3]
}
 80012e2:	e7ff      	b.n	80012e4 <line_append_bluetooth+0xfc>
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000304 	.word	0x20000304
 80012f0:	20000250 	.word	0x20000250
 80012f4:	2000030c 	.word	0x2000030c
 80012f8:	200004bc 	.word	0x200004bc
 80012fc:	20000314 	.word	0x20000314
 8001300:	2000030d 	.word	0x2000030d
 8001304:	2000030e 	.word	0x2000030e
 8001308:	20000330 	.word	0x20000330

0800130c <line_append_gsm>:

void line_append_gsm(uint8_t value)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	if(line_lenght_gsm < LINE_MAX_LENGTH)
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <line_append_gsm+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b4f      	cmp	r3, #79	; 0x4f
 800131c:	d80d      	bhi.n	800133a <line_append_gsm+0x2e>
	{
		line_buffer_gsm[line_lenght_gsm++] = value;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <line_append_gsm+0x3c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4908      	ldr	r1, [pc, #32]	; (8001348 <line_append_gsm+0x3c>)
 8001326:	600a      	str	r2, [r1, #0]
 8001328:	4908      	ldr	r1, [pc, #32]	; (800134c <line_append_gsm+0x40>)
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	54ca      	strb	r2, [r1, r3]
		last_byte_time = HAL_GetTick();
 800132e:	f001 f94d 	bl	80025cc <HAL_GetTick>
 8001332:	4603      	mov	r3, r0
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <line_append_gsm+0x44>)
 8001336:	6013      	str	r3, [r2, #0]
	} else
	{
		line_lenght_gsm = 0;
	}
}
 8001338:	e002      	b.n	8001340 <line_append_gsm+0x34>
		line_lenght_gsm = 0;
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <line_append_gsm+0x3c>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000308 	.word	0x20000308
 800134c:	200002a4 	.word	0x200002a4
 8001350:	20000310 	.word	0x20000310

08001354 <check_timeout_gsm>:

void check_timeout_gsm(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	if(line_lenght_gsm > 0 && (HAL_GetTick() - last_byte_time > TIMEOUT_MS))
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <check_timeout_gsm+0x44>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d019      	beq.n	8001394 <check_timeout_gsm+0x40>
 8001360:	f001 f934 	bl	80025cc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <check_timeout_gsm+0x48>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b32      	cmp	r3, #50	; 0x32
 800136e:	d911      	bls.n	8001394 <check_timeout_gsm+0x40>
	{
		line_buffer_gsm[line_lenght_gsm] = '\0';
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <check_timeout_gsm+0x44>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <check_timeout_gsm+0x4c>)
 8001376:	2100      	movs	r1, #0
 8001378:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_gsm, strlen(line_buffer_gsm));
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <check_timeout_gsm+0x4c>)
 800137c:	f7fe ff32 	bl	80001e4 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4906      	ldr	r1, [pc, #24]	; (80013a0 <check_timeout_gsm+0x4c>)
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <check_timeout_gsm+0x50>)
 800138a:	f004 ffb7 	bl	80062fc <HAL_UART_Transmit_IT>
		line_lenght_gsm = 0;
 800138e:	4b02      	ldr	r3, [pc, #8]	; (8001398 <check_timeout_gsm+0x44>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
	}
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000308 	.word	0x20000308
 800139c:	20000310 	.word	0x20000310
 80013a0:	200002a4 	.word	0x200002a4
 80013a4:	200004bc 	.word	0x200004bc

080013a8 <send_end_line>:

void send_end_line(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	static char end_signs[3] = "\r\n\0";

	if(if_send_end_line == true)
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <send_end_line+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <send_end_line+0x1c>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)end_signs, 3);
 80013b4:	2203      	movs	r2, #3
 80013b6:	4905      	ldr	r1, [pc, #20]	; (80013cc <send_end_line+0x24>)
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <send_end_line+0x28>)
 80013ba:	f004 ff9f 	bl	80062fc <HAL_UART_Transmit_IT>
		if_send_end_line = false;
 80013be:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <send_end_line+0x20>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	}
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000030c 	.word	0x2000030c
 80013cc:	20000040 	.word	0x20000040
 80013d0:	200004bc 	.word	0x200004bc

080013d4 <HAL_UART_RxCpltCallback>:

uint8_t uart2_rx_buffer, uart1_rx_buffer, uart3_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_UART_RxCpltCallback+0x68>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10a      	bne.n	80013fa <HAL_UART_RxCpltCallback+0x26>
	{
		line_append_debug(uart2_rx_buffer);
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_RxCpltCallback+0x6c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe57 	bl	800109c <line_append_debug>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_UART_RxCpltCallback+0x6c>)
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <HAL_UART_RxCpltCallback+0x68>)
 80013f4:	f004 ffe0 	bl	80063b8 <HAL_UART_Receive_IT>
	else if(huart == &huart3)
	{
		line_append_bluetooth(uart3_rx_buffer);
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
	}
}
 80013f8:	e01c      	b.n	8001434 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_UART_RxCpltCallback+0x70>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10a      	bne.n	8001418 <HAL_UART_RxCpltCallback+0x44>
		line_append_gsm(uart1_rx_buffer);
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_UART_RxCpltCallback+0x74>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff80 	bl	800130c <line_append_gsm>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <HAL_UART_RxCpltCallback+0x74>)
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <HAL_UART_RxCpltCallback+0x70>)
 8001412:	f004 ffd1 	bl	80063b8 <HAL_UART_Receive_IT>
}
 8001416:	e00d      	b.n	8001434 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_UART_RxCpltCallback+0x78>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d109      	bne.n	8001434 <HAL_UART_RxCpltCallback+0x60>
		line_append_bluetooth(uart3_rx_buffer);
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_UART_RxCpltCallback+0x7c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fedf 	bl	80011e8 <line_append_bluetooth>
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 800142a:	2201      	movs	r2, #1
 800142c:	4908      	ldr	r1, [pc, #32]	; (8001450 <HAL_UART_RxCpltCallback+0x7c>)
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <HAL_UART_RxCpltCallback+0x78>)
 8001430:	f004 ffc2 	bl	80063b8 <HAL_UART_Receive_IT>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200004bc 	.word	0x200004bc
 8001440:	20000337 	.word	0x20000337
 8001444:	20000434 	.word	0x20000434
 8001448:	20000338 	.word	0x20000338
 800144c:	20000544 	.word	0x20000544
 8001450:	20000339 	.word	0x20000339

08001454 <access_key_draw>:

void access_key_draw(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	static uint32_t random_number;
	static uint16_t access_code;

	if(if_phone_number_set == true)
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <access_key_draw+0x48>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01b      	beq.n	8001498 <access_key_draw+0x44>
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8001460:	490f      	ldr	r1, [pc, #60]	; (80014a0 <access_key_draw+0x4c>)
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <access_key_draw+0x50>)
 8001464:	f003 fcb5 	bl	8004dd2 <HAL_RNG_GenerateRandomNumber>
		access_code = random_number % 10000;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <access_key_draw+0x4c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <access_key_draw+0x54>)
 800146e:	fba3 1302 	umull	r1, r3, r3, r2
 8001472:	0b5b      	lsrs	r3, r3, #13
 8001474:	f242 7110 	movw	r1, #10000	; 0x2710
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <access_key_draw+0x58>)
 8001482:	801a      	strh	r2, [r3, #0]
		sprintf(access_key, "%04u", access_code);
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <access_key_draw+0x58>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <access_key_draw+0x5c>)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <access_key_draw+0x60>)
 800148e:	f006 fb35 	bl	8007afc <siprintf>
		if_phone_number_set = false;
 8001492:	4b02      	ldr	r3, [pc, #8]	; (800149c <access_key_draw+0x48>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
	}
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000030d 	.word	0x2000030d
 80014a0:	20000364 	.word	0x20000364
 80014a4:	200003b0 	.word	0x200003b0
 80014a8:	d1b71759 	.word	0xd1b71759
 80014ac:	20000368 	.word	0x20000368
 80014b0:	080085a8 	.word	0x080085a8
 80014b4:	20000320 	.word	0x20000320

080014b8 <send_SMS>:
}sender_state;

int message_number = MESSAGE_1;

void send_SMS(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	static char message_cmgf[] = "AT+CMGF=1\r";
	static char message_cscs[] = "AT+CSCS=\"GSM\"\r";
	static char message_cmgs[31];
	sprintf(message_cmgs, "AT+CMGS=\"+48%s\"\r", phone_number);
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <send_SMS+0xcc>)
 80014be:	4932      	ldr	r1, [pc, #200]	; (8001588 <send_SMS+0xd0>)
 80014c0:	4832      	ldr	r0, [pc, #200]	; (800158c <send_SMS+0xd4>)
 80014c2:	f006 fb1b 	bl	8007afc <siprintf>
	access_key_draw();
 80014c6:	f7ff ffc5 	bl	8001454 <access_key_draw>
	static char message_message[34];
	sprintf(message_message, "Kod dostepu do skrytki: %s", access_key);
 80014ca:	4a31      	ldr	r2, [pc, #196]	; (8001590 <send_SMS+0xd8>)
 80014cc:	4931      	ldr	r1, [pc, #196]	; (8001594 <send_SMS+0xdc>)
 80014ce:	4832      	ldr	r0, [pc, #200]	; (8001598 <send_SMS+0xe0>)
 80014d0:	f006 fb14 	bl	8007afc <siprintf>
	static char message_ctrlz = 0x1A;

	delay(100);
 80014d4:	2064      	movs	r0, #100	; 0x64
 80014d6:	f000 fae3 	bl	8001aa0 <delay>

	switch(message_number)
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <send_SMS+0xe4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d84d      	bhi.n	800157e <send_SMS+0xc6>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <send_SMS+0x30>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	080014fd 	.word	0x080014fd
 80014ec:	08001519 	.word	0x08001519
 80014f0:	08001535 	.word	0x08001535
 80014f4:	08001551 	.word	0x08001551
 80014f8:	0800156d 	.word	0x0800156d
	{
	case MESSAGE_1:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgf, strlen(message_cmgf));
 80014fc:	4828      	ldr	r0, [pc, #160]	; (80015a0 <send_SMS+0xe8>)
 80014fe:	f7fe fe71 	bl	80001e4 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4925      	ldr	r1, [pc, #148]	; (80015a0 <send_SMS+0xe8>)
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <send_SMS+0xec>)
 800150c:	f004 fef6 	bl	80062fc <HAL_UART_Transmit_IT>
		message_number = MESSAGE_2;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <send_SMS+0xe4>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
		break;
 8001516:	e033      	b.n	8001580 <send_SMS+0xc8>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cscs, strlen(message_cscs));
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <send_SMS+0xf0>)
 800151a:	f7fe fe63 	bl	80001e4 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	4920      	ldr	r1, [pc, #128]	; (80015a8 <send_SMS+0xf0>)
 8001526:	481f      	ldr	r0, [pc, #124]	; (80015a4 <send_SMS+0xec>)
 8001528:	f004 fee8 	bl	80062fc <HAL_UART_Transmit_IT>
		message_number = MESSAGE_3;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <send_SMS+0xe4>)
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
		break;
 8001532:	e025      	b.n	8001580 <send_SMS+0xc8>
	case MESSAGE_3:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgs, strlen(message_cmgs));
 8001534:	4815      	ldr	r0, [pc, #84]	; (800158c <send_SMS+0xd4>)
 8001536:	f7fe fe55 	bl	80001e4 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	4912      	ldr	r1, [pc, #72]	; (800158c <send_SMS+0xd4>)
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <send_SMS+0xec>)
 8001544:	f004 feda 	bl	80062fc <HAL_UART_Transmit_IT>
		message_number = MESSAGE_4;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <send_SMS+0xe4>)
 800154a:	2203      	movs	r2, #3
 800154c:	601a      	str	r2, [r3, #0]
		break;
 800154e:	e017      	b.n	8001580 <send_SMS+0xc8>
	case MESSAGE_4:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_message, strlen(message_message));
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <send_SMS+0xe0>)
 8001552:	f7fe fe47 	bl	80001e4 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29b      	uxth	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	490e      	ldr	r1, [pc, #56]	; (8001598 <send_SMS+0xe0>)
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <send_SMS+0xec>)
 8001560:	f004 fecc 	bl	80062fc <HAL_UART_Transmit_IT>
		message_number = MESSAGE_5;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <send_SMS+0xe4>)
 8001566:	2204      	movs	r2, #4
 8001568:	601a      	str	r2, [r3, #0]
		break;
 800156a:	e009      	b.n	8001580 <send_SMS+0xc8>
	case MESSAGE_5:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&message_ctrlz, 1);
 800156c:	2201      	movs	r2, #1
 800156e:	490f      	ldr	r1, [pc, #60]	; (80015ac <send_SMS+0xf4>)
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <send_SMS+0xec>)
 8001572:	f004 fec3 	bl	80062fc <HAL_UART_Transmit_IT>
		message_number = DONE;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <send_SMS+0xe4>)
 8001578:	2205      	movs	r2, #5
 800157a:	601a      	str	r2, [r3, #0]
		break;
 800157c:	e000      	b.n	8001580 <send_SMS+0xc8>
	default:
		break;
 800157e:	bf00      	nop
	}
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000314 	.word	0x20000314
 8001588:	080085b0 	.word	0x080085b0
 800158c:	2000036c 	.word	0x2000036c
 8001590:	20000320 	.word	0x20000320
 8001594:	080085c4 	.word	0x080085c4
 8001598:	2000038c 	.word	0x2000038c
 800159c:	2000033c 	.word	0x2000033c
 80015a0:	20000044 	.word	0x20000044
 80015a4:	20000434 	.word	0x20000434
 80015a8:	20000050 	.word	0x20000050
 80015ac:	2000005f 	.word	0x2000005f

080015b0 <send_AT_init>:

void send_AT_init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	static char AT_init[] = "AT\r\n";

	HAL_UART_Transmit_IT(&huart1, (uint8_t*)AT_init, strlen(AT_init));
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <send_AT_init+0x44>)
 80015b6:	f7fe fe15 	bl	80001e4 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29b      	uxth	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <send_AT_init+0x44>)
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <send_AT_init+0x48>)
 80015c4:	f004 fe9a 	bl	80062fc <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)AT_init, strlen(AT_init));
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <send_AT_init+0x44>)
 80015ca:	f7fe fe0b 	bl	80001e4 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <send_AT_init+0x44>)
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <send_AT_init+0x4c>)
 80015d8:	f004 fe90 	bl	80062fc <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AT_init, strlen(AT_init));
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <send_AT_init+0x44>)
 80015de:	f7fe fe01 	bl	80001e4 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4902      	ldr	r1, [pc, #8]	; (80015f4 <send_AT_init+0x44>)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <send_AT_init+0x50>)
 80015ec:	f004 fe86 	bl	80062fc <HAL_UART_Transmit_IT>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000060 	.word	0x20000060
 80015f8:	20000434 	.word	0x20000434
 80015fc:	200004bc 	.word	0x200004bc
 8001600:	20000544 	.word	0x20000544

08001604 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_UART_TxCpltCallback+0x30>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d105      	bne.n	8001620 <HAL_UART_TxCpltCallback+0x1c>
	{
		if(if_phone_number_set_latch == true)
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_UART_TxCpltCallback+0x34>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_TxCpltCallback+0x1c>
		{
			send_SMS();
 800161c:	f7ff ff4c 	bl	80014b8 <send_SMS>
		}
	}
	if(huart == &huart2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a06      	ldr	r2, [pc, #24]	; (800163c <HAL_UART_TxCpltCallback+0x38>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_UART_TxCpltCallback+0x28>
	{
		send_end_line();
 8001628:	f7ff febe 	bl	80013a8 <send_end_line>
	}
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000434 	.word	0x20000434
 8001638:	2000030e 	.word	0x2000030e
 800163c:	200004bc 	.word	0x200004bc

08001640 <HAL_GPIO_EXTI_Callback>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
volatile uint8_t pressed_key = '\0';

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800164a:	f000 ffbf 	bl	80025cc <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	4aaf      	ldr	r2, [pc, #700]	; (8001910 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001652:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 200 )
 8001654:	4bae      	ldr	r3, [pc, #696]	; (8001910 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4bae      	ldr	r3, [pc, #696]	; (8001914 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2bc8      	cmp	r3, #200	; 0xc8
 8001660:	f240 81d9 	bls.w	8001a16 <HAL_GPIO_EXTI_Callback+0x3d6>
	{
		GPIO_InitStructPrivate.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 8001664:	4bac      	ldr	r3, [pc, #688]	; (8001918 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001666:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800166a:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800166c:	4baa      	ldr	r3, [pc, #680]	; (8001918 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001672:	4ba9      	ldr	r3, [pc, #676]	; (8001918 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	4ba7      	ldr	r3, [pc, #668]	; (8001918 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 800167e:	49a6      	ldr	r1, [pc, #664]	; (8001918 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001680:	48a6      	ldr	r0, [pc, #664]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001682:	f001 f963 	bl	800294c <HAL_GPIO_Init>

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2140      	movs	r1, #64	; 0x40
 800168a:	48a5      	ldr	r0, [pc, #660]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800168c:	f001 fb20 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	48a2      	ldr	r0, [pc, #648]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001696:	f001 fb1b 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	489f      	ldr	r0, [pc, #636]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016a2:	f001 fb15 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ac:	489c      	ldr	r0, [pc, #624]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016ae:	f001 fb0f 	bl	8002cd0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b8:	d10b      	bne.n	80016d2 <HAL_GPIO_EXTI_Callback+0x92>
 80016ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016be:	4897      	ldr	r0, [pc, #604]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016c0:	f001 faee 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_EXTI_Callback+0x92>
		{
			pressed_key = '1';
 80016ca:	4b96      	ldr	r3, [pc, #600]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016cc:	2231      	movs	r2, #49	; 0x31
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e02e      	b.n	8001730 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016d8:	d10b      	bne.n	80016f2 <HAL_GPIO_EXTI_Callback+0xb2>
 80016da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016de:	488f      	ldr	r0, [pc, #572]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016e0:	f001 fade 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			pressed_key = '2';
 80016ea:	4b8e      	ldr	r3, [pc, #568]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016ec:	2232      	movs	r2, #50	; 0x32
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e01e      	b.n	8001730 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016f8:	d10b      	bne.n	8001712 <HAL_GPIO_EXTI_Callback+0xd2>
 80016fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fe:	4887      	ldr	r0, [pc, #540]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001700:	f001 face 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_EXTI_Callback+0xd2>
		{
			pressed_key = '3';
 800170a:	4b86      	ldr	r3, [pc, #536]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800170c:	2233      	movs	r2, #51	; 0x33
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001718:	d10a      	bne.n	8001730 <HAL_GPIO_EXTI_Callback+0xf0>
 800171a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171e:	487f      	ldr	r0, [pc, #508]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001720:	f001 fabe 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_GPIO_EXTI_Callback+0xf0>
		{
			pressed_key = 'A';
 800172a:	4b7e      	ldr	r3, [pc, #504]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800172c:	2241      	movs	r2, #65	; 0x41
 800172e:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	487a      	ldr	r0, [pc, #488]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001736:	f001 facb 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 800173a:	2201      	movs	r2, #1
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	4878      	ldr	r0, [pc, #480]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001740:	f001 fac6 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174a:	4875      	ldr	r0, [pc, #468]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800174c:	f001 fac0 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001756:	4872      	ldr	r0, [pc, #456]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001758:	f001 faba 	bl	8002cd0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001762:	d10b      	bne.n	800177c <HAL_GPIO_EXTI_Callback+0x13c>
 8001764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001768:	486c      	ldr	r0, [pc, #432]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 800176a:	f001 fa99 	bl	8002ca0 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_EXTI_Callback+0x13c>
		{
			pressed_key = '4';
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001776:	2234      	movs	r2, #52	; 0x34
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e02e      	b.n	80017da <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001782:	d10b      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x15c>
 8001784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001788:	4864      	ldr	r0, [pc, #400]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 800178a:	f001 fa89 	bl	8002ca0 <HAL_GPIO_ReadPin>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_EXTI_Callback+0x15c>
		{
			pressed_key = '5';
 8001794:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001796:	2235      	movs	r2, #53	; 0x35
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e01e      	b.n	80017da <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017a2:	d10b      	bne.n	80017bc <HAL_GPIO_EXTI_Callback+0x17c>
 80017a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a8:	485c      	ldr	r0, [pc, #368]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017aa:	f001 fa79 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_EXTI_Callback+0x17c>
		{
			pressed_key = '6';
 80017b4:	4b5b      	ldr	r3, [pc, #364]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80017b6:	2236      	movs	r2, #54	; 0x36
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e00e      	b.n	80017da <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c2:	d10a      	bne.n	80017da <HAL_GPIO_EXTI_Callback+0x19a>
 80017c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c8:	4854      	ldr	r0, [pc, #336]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80017ca:	f001 fa69 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_GPIO_EXTI_Callback+0x19a>
		{
			pressed_key = 'B';
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80017d6:	2242      	movs	r2, #66	; 0x42
 80017d8:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4850      	ldr	r0, [pc, #320]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017e0:	f001 fa76 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	484d      	ldr	r0, [pc, #308]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017ea:	f001 fa71 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	484a      	ldr	r0, [pc, #296]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80017f6:	f001 fa6b 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001800:	4847      	ldr	r0, [pc, #284]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001802:	f001 fa65 	bl	8002cd0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800180c:	d10b      	bne.n	8001826 <HAL_GPIO_EXTI_Callback+0x1e6>
 800180e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001812:	4842      	ldr	r0, [pc, #264]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001814:	f001 fa44 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_EXTI_Callback+0x1e6>
		{
			pressed_key = '7';
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001820:	2237      	movs	r2, #55	; 0x37
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e02e      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182c:	d10b      	bne.n	8001846 <HAL_GPIO_EXTI_Callback+0x206>
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	483a      	ldr	r0, [pc, #232]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001834:	f001 fa34 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_EXTI_Callback+0x206>
		{
			pressed_key = '8';
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001840:	2238      	movs	r2, #56	; 0x38
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e01e      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800184c:	d10b      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x226>
 800184e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001852:	4832      	ldr	r0, [pc, #200]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001854:	f001 fa24 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_EXTI_Callback+0x226>
		{
			pressed_key = '9';
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001860:	2239      	movs	r2, #57	; 0x39
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e00e      	b.n	8001884 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800186c:	d10a      	bne.n	8001884 <HAL_GPIO_EXTI_Callback+0x244>
 800186e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001872:	482a      	ldr	r0, [pc, #168]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001874:	f001 fa14 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0x244>
		{
			pressed_key = 'C';
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001880:	2243      	movs	r2, #67	; 0x43
 8001882:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	4825      	ldr	r0, [pc, #148]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800188a:	f001 fa21 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001894:	f001 fa1c 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	4820      	ldr	r0, [pc, #128]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80018a0:	f001 fa16 	bl	8002cd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	481d      	ldr	r0, [pc, #116]	; (8001920 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80018ac:	f001 fa10 	bl	8002cd0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d10b      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x290>
 80018b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018bc:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80018be:	f001 f9ef 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_EXTI_Callback+0x290>
		{
			pressed_key = '*';
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018ca:	222a      	movs	r2, #42	; 0x2a
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e03a      	b.n	8001946 <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d6:	d10b      	bne.n	80018f0 <HAL_GPIO_EXTI_Callback+0x2b0>
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	480f      	ldr	r0, [pc, #60]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80018de:	f001 f9df 	bl	8002ca0 <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_EXTI_Callback+0x2b0>
		{
			pressed_key = '0';
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80018ea:	2230      	movs	r2, #48	; 0x30
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e02a      	b.n	8001946 <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018f6:	d117      	bne.n	8001928 <HAL_GPIO_EXTI_Callback+0x2e8>
 80018f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80018fe:	f001 f9cf 	bl	8002ca0 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00f      	beq.n	8001928 <HAL_GPIO_EXTI_Callback+0x2e8>
		{
			pressed_key = '#';
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800190a:	2223      	movs	r2, #35	; 0x23
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e01a      	b.n	8001946 <HAL_GPIO_EXTI_Callback+0x306>
 8001910:	20000358 	.word	0x20000358
 8001914:	20000354 	.word	0x20000354
 8001918:	20000340 	.word	0x20000340
 800191c:	48000400 	.word	0x48000400
 8001920:	48000800 	.word	0x48000800
 8001924:	2000035c 	.word	0x2000035c
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800192e:	d10a      	bne.n	8001946 <HAL_GPIO_EXTI_Callback+0x306>
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	483a      	ldr	r0, [pc, #232]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001936:	f001 f9b3 	bl	8002ca0 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_GPIO_EXTI_Callback+0x306>
		{
			pressed_key = 'D';
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001942:	2244      	movs	r2, #68	; 0x44
 8001944:	701a      	strb	r2, [r3, #0]
		}

		  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 8001946:	2201      	movs	r2, #1
 8001948:	2140      	movs	r1, #64	; 0x40
 800194a:	4837      	ldr	r0, [pc, #220]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x3e8>)
 800194c:	f001 f9c0 	bl	8002cd0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 8001950:	2201      	movs	r2, #1
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	4834      	ldr	r0, [pc, #208]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001956:	f001 f9bb 	bl	8002cd0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001960:	4831      	ldr	r0, [pc, #196]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x3e8>)
 8001962:	f001 f9b5 	bl	8002cd0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196c:	482e      	ldr	r0, [pc, #184]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x3e8>)
 800196e:	f001 f9af 	bl	8002cd0 <HAL_GPIO_WritePin>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001974:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8001978:	605a      	str	r2, [r3, #4]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x3ec>)
 800197c:	2202      	movs	r2, #2
 800197e:	609a      	str	r2, [r3, #8]
		  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 8001980:	492a      	ldr	r1, [pc, #168]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x3ec>)
 8001982:	4827      	ldr	r0, [pc, #156]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x3e0>)
 8001984:	f000 ffe2 	bl	800294c <HAL_GPIO_Init>

		  if((pressed_key == '1'|| pressed_key == '2'|| pressed_key == '3'|| pressed_key == '4'|| pressed_key == '5'|| pressed_key == '6'|| pressed_key == '7'|| pressed_key == '8'|| pressed_key == '9'|| pressed_key == '0') && if_phone_number_set_latch == true)
 8001988:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b31      	cmp	r3, #49	; 0x31
 8001990:	d02c      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b32      	cmp	r3, #50	; 0x32
 800199a:	d027      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b33      	cmp	r3, #51	; 0x33
 80019a4:	d022      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b34      	cmp	r3, #52	; 0x34
 80019ae:	d01d      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019b0:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b35      	cmp	r3, #53	; 0x35
 80019b8:	d018      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b36      	cmp	r3, #54	; 0x36
 80019c2:	d013      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b37      	cmp	r3, #55	; 0x37
 80019cc:	d00e      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b38      	cmp	r3, #56	; 0x38
 80019d6:	d009      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b39      	cmp	r3, #57	; 0x39
 80019e0:	d004      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x3ac>
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b30      	cmp	r3, #48	; 0x30
 80019ea:	d110      	bne.n	8001a0e <HAL_GPIO_EXTI_Callback+0x3ce>
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x3f0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00c      	beq.n	8001a0e <HAL_GPIO_EXTI_Callback+0x3ce>
		  		  {
		  			  char pressed_digit = pressed_key;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	73fb      	strb	r3, [r7, #15]
		  			  add_digit(pressed_digit);
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f81f 	bl	8001a40 <add_digit>
		  			  pressed_key = '\0';
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		  			  if_key_pressed = true;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x3f4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
		  		  }

		  previousMillis = currentMillis;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001a14:	6013      	str	r3, [r2, #0]

	}
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	48000400 	.word	0x48000400
 8001a24:	2000035c 	.word	0x2000035c
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	20000340 	.word	0x20000340
 8001a30:	2000030e 	.word	0x2000030e
 8001a34:	2000030f 	.word	0x2000030f
 8001a38:	20000358 	.word	0x20000358
 8001a3c:	20000354 	.word	0x20000354

08001a40 <add_digit>:

int current_index = 0;

void add_digit(char digit)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	if(current_index < BUFFER_SIZE - 1)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <add_digit+0x38>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	dc0c      	bgt.n	8001a6c <add_digit+0x2c>
	{
		key_buffer[current_index++] = digit;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <add_digit+0x38>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <add_digit+0x38>)
 8001a5a:	600a      	str	r2, [r1, #0]
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <add_digit+0x3c>)
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	54ca      	strb	r2, [r1, r3]
		key_buffer[current_index] = '\0';
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <add_digit+0x38>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <add_digit+0x3c>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	54d1      	strb	r1, [r2, r3]
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	20000360 	.word	0x20000360
 8001a7c:	20000328 	.word	0x20000328

08001a80 <reset_buffer>:

void reset_buffer()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	memset(key_buffer, 0, BUFFER_SIZE);
 8001a84:	2205      	movs	r2, #5
 8001a86:	2100      	movs	r1, #0
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <reset_buffer+0x18>)
 8001a8a:	f006 f857 	bl	8007b3c <memset>
	current_index = 0;
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <reset_buffer+0x1c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000328 	.word	0x20000328
 8001a9c:	20000360 	.word	0x20000360

08001aa0 <delay>:

void delay(uint32_t iterations)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	while(iterations-- > 0)
 8001aa8:	e000      	b.n	8001aac <delay+0xc>
	{
		__NOP();
 8001aaa:	bf00      	nop
	while(iterations-- > 0)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <delay+0xa>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aca:	f000 fd16 	bl	80024fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ace:	f000 f89d 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad2:	f7ff f995 	bl	8000e00 <MX_GPIO_Init>
  MX_RNG_Init();
 8001ad6:	f000 f903 	bl	8001ce0 <MX_RNG_Init>
  MX_RTC_Init();
 8001ada:	f000 f961 	bl	8001da0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001ade:	f000 fb55 	bl	800218c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ae2:	f000 fb83 	bl	80021ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ae6:	f000 fbb1 	bl	800224c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001aea:	f7ff fa1b 	bl	8000f24 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001aee:	f000 fa83 	bl	8001ff8 <MX_TIM2_Init>
  MX_IWDG_Init();
 8001af2:	f7ff fab5 	bl	8001060 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2120      	movs	r1, #32
 8001afa:	4834      	ldr	r0, [pc, #208]	; (8001bcc <main+0x108>)
 8001afc:	f001 f8e8 	bl	8002cd0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b04:	f000 fd6e 	bl	80025e4 <HAL_Delay>

  lcd_init();
 8001b08:	f7fe fddd 	bl	80006c6 <lcd_init>
  send_AT_init();
 8001b0c:	f7ff fd50 	bl	80015b0 <send_AT_init>

  lcd_backlight(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7fe fe4b 	bl	80007ac <lcd_backlight>
  lcd_clear();
 8001b16:	f7fe fe3f 	bl	8000798 <lcd_clear>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <main+0x10c>)
 8001b1e:	f003 fc03 	bl	8005328 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <main+0x10c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34

  memset(key_buffer, '\0', BUFFER_SIZE);
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <main+0x110>)
 8001b32:	f006 f803 	bl	8007b3c <memset>

  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2140      	movs	r1, #64	; 0x40
 8001b3a:	4827      	ldr	r0, [pc, #156]	; (8001bd8 <main+0x114>)
 8001b3c:	f001 f8c8 	bl	8002cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	4824      	ldr	r0, [pc, #144]	; (8001bd8 <main+0x114>)
 8001b46:	f001 f8c3 	bl	8002cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b50:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <main+0x114>)
 8001b52:	f001 f8bd 	bl	8002cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <main+0x114>)
 8001b5e:	f001 f8b7 	bl	8002cd0 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	491d      	ldr	r1, [pc, #116]	; (8001bdc <main+0x118>)
 8001b66:	481e      	ldr	r0, [pc, #120]	; (8001be0 <main+0x11c>)
 8001b68:	f004 fc26 	bl	80063b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	491d      	ldr	r1, [pc, #116]	; (8001be4 <main+0x120>)
 8001b70:	481d      	ldr	r0, [pc, #116]	; (8001be8 <main+0x124>)
 8001b72:	f004 fc21 	bl	80063b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	491c      	ldr	r1, [pc, #112]	; (8001bec <main+0x128>)
 8001b7a:	481d      	ldr	r0, [pc, #116]	; (8001bf0 <main+0x12c>)
 8001b7c:	f004 fc1c 	bl	80063b8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_timeout_gsm();
 8001b80:	f7ff fbe8 	bl	8001354 <check_timeout_gsm>

	  lcd_display(if_phone_number_set_latch, if_key_pressed, key_buffer, access_key, pressed_key, open_close_cmd);
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <main+0x130>)
 8001b86:	7818      	ldrb	r0, [r3, #0]
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <main+0x134>)
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <main+0x138>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <main+0x13c>)
 8001b94:	9201      	str	r2, [sp, #4]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <main+0x140>)
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <main+0x110>)
 8001b9c:	f7fe fe1e 	bl	80007dc <lcd_display>

	  if_key_pressed = lcd_display_key(key_buffer, if_key_pressed);
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <main+0x134>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <main+0x110>)
 8001ba8:	f7ff f902 	bl	8000db0 <lcd_display_key>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <main+0x134>)
 8001bb2:	701a      	strb	r2, [r3, #0]

	  if(pressed_key == 'D')
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <main+0x138>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b44      	cmp	r3, #68	; 0x44
 8001bbc:	d101      	bne.n	8001bc2 <main+0xfe>
	  {
		  reset_buffer();
 8001bbe:	f7ff ff5f 	bl	8001a80 <reset_buffer>
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 8001bc2:	4811      	ldr	r0, [pc, #68]	; (8001c08 <main+0x144>)
 8001bc4:	f001 fd5e 	bl	8003684 <HAL_IWDG_Refresh>
	  check_timeout_gsm();
 8001bc8:	e7da      	b.n	8001b80 <main+0xbc>
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	200003e8 	.word	0x200003e8
 8001bd4:	20000328 	.word	0x20000328
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	20000337 	.word	0x20000337
 8001be0:	200004bc 	.word	0x200004bc
 8001be4:	20000338 	.word	0x20000338
 8001be8:	20000434 	.word	0x20000434
 8001bec:	20000339 	.word	0x20000339
 8001bf0:	20000544 	.word	0x20000544
 8001bf4:	2000030e 	.word	0x2000030e
 8001bf8:	2000030f 	.word	0x2000030f
 8001bfc:	2000035c 	.word	0x2000035c
 8001c00:	20000330 	.word	0x20000330
 8001c04:	20000320 	.word	0x20000320
 8001c08:	20000144 	.word	0x20000144

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2244      	movs	r2, #68	; 0x44
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f005 ff8e 	bl	8007b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c32:	f001 fd55 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c3c:	f000 f84a 	bl	8001cd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c40:	f001 fd30 	bl	80036a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <SystemClock_Config+0xc4>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <SystemClock_Config+0xc4>)
 8001c4c:	f023 0318 	bic.w	r3, r3, #24
 8001c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001c54:	231c      	movs	r3, #28
 8001c56:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c60:	2301      	movs	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c68:	2360      	movs	r3, #96	; 0x60
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c70:	2301      	movs	r3, #1
 8001c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c78:	2328      	movs	r3, #40	; 0x28
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 fd7d 	bl	800378c <HAL_RCC_OscConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c98:	f000 f81c 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 f945 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001cc0:	f000 f808 	bl	8001cd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001cc4:	f002 fe4c 	bl	8004960 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001cc8:	bf00      	nop
 8001cca:	3758      	adds	r7, #88	; 0x58
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_RNG_Init+0x20>)
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <MX_RNG_Init+0x24>)
 8001ce8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_RNG_Init+0x20>)
 8001cec:	f003 f81a 	bl	8004d24 <HAL_RNG_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001cf6:	f7ff ffed 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200003b0 	.word	0x200003b0
 8001d04:	50060800 	.word	0x50060800

08001d08 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0a6      	sub	sp, #152	; 0x98
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	2288      	movs	r2, #136	; 0x88
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 ff0f 	bl	8007b3c <memset>
  if(rngHandle->Instance==RNG)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_RNG_MspInit+0x90>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d133      	bne.n	8001d90 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001d28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001d2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d42:	2307      	movs	r3, #7
 8001d44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fb17 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001d64:	f7ff ffb6 	bl	8001cd4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RNG_MspInit+0x94>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_RNG_MspInit+0x94>)
 8001d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RNG_MspInit+0x94>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 2, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2102      	movs	r1, #2
 8001d84:	2050      	movs	r0, #80	; 0x50
 8001d86:	f000 fd2c 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001d8a:	2050      	movs	r0, #80	; 0x50
 8001d8c:	f000 fd45 	bl	800281a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3798      	adds	r7, #152	; 0x98
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	50060800 	.word	0x50060800
 8001d9c:	40021000 	.word	0x40021000

08001da0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_RTC_Init+0x48>)
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <MX_RTC_Init+0x4c>)
 8001da8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <MX_RTC_Init+0x48>)
 8001db2:	227f      	movs	r2, #127	; 0x7f
 8001db4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_RTC_Init+0x48>)
 8001db8:	22ff      	movs	r2, #255	; 0xff
 8001dba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_RTC_Init+0x48>)
 8001dd6:	f003 f8d1 	bl	8004f7c <HAL_RTC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001de0:	f7ff ff78 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200003c0 	.word	0x200003c0
 8001dec:	40002800 	.word	0x40002800

08001df0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0a4      	sub	sp, #144	; 0x90
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	2288      	movs	r2, #136	; 0x88
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f005 fe9b 	bl	8007b3c <memset>
  if(rtcHandle->Instance==RTC)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_RTC_MspInit+0x5c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d118      	bne.n	8001e42 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fab2 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e2e:	f7ff ff51 	bl	8001cd4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_RTC_MspInit+0x60>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <HAL_RTC_MspInit+0x60>)
 8001e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3790      	adds	r7, #144	; 0x90
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40002800 	.word	0x40002800
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_MspInit+0x44>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_MspInit+0x44>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6613      	str	r3, [r2, #96]	; 0x60
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <HAL_MspInit+0x44>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x44>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_MspInit+0x44>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_MspInit+0x44>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 fb5c 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART1_IRQHandler+0x10>)
 8001ef6:	f004 faab 	bl	8006450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000434 	.word	0x20000434

08001f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <USART2_IRQHandler+0x10>)
 8001f0a:	f004 faa1 	bl	8006450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200004bc 	.word	0x200004bc

08001f18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART3_IRQHandler+0x10>)
 8001f1e:	f004 fa97 	bl	8006450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000544 	.word	0x20000544

08001f2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001f30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f34:	f000 fee4 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8001f38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f3c:	f000 fee0 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8001f40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f44:	f000 fedc 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001f48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f4c:	f000 fed8 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <RNG_IRQHandler+0x10>)
 8001f5a:	f002 ff90 	bl	8004e7e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003b0 	.word	0x200003b0

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f005 fdfe 	bl	8007b98 <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20018000 	.word	0x20018000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	200003e4 	.word	0x200003e4
 8001fd0:	20000718 	.word	0x20000718

08001fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <MX_TIM2_Init+0xec>)
 800202c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002030:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002034:	224f      	movs	r2, #79	; 0x4f
 8002036:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <MX_TIM2_Init+0xec>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002040:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002044:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MX_TIM2_Init+0xec>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002052:	4824      	ldr	r0, [pc, #144]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002054:	f003 f8b0 	bl	80051b8 <HAL_TIM_Base_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800205e:	f7ff fe39 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206c:	4619      	mov	r1, r3
 800206e:	481d      	ldr	r0, [pc, #116]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002070:	f003 fb74 	bl	800575c <HAL_TIM_ConfigClockSource>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800207a:	f7ff fe2b 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800207e:	4819      	ldr	r0, [pc, #100]	; (80020e4 <MX_TIM2_Init+0xec>)
 8002080:	f003 f8f1 	bl	8005266 <HAL_TIM_PWM_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800208a:	f7ff fe23 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	4811      	ldr	r0, [pc, #68]	; (80020e4 <MX_TIM2_Init+0xec>)
 800209e:	f004 f857 	bl	8006150 <HAL_TIMEx_MasterConfigSynchronization>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020a8:	f7ff fe14 	bl	8001cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ac:	2360      	movs	r3, #96	; 0x60
 80020ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80020b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020be:	463b      	mov	r3, r7
 80020c0:	2200      	movs	r2, #0
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM2_Init+0xec>)
 80020c6:	f003 fa35 	bl	8005534 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80020d0:	f7ff fe00 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM2_Init+0xec>)
 80020d6:	f000 f825 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200003e8 	.word	0x200003e8

080020e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d10b      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_TIM_Base_MspInit+0x38>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_TIM_Base_MspInit+0x38>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_TIM_Base_MspInit+0x38>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002144:	d11c      	bne.n	8002180 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_MspPostInit+0x64>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_TIM_MspPostInit+0x64>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_MspPostInit+0x64>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin;
 800215e:	2301      	movs	r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800216e:	2301      	movs	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_0_GPIO_Port, &GPIO_InitStruct);
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f000 fbe6 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000

0800218c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <MX_USART1_UART_Init+0x5c>)
 8002194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_USART1_UART_Init+0x58>)
 80021d0:	f004 f846 	bl	8006260 <HAL_UART_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021da:	f7ff fd7b 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000434 	.word	0x20000434
 80021e8:	40013800 	.word	0x40013800

080021ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_USART2_UART_Init+0x58>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MX_USART2_UART_Init+0x5c>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_USART2_UART_Init+0x58>)
 80021f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART2_UART_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART2_UART_Init+0x58>)
 8002230:	f004 f816 	bl	8006260 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800223a:	f7ff fd4b 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200004bc 	.word	0x200004bc
 8002248:	40004400 	.word	0x40004400

0800224c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_USART3_UART_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002258:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800225c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART3_UART_Init+0x58>)
 8002290:	f003 ffe6 	bl	8006260 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800229a:	f7ff fd1b 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000544 	.word	0x20000544
 80022a8:	40004800 	.word	0x40004800

080022ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0b0      	sub	sp, #192	; 0xc0
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	2288      	movs	r2, #136	; 0x88
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f005 fc35 	bl	8007b3c <memset>
  if(uartHandle->Instance==USART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6f      	ldr	r2, [pc, #444]	; (8002494 <HAL_UART_MspInit+0x1e8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d145      	bne.n	8002368 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022e0:	2300      	movs	r3, #0
 80022e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 f84f 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022f4:	f7ff fcee 	bl	8001cd4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f8:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	4a66      	ldr	r2, [pc, #408]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 80022fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002302:	6613      	str	r3, [r2, #96]	; 0x60
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231c:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002328:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800232c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002342:	2307      	movs	r3, #7
 8002344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f000 fafb 	bl	800294c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2108      	movs	r1, #8
 800235a:	2025      	movs	r0, #37	; 0x25
 800235c:	f000 fa41 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002360:	2025      	movs	r0, #37	; 0x25
 8002362:	f000 fa5a 	bl	800281a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002366:	e091      	b.n	800248c <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_UART_MspInit+0x1f0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d144      	bne.n	80023fc <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002372:	2302      	movs	r3, #2
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002376:	2300      	movs	r3, #0
 8002378:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237e:	4618      	mov	r0, r3
 8002380:	f002 f804 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800238a:	f7ff fca3 	bl	8001cd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	6593      	str	r3, [r2, #88]	; 0x58
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023be:	230c      	movs	r3, #12
 80023c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d6:	2307      	movs	r3, #7
 80023d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e6:	f000 fab1 	bl	800294c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	210a      	movs	r1, #10
 80023ee:	2026      	movs	r0, #38	; 0x26
 80023f0:	f000 f9f7 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023f4:	2026      	movs	r0, #38	; 0x26
 80023f6:	f000 fa10 	bl	800281a <HAL_NVIC_EnableIRQ>
}
 80023fa:	e047      	b.n	800248c <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_UART_MspInit+0x1f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d142      	bne.n	800248c <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002406:	2304      	movs	r3, #4
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800240a:	2300      	movs	r3, #0
 800240c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002412:	4618      	mov	r0, r3
 8002414:	f001 ffba 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_MspInit+0x176>
      Error_Handler();
 800241e:	f7ff fc59 	bl	8001cd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_UART_MspInit+0x1ec>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002452:	2330      	movs	r3, #48	; 0x30
 8002454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800246a:	2307      	movs	r3, #7
 800246c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	; (80024a4 <HAL_UART_MspInit+0x1f8>)
 8002478:	f000 fa68 	bl	800294c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2108      	movs	r1, #8
 8002480:	2027      	movs	r0, #39	; 0x27
 8002482:	f000 f9ae 	bl	80027e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002486:	2027      	movs	r0, #39	; 0x27
 8002488:	f000 f9c7 	bl	800281a <HAL_NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	37c0      	adds	r7, #192	; 0xc0
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40013800 	.word	0x40013800
 8002498:	40021000 	.word	0x40021000
 800249c:	40004400 	.word	0x40004400
 80024a0:	40004800 	.word	0x40004800
 80024a4:	48000800 	.word	0x48000800

080024a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ac:	f7ff fd92 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024b2:	490d      	ldr	r1, [pc, #52]	; (80024e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <LoopForever+0xe>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024c8:	4c0a      	ldr	r4, [pc, #40]	; (80024f4 <LoopForever+0x16>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d6:	f005 fb65 	bl	8007ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024da:	f7ff faf3 	bl	8001ac4 <main>

080024de <LoopForever>:

LoopForever:
    b LoopForever
 80024de:	e7fe      	b.n	80024de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80024ec:	0800866c 	.word	0x0800866c
  ldr r2, =_sbss
 80024f0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80024f4:	20000718 	.word	0x20000718

080024f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f8:	e7fe      	b.n	80024f8 <ADC1_2_IRQHandler>

080024fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f961 	bl	80027cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f80e 	bl	800252c <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	e001      	b.n	8002520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800251c:	f7ff fc9a 	bl	8001e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002520:	79fb      	ldrb	r3, [r7, #7]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_InitTick+0x6c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d023      	beq.n	8002588 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_InitTick+0x70>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_InitTick+0x6c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f96d 	bl	8002836 <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d809      	bhi.n	800257c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 f937 	bl	80027e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_InitTick+0x74>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e007      	b.n	800258c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e004      	b.n	800258c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e001      	b.n	800258c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000070 	.word	0x20000070
 800259c:	20000068 	.word	0x20000068
 80025a0:	2000006c 	.word	0x2000006c

080025a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x20>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x24>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_IncTick+0x24>)
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000070 	.word	0x20000070
 80025c8:	200005cc 	.word	0x200005cc

080025cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return uwTick;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_GetTick+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	200005cc 	.word	0x200005cc

080025e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ec:	f7ff ffee 	bl	80025cc <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d005      	beq.n	800260a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_Delay+0x44>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260a:	bf00      	nop
 800260c:	f7ff ffde 	bl	80025cc <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d8f7      	bhi.n	800260c <HAL_Delay+0x28>
  {
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000070 	.word	0x20000070

0800262c <__NVIC_SetPriorityGrouping>:
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d301      	bcc.n	800279e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279a:	2301      	movs	r3, #1
 800279c:	e00f      	b.n	80027be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <SysTick_Config+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027a6:	210f      	movs	r1, #15
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f7ff ff8e 	bl	80026cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SysTick_Config+0x40>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <SysTick_Config+0x40>)
 80027b8:	2207      	movs	r2, #7
 80027ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	e000e010 	.word	0xe000e010

080027cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff29 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f4:	f7ff ff3e 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff8e 	bl	8002720 <NVIC_EncodePriority>
 8002804:	4602      	mov	r2, r0
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff5d 	bl	80026cc <__NVIC_SetPriority>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff31 	bl	8002690 <__NVIC_EnableIRQ>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffa2 	bl	8002788 <SysTick_Config>
 8002844:	4603      	mov	r3, r0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d008      	beq.n	8002878 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e022      	b.n	80028be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020e 	bic.w	r2, r2, #14
 8002886:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	f003 021c 	and.w	r2, r3, #28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d005      	beq.n	80028ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e029      	b.n	8002942 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 020e 	bic.w	r2, r2, #14
 80028fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f003 021c 	and.w	r2, r3, #28
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f202 	lsl.w	r2, r1, r2
 8002920:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    }
  }
  return status;
 8002942:	7bfb      	ldrb	r3, [r7, #15]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295a:	e17f      	b.n	8002c5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8171 	beq.w	8002c56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d005      	beq.n	800298c <HAL_GPIO_Init+0x40>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d130      	bne.n	80029ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c2:	2201      	movs	r2, #1
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0201 	and.w	r2, r3, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d118      	bne.n	8002a2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a00:	2201      	movs	r2, #1
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0201 	and.w	r2, r3, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d017      	beq.n	8002a68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d123      	bne.n	8002abc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	6939      	ldr	r1, [r7, #16]
 8002ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80ac 	beq.w	8002c56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b02:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b16:	4a5a      	ldr	r2, [pc, #360]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x242>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x338>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x23e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_GPIO_Init+0x33c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x23a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4d      	ldr	r2, [pc, #308]	; (8002c8c <HAL_GPIO_Init+0x340>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x236>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <HAL_GPIO_Init+0x344>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x232>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_GPIO_Init+0x348>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x22e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_GPIO_Init+0x34c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x22a>
 8002b72:	2306      	movs	r3, #6
 8002b74:	e00c      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e00a      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e008      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e006      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e004      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e002      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_GPIO_Init+0x244>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	f002 0203 	and.w	r2, r2, #3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4093      	lsls	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba0:	4937      	ldr	r1, [pc, #220]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bd2:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <HAL_GPIO_Init+0x350>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f47f ae78 	bne.w	800295c <HAL_GPIO_Init+0x10>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40010000 	.word	0x40010000
 8002c84:	48000400 	.word	0x48000400
 8002c88:	48000800 	.word	0x48000800
 8002c8c:	48000c00 	.word	0x48000c00
 8002c90:	48001000 	.word	0x48001000
 8002c94:	48001400 	.word	0x48001400
 8002c98:	48001800 	.word	0x48001800
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	e001      	b.n	8002cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d16:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc8e 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08d      	b.n	8002e5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe f924 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	e006      	b.n	8002db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d108      	bne.n	8002dd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	e007      	b.n	8002de2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69d9      	ldr	r1, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	461a      	mov	r2, r3
 8002e74:	460b      	mov	r3, r1
 8002e76:	817b      	strh	r3, [r7, #10]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	f040 80fd 	bne.w	8003084 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2C_Master_Transmit+0x30>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e0f6      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ea0:	f7ff fb94 	bl	80025cc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2319      	movs	r3, #25
 8002eac:	2201      	movs	r2, #1
 8002eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f914 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0e1      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	; 0x21
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	893a      	ldrh	r2, [r7, #8]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2bff      	cmp	r3, #255	; 0xff
 8002ef2:	d906      	bls.n	8002f02 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e007      	b.n	8002f12 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f10:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d024      	beq.n	8002f64 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	3301      	adds	r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	8979      	ldrh	r1, [r7, #10]
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_I2C_Master_Transmit+0x228>)
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fa79 	bl	8003454 <I2C_TransferConfig>
 8002f62:	e066      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <HAL_I2C_Master_Transmit+0x228>)
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa6e 	bl	8003454 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f78:	e05b      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8fd 	bl	800317e <I2C_WaitOnTXISFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07b      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d034      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x1ca>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d130      	bne.n	8003032 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f880 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e04d      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d90e      	bls.n	8003012 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa22 	bl	8003454 <I2C_TransferConfig>
 8003010:	e00f      	b.n	8003032 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa11 	bl	8003454 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d19e      	bne.n	8002f7a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	6a39      	ldr	r1, [r7, #32]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8e3 	bl	800320c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e01a      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2220      	movs	r2, #32
 8003056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_I2C_Master_Transmit+0x22c>)
 8003064:	400b      	ands	r3, r1
 8003066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002000 	.word	0x80002000
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d103      	bne.n	80030b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	619a      	str	r2, [r3, #24]
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f0:	e031      	b.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d02d      	beq.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff fa67 	bl	80025cc <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d122      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	429a      	cmp	r2, r3
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	429a      	cmp	r2, r3
 800312c:	d113      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d0be      	beq.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800318a:	e033      	b.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f87f 	bl	8003294 <I2C_IsErrorOccurred>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e031      	b.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d025      	beq.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7ff fa10 	bl	80025cc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11a      	bne.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d013      	beq.n	80031f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e007      	b.n	8003204 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d1c4      	bne.n	800318c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003218:	e02f      	b.n	800327a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f838 	bl	8003294 <I2C_IsErrorOccurred>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02d      	b.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7ff f9cd 	bl	80025cc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11a      	bne.n	800327a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d013      	beq.n	800327a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e007      	b.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d1c8      	bne.n	800321a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d068      	beq.n	8003392 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2210      	movs	r2, #16
 80032c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032c8:	e049      	b.n	800335e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d045      	beq.n	800335e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7ff f97b 	bl	80025cc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_IsErrorOccurred+0x54>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d13a      	bne.n	800335e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	d121      	bne.n	8003350 <I2C_IsErrorOccurred+0xbc>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003312:	d01d      	beq.n	8003350 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b20      	cmp	r3, #32
 8003318:	d01a      	beq.n	8003350 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003328:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800332a:	f7ff f94f 	bl	80025cc <HAL_GetTick>
 800332e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	e00e      	b.n	8003350 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003332:	f7ff f94b 	bl	80025cc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b19      	cmp	r3, #25
 800333e:	d907      	bls.n	8003350 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f043 0320 	orr.w	r3, r3, #32
 8003346:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800334e:	e006      	b.n	800335e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	d1e9      	bne.n	8003332 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b20      	cmp	r3, #32
 800336a:	d003      	beq.n	8003374 <I2C_IsErrorOccurred+0xe0>
 800336c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0aa      	beq.n	80032ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003378:	2b00      	cmp	r3, #0
 800337a:	d103      	bne.n	8003384 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2220      	movs	r2, #32
 8003382:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01c      	beq.n	8003442 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fe45 	bl	8003098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <I2C_IsErrorOccurred+0x1bc>)
 800341a:	400b      	ands	r3, r1
 800341c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	fe00e800 	.word	0xfe00e800

08003454 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	817b      	strh	r3, [r7, #10]
 8003462:	4613      	mov	r3, r2
 8003464:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800346c:	7a7b      	ldrb	r3, [r7, #9]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003474:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	4313      	orrs	r3, r2
 800347e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003482:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	0d5b      	lsrs	r3, r3, #21
 800348e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <I2C_TransferConfig+0x60>)
 8003494:	430b      	orrs	r3, r1
 8003496:	43db      	mvns	r3, r3
 8003498:	ea02 0103 	and.w	r1, r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	03ff63ff 	.word	0x03ff63ff

080034b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d138      	bne.n	8003540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034d8:	2302      	movs	r3, #2
 80034da:	e032      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800350a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800353c:	2300      	movs	r3, #0
 800353e:	e000      	b.n	8003542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d139      	bne.n	80035d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800356e:	2302      	movs	r3, #2
 8003570:	e033      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	; 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e000      	b.n	80035da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
  }
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e041      	b.n	800367c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003600:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f245 5255 	movw	r2, #21845	; 0x5555
 800360a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6852      	ldr	r2, [r2, #4]
 8003614:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003620:	f7fe ffd4 	bl	80025cc <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003626:	e00f      	b.n	8003648 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003628:	f7fe ffd0 	bl	80025cc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b31      	cmp	r3, #49	; 0x31
 8003634:	d908      	bls.n	8003648 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e019      	b.n	800367c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e8      	bne.n	8003628 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d005      	beq.n	8003670 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68d2      	ldr	r2, [r2, #12]
 800366c:	611a      	str	r2, [r3, #16]
 800366e:	e004      	b.n	800367a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003694:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40007000 	.word	0x40007000

080036c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ee:	d130      	bne.n	8003752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d038      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2232      	movs	r2, #50	; 0x32
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	e002      	b.n	800372c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d102      	bne.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f2      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d110      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d007      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000
 8003784:	20000068 	.word	0x20000068
 8003788:	431bde83 	.word	0x431bde83

0800378c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e3ca      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379e:	4b97      	ldr	r3, [pc, #604]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a8:	4b94      	ldr	r3, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80e4 	beq.w	8003988 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_RCC_OscConfig+0x4a>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	f040 808b 	bne.w	80038e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 8087 	bne.w	80038e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d6:	4b89      	ldr	r3, [pc, #548]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e3a2      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_RCC_OscConfig+0x7c>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	e005      	b.n	8003814 <HAL_RCC_OscConfig+0x88>
 8003808:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003814:	4293      	cmp	r3, r2
 8003816:	d223      	bcs.n	8003860 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd55 	bl	80042cc <RCC_SetFlashLatencyFromMSIRange>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e383      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382c:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a72      	ldr	r2, [pc, #456]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b70      	ldr	r3, [pc, #448]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	496d      	ldr	r1, [pc, #436]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384a:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	4968      	ldr	r1, [pc, #416]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 800385e:	e025      	b.n	80038ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003866:	f043 0308 	orr.w	r3, r3, #8
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4960      	ldr	r1, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	495b      	ldr	r1, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fd15 	bl	80042cc <RCC_SetFlashLatencyFromMSIRange>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e343      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 fc4a 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b52      	ldr	r3, [pc, #328]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4950      	ldr	r1, [pc, #320]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_RCC_OscConfig+0x278>)
 80038ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038cc:	4b4e      	ldr	r3, [pc, #312]	; (8003a08 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fe2b 	bl	800252c <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d052      	beq.n	8003986 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	e327      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ec:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a42      	ldr	r2, [pc, #264]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fe68 	bl	80025cc <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003900:	f7fe fe64 	bl	80025cc <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e310      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4931      	ldr	r1, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	492c      	ldr	r1, [pc, #176]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e01a      	b.n	8003988 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395e:	f7fe fe35 	bl	80025cc <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003966:	f7fe fe31 	bl	80025cc <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e2dd      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x1da>
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003986:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d074      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x21a>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d10e      	bne.n	80039be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d064      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d160      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e2ba      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x24a>
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e026      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039de:	d115      	bne.n	8003a0c <HAL_RCC_OscConfig+0x280>
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a02      	ldr	r2, [pc, #8]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e014      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	080085e0 	.word	0x080085e0
 8003a04:	20000068 	.word	0x20000068
 8003a08:	2000006c 	.word	0x2000006c
 8003a0c:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a9f      	ldr	r2, [pc, #636]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a9c      	ldr	r2, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fdce 	bl	80025cc <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fdca 	bl	80025cc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e276      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2a8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fdba 	bl	80025cc <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fdb6 	bl	80025cc <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e262      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x310>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d116      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x328>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e23f      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	4973      	ldr	r1, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	e040      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d023      	beq.n	8003b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fd75 	bl	80025cc <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fd71 	bl	80025cc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e21d      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	495f      	ldr	r1, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	e018      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fe fd51 	bl	80025cc <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fd4d 	bl	80025cc <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1f9      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fd2c 	bl	80025cc <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fe fd28 	bl	80025cc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1d4      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x3ec>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe fd0f 	bl	80025cc <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fd0b 	bl	80025cc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1b7      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a6 	beq.w	8003d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d118      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c24:	f7fe fcd2 	bl	80025cc <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fe fcce 	bl	80025cc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e17a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d108      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4d8>
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c62:	e029      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d115      	bne.n	8003c98 <HAL_RCC_OscConfig+0x50c>
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	4b9c      	ldr	r3, [pc, #624]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a9b      	ldr	r2, [pc, #620]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4b98      	ldr	r3, [pc, #608]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a97      	ldr	r2, [pc, #604]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fc84 	bl	80025cc <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fc80 	bl	80025cc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e12a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x53c>
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fc6d 	bl	80025cc <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe fc69 	bl	80025cc <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e113      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d0c:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ed      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80fe 	beq.w	8003f32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f040 80d0 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d40:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0203 	and.w	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d130      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d127      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d11f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d80:	2a07      	cmp	r2, #7
 8003d82:	bf14      	ite	ne
 8003d84:	2201      	movne	r2, #1
 8003d86:	2200      	moveq	r2, #0
 8003d88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d113      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d06e      	beq.n	8003e94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d069      	beq.n	8003e90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0ad      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003de4:	f7fe fbf2 	bl	80025cc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fbee 	bl	80025cc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e09a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x784>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e1a:	3a01      	subs	r2, #1
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e24:	0212      	lsls	r2, r2, #8
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e2c:	0852      	lsrs	r2, r2, #1
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	0552      	lsls	r2, r2, #21
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e44:	0912      	lsrs	r2, r2, #4
 8003e46:	0452      	lsls	r2, r2, #17
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4930      	ldr	r1, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e68:	f7fe fbb0 	bl	80025cc <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fbac 	bl	80025cc <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e058      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8e:	e050      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04f      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d148      	bne.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb8:	f7fe fb88 	bl	80025cc <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe fb84 	bl	80025cc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e030      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x734>
 8003ede:	e028      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d023      	beq.n	8003f2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fb6b 	bl	80025cc <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e00c      	b.n	8003f14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe fb67 	bl	80025cc <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d905      	bls.n	8003f14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e013      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ec      	bne.n	8003efa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	4905      	ldr	r1, [pc, #20]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x7b4>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
 8003f2c:	e001      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	feeefffc 	.word	0xfeeefffc

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0e7      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b72      	ldr	r3, [pc, #456]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	4970      	ldr	r1, [pc, #448]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cf      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4960      	ldr	r1, [pc, #384]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04c      	beq.n	800405c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fca:	4b5a      	ldr	r3, [pc, #360]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0a6      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e09a      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffa:	4b4e      	ldr	r3, [pc, #312]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e08e      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e086      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4943      	ldr	r1, [pc, #268]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fe face 	bl	80025cc <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fe faca 	bl	80025cc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e06e      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004074:	429a      	cmp	r2, r3
 8004076:	d208      	bcs.n	800408a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	492b      	ldr	r1, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d210      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 0207 	bic.w	r2, r3, #7
 80040a0:	4923      	ldr	r1, [pc, #140]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e036      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4918      	ldr	r1, [pc, #96]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4910      	ldr	r1, [pc, #64]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f8:	f000 f824 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	490b      	ldr	r1, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1f4>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1fc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fa05 	bl	800252c <HAL_InitTick>
 8004122:	4603      	mov	r3, r0
 8004124:	72fb      	strb	r3, [r7, #11]

  return status;
 8004126:	7afb      	ldrb	r3, [r7, #11]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40022000 	.word	0x40022000
 8004134:	40021000 	.word	0x40021000
 8004138:	080085e0 	.word	0x080085e0
 800413c:	20000068 	.word	0x20000068
 8004140:	2000006c 	.word	0x2000006c

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415c:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d121      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d11e      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004184:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e005      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_GetSysClockFreq+0x110>)
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e004      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d134      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0xa6>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d003      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0xac>
 80041e8:	e005      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ec:	617b      	str	r3, [r7, #20]
      break;
 80041ee:	e005      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_GetSysClockFreq+0x114>)
 80041f2:	617b      	str	r3, [r7, #20]
      break;
 80041f4:	e002      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	617b      	str	r3, [r7, #20]
      break;
 80041fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	3301      	adds	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	fb03 f202 	mul.w	r2, r3, r2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	0e5b      	lsrs	r3, r3, #25
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	3301      	adds	r3, #1
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800423c:	69bb      	ldr	r3, [r7, #24]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	080085f8 	.word	0x080085f8
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200

0800425c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCC_GetHCLKFreq+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000068 	.word	0x20000068

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004278:	f7ff fff0 	bl	800425c <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCC_GetPCLK1Freq+0x28>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	080085f0 	.word	0x080085f0

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042a4:	f7ff ffda 	bl	800425c <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4904      	ldr	r1, [pc, #16]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	080085f0 	.word	0x080085f0

080042cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042e4:	f7ff f9ee 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 80042e8:	6178      	str	r0, [r7, #20]
 80042ea:	e014      	b.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a24      	ldr	r2, [pc, #144]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004304:	f7ff f9de 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 8004308:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431c:	d10b      	bne.n	8004336 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d919      	bls.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2ba0      	cmp	r3, #160	; 0xa0
 8004328:	d902      	bls.n	8004330 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800432a:	2302      	movs	r3, #2
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e013      	b.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004330:	2301      	movs	r3, #1
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e010      	b.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d902      	bls.n	8004342 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800433c:	2303      	movs	r3, #3
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e00a      	b.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d102      	bne.n	800434e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004348:	2302      	movs	r3, #2
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e004      	b.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d101      	bne.n	8004358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004354:	2301      	movs	r3, #1
 8004356:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 0207 	bic.w	r2, r3, #7
 8004360:	4909      	ldr	r1, [pc, #36]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004368:	4b07      	ldr	r3, [pc, #28]	; (8004388 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	40022000 	.word	0x40022000

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004394:	2300      	movs	r3, #0
 8004396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004398:	2300      	movs	r3, #0
 800439a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d041      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043b0:	d02a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043b6:	d824      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043bc:	d008      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043c2:	d81e      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043cc:	d010      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043ce:	e018      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043d0:	4b86      	ldr	r3, [pc, #536]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a85      	ldr	r2, [pc, #532]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043dc:	e015      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 facb 	bl	8004980 <RCCEx_PLLSAI1_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ee:	e00c      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3320      	adds	r3, #32
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fbb6 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	74fb      	strb	r3, [r7, #19]
      break;
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004410:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441e:	4973      	ldr	r1, [pc, #460]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004426:	e001      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d041      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800443c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004440:	d02a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004446:	d824      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444c:	d008      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800444e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004452:	d81e      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445c:	d010      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800445e:	e018      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004460:	4b62      	ldr	r3, [pc, #392]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a61      	ldr	r2, [pc, #388]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800446c:	e015      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fa83 	bl	8004980 <RCCEx_PLLSAI1_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447e:	e00c      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3320      	adds	r3, #32
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fb6e 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	74fb      	strb	r3, [r7, #19]
      break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044a0:	4b52      	ldr	r3, [pc, #328]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ae:	494f      	ldr	r1, [pc, #316]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a0 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b41      	ldr	r3, [pc, #260]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	4a40      	ldr	r2, [pc, #256]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
 80044f0:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fc:	2301      	movs	r3, #1
 80044fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800450c:	f7fe f85e 	bl	80025cc <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004512:	e009      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe f85a 	bl	80025cc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d902      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	74fb      	strb	r3, [r7, #19]
        break;
 8004526:	e005      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004528:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ef      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d15c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800453a:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004544:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	d019      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004564:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	4a20      	ldr	r2, [pc, #128]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004596:	f7fe f819 	bl	80025cc <HAL_GetTick>
 800459a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459c:	e00b      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fe f815 	bl	80025cc <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d902      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	74fb      	strb	r3, [r7, #19]
            break;
 80045b4:	e006      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ec      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045da:	4904      	ldr	r1, [pc, #16]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045e2:	e009      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	74bb      	strb	r3, [r7, #18]
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f8:	7c7b      	ldrb	r3, [r7, #17]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b9e      	ldr	r3, [pc, #632]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	4a9d      	ldr	r2, [pc, #628]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004616:	4b98      	ldr	r3, [pc, #608]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f023 0203 	bic.w	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	4994      	ldr	r1, [pc, #592]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004638:	4b8f      	ldr	r3, [pc, #572]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463e:	f023 020c 	bic.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	498c      	ldr	r1, [pc, #560]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800465a:	4b87      	ldr	r3, [pc, #540]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	4983      	ldr	r1, [pc, #524]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800467c:	4b7e      	ldr	r3, [pc, #504]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	497b      	ldr	r1, [pc, #492]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800469e:	4b76      	ldr	r3, [pc, #472]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	4972      	ldr	r1, [pc, #456]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046c0:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	496a      	ldr	r1, [pc, #424]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	4961      	ldr	r1, [pc, #388]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004704:	4b5c      	ldr	r3, [pc, #368]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	4959      	ldr	r1, [pc, #356]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004726:	4b54      	ldr	r3, [pc, #336]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	4950      	ldr	r1, [pc, #320]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004748:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	4948      	ldr	r1, [pc, #288]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800476a:	4b43      	ldr	r3, [pc, #268]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	493f      	ldr	r1, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d028      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800478c:	4b3a      	ldr	r3, [pc, #232]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479a:	4937      	ldr	r1, [pc, #220]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d106      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b32      	ldr	r3, [pc, #200]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a31      	ldr	r2, [pc, #196]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e011      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c2:	d10c      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f8d8 	bl	8004980 <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d028      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	491f      	ldr	r1, [pc, #124]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004808:	d106      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480a:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004814:	60d3      	str	r3, [r2, #12]
 8004816:	e011      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004820:	d10c      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	2101      	movs	r1, #1
 8004828:	4618      	mov	r0, r3
 800482a:	f000 f8a9 	bl	8004980 <RCCEx_PLLSAI1_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02b      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004856:	4908      	ldr	r1, [pc, #32]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004866:	d109      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a02      	ldr	r2, [pc, #8]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004872:	60d3      	str	r3, [r2, #12]
 8004874:	e014      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f877 	bl	8004980 <RCCEx_PLLSAI1_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048ac:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ba:	4928      	ldr	r1, [pc, #160]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ca:	d10d      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f854 	bl	8004980 <RCCEx_PLLSAI1_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d014      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	74bb      	strb	r3, [r7, #18]
 80048e6:	e011      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3320      	adds	r3, #32
 80048f6:	2102      	movs	r1, #2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f935 	bl	8004b68 <RCCEx_PLLSAI2_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004918:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004926:	490d      	ldr	r1, [pc, #52]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494a:	4904      	ldr	r1, [pc, #16]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004952:	7cbb      	ldrb	r3, [r7, #18]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000

08004960 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a04      	ldr	r2, [pc, #16]	; (800497c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000

08004980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800498e:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800499a:	4b72      	ldr	r3, [pc, #456]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0203 	and.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d10d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
       ||
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049b2:	4b6c      	ldr	r3, [pc, #432]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
       ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d047      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
 80049ca:	e044      	b.n	8004a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d018      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x86>
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d825      	bhi.n	8004a24 <RCCEx_PLLSAI1_Config+0xa4>
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d002      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0x62>
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d009      	beq.n	80049f4 <RCCEx_PLLSAI1_Config+0x74>
 80049e0:	e020      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e2:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f2:	e01a      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049f4:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d116      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a04:	e013      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a06:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a12:	4b54      	ldr	r3, [pc, #336]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a22:	e006      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      break;
 8004a28:	e004      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10d      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	4944      	ldr	r1, [pc, #272]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d17d      	bne.n	8004b58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a5c:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a40      	ldr	r2, [pc, #256]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fd fdb0 	bl	80025cc <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a6e:	e009      	b.n	8004a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a70:	f7fd fdac 	bl	80025cc <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	73fb      	strb	r3, [r7, #15]
        break;
 8004a82:	e005      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a84:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ef      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d160      	bne.n	8004b58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d111      	bne.n	8004ac0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a9c:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6892      	ldr	r2, [r2, #8]
 8004aac:	0211      	lsls	r1, r2, #8
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	0912      	lsrs	r2, r2, #4
 8004ab4:	0452      	lsls	r2, r2, #17
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	492a      	ldr	r1, [pc, #168]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]
 8004abe:	e027      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d112      	bne.n	8004aec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ace:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	0211      	lsls	r1, r2, #8
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6912      	ldr	r2, [r2, #16]
 8004adc:	0852      	lsrs	r2, r2, #1
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	0552      	lsls	r2, r2, #21
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	491f      	ldr	r1, [pc, #124]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	610b      	str	r3, [r1, #16]
 8004aea:	e011      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004af4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6892      	ldr	r2, [r2, #8]
 8004afc:	0211      	lsls	r1, r2, #8
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6952      	ldr	r2, [r2, #20]
 8004b02:	0852      	lsrs	r2, r2, #1
 8004b04:	3a01      	subs	r2, #1
 8004b06:	0652      	lsls	r2, r2, #25
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	4916      	ldr	r1, [pc, #88]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fd56 	bl	80025cc <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b22:	e009      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b24:	f7fd fd52 	bl	80025cc <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	73fb      	strb	r3, [r7, #15]
          break;
 8004b36:	e005      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b76:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d018      	beq.n	8004bb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b82:	4b67      	ldr	r3, [pc, #412]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0203 	and.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d10d      	bne.n	8004bae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
       ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b9a:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d047      	beq.n	8004c3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	e044      	b.n	8004c3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d018      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0x86>
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d825      	bhi.n	8004c0c <RCCEx_PLLSAI2_Config+0xa4>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d002      	beq.n	8004bca <RCCEx_PLLSAI2_Config+0x62>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d009      	beq.n	8004bdc <RCCEx_PLLSAI2_Config+0x74>
 8004bc8:	e020      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bca:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bda:	e01a      	b.n	8004c12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bdc:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bec:	e013      	b.n	8004c16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bee:	4b4c      	ldr	r3, [pc, #304]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfa:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0a:	e006      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e004      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c22:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	430b      	orrs	r3, r1
 8004c38:	4939      	ldr	r1, [pc, #228]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d167      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a35      	ldr	r2, [pc, #212]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fd fcbc 	bl	80025cc <HAL_GetTick>
 8004c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c56:	e009      	b.n	8004c6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c58:	f7fd fcb8 	bl	80025cc <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d902      	bls.n	8004c6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6a:	e005      	b.n	8004c78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ef      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d14a      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c84:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6892      	ldr	r2, [r2, #8]
 8004c94:	0211      	lsls	r1, r2, #8
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	0912      	lsrs	r2, r2, #4
 8004c9c:	0452      	lsls	r2, r2, #17
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	491f      	ldr	r1, [pc, #124]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	614b      	str	r3, [r1, #20]
 8004ca6:	e011      	b.n	8004ccc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6892      	ldr	r2, [r2, #8]
 8004cb8:	0211      	lsls	r1, r2, #8
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6912      	ldr	r2, [r2, #16]
 8004cbe:	0852      	lsrs	r2, r2, #1
 8004cc0:	3a01      	subs	r2, #1
 8004cc2:	0652      	lsls	r2, r2, #25
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4916      	ldr	r1, [pc, #88]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fc78 	bl	80025cc <HAL_GetTick>
 8004cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cde:	e009      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ce0:	f7fd fc74 	bl	80025cc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d902      	bls.n	8004cf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8004cf2:	e005      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4904      	ldr	r1, [pc, #16]	; (8004d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e049      	b.n	8004dca <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	795b      	ldrb	r3, [r3, #5]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc ffde 	bl	8001d08 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0204 	orr.w	r2, r2, #4
 8004d60:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d104      	bne.n	8004d7a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2204      	movs	r2, #4
 8004d74:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e027      	b.n	8004dca <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7a:	f7fd fc27 	bl	80025cc <HAL_GetTick>
 8004d7e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d80:	e015      	b.n	8004dae <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d82:	f7fd fc23 	bl	80025cc <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d90e      	bls.n	8004dae <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e00d      	b.n	8004dca <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d0e2      	beq.n	8004d82 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	791b      	ldrb	r3, [r3, #4]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_RNG_GenerateRandomNumber+0x1a>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e044      	b.n	8004e76 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	795b      	ldrb	r3, [r3, #5]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d133      	bne.n	8004e64 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e02:	f7fd fbe3 	bl	80025cc <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e08:	e018      	b.n	8004e3c <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e0a:	f7fd fbdf 	bl	80025cc <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d911      	bls.n	8004e3c <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d00a      	beq.n	8004e3c <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e01c      	b.n	8004e76 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d1df      	bne.n	8004e0a <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	715a      	strb	r2, [r3, #5]
 8004e62:	e004      	b.n	8004e6e <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2204      	movs	r2, #4
 8004e68:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	711a      	strb	r2, [r3, #4]

  return status;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2210      	movs	r2, #16
 8004ea0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e01f      	b.n	8004ee8 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01a      	beq.n	8004ee8 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d108      	bne.n	8004ece <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	e00c      	b.n	8004ee8 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0208 	bic.w	r2, r2, #8
 8004ee6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10b      	bne.n	8004f06 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f837 	bl	8004f68 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004f02:	605a      	str	r2, [r3, #4]

    return;
 8004f04:	e022      	b.n	8004f4c <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01d      	beq.n	8004f4c <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0208 	bic.w	r2, r2, #8
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	795b      	ldrb	r3, [r3, #5]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00b      	beq.n	8004f4c <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f803 	bl	8004f52 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d079      	beq.n	8005082 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc ff24 	bl	8001df0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d058      	beq.n	8005070 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	22ca      	movs	r2, #202	; 0xca
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2253      	movs	r2, #83	; 0x53
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f880 	bl	80050d4 <RTC_EnterInitMode>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d127      	bne.n	800502e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	68d2      	ldr	r2, [r2, #12]
 8005018:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6919      	ldr	r1, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	041a      	lsls	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f884 	bl	800513c <RTC_ExitInitMode>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d113      	bne.n	8005066 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0203 	bic.w	r2, r2, #3
 800504c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
 800506e:	e001      	b.n	8005074 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <HAL_RTC_WaitForSynchro+0x44>)
 800509a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800509c:	f7fd fa96 	bl	80025cc <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050a2:	e009      	b.n	80050b8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050a4:	f7fd fa92 	bl	80025cc <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b2:	d901      	bls.n	80050b8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e007      	b.n	80050c8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ee      	beq.n	80050a4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	0003ff5f 	.word	0x0003ff5f

080050d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d120      	bne.n	8005130 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80050f8:	f7fd fa68 	bl	80025cc <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050fe:	e00d      	b.n	800511c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005100:	f7fd fa64 	bl	80025cc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510e:	d905      	bls.n	800511c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2203      	movs	r2, #3
 8005118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <RTC_EnterInitMode+0x5c>
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d1e7      	bne.n	8005100 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <RTC_ExitInitMode+0x78>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <RTC_ExitInitMode+0x78>)
 800514e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005152:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <RTC_ExitInitMode+0x78>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10c      	bne.n	800517a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff93 	bl	800508c <HAL_RTC_WaitForSynchro>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2203      	movs	r2, #3
 8005170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	e017      	b.n	80051aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <RTC_ExitInitMode+0x78>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <RTC_ExitInitMode+0x78>)
 8005180:	f023 0320 	bic.w	r3, r3, #32
 8005184:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ff80 	bl	800508c <HAL_RTC_WaitForSynchro>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2203      	movs	r2, #3
 8005196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <RTC_ExitInitMode+0x78>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <RTC_ExitInitMode+0x78>)
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40002800 	.word	0x40002800

080051b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc ff82 	bl	80020e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fb7a 	bl	80058f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e049      	b.n	800530c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f841 	bl	8005314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fb23 	bl	80058f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d109      	bne.n	800534c <HAL_TIM_PWM_Start+0x24>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e03c      	b.n	80053c6 <HAL_TIM_PWM_Start+0x9e>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d109      	bne.n	8005366 <HAL_TIM_PWM_Start+0x3e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b01      	cmp	r3, #1
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e02f      	b.n	80053c6 <HAL_TIM_PWM_Start+0x9e>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d109      	bne.n	8005380 <HAL_TIM_PWM_Start+0x58>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	bf14      	ite	ne
 8005378:	2301      	movne	r3, #1
 800537a:	2300      	moveq	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	e022      	b.n	80053c6 <HAL_TIM_PWM_Start+0x9e>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d109      	bne.n	800539a <HAL_TIM_PWM_Start+0x72>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	bf14      	ite	ne
 8005392:	2301      	movne	r3, #1
 8005394:	2300      	moveq	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e015      	b.n	80053c6 <HAL_TIM_PWM_Start+0x9e>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b10      	cmp	r3, #16
 800539e:	d109      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x8c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e008      	b.n	80053c6 <HAL_TIM_PWM_Start+0x9e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e09c      	b.n	8005508 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0xb6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053dc:	e023      	b.n	8005426 <HAL_TIM_PWM_Start+0xfe>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xc6>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ec:	e01b      	b.n	8005426 <HAL_TIM_PWM_Start+0xfe>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0xd6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fc:	e013      	b.n	8005426 <HAL_TIM_PWM_Start+0xfe>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xe6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800540c:	e00b      	b.n	8005426 <HAL_TIM_PWM_Start+0xfe>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b10      	cmp	r3, #16
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0xf6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541c:	e003      	b.n	8005426 <HAL_TIM_PWM_Start+0xfe>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fe68 	bl	8006104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a35      	ldr	r2, [pc, #212]	; (8005510 <HAL_TIM_PWM_Start+0x1e8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d013      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a34      	ldr	r2, [pc, #208]	; (8005514 <HAL_TIM_PWM_Start+0x1ec>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a32      	ldr	r2, [pc, #200]	; (8005518 <HAL_TIM_PWM_Start+0x1f0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_TIM_PWM_Start+0x1f4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2f      	ldr	r2, [pc, #188]	; (8005520 <HAL_TIM_PWM_Start+0x1f8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_Start+0x142>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_TIM_PWM_Start+0x144>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_TIM_PWM_Start+0x1e8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d018      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a22      	ldr	r2, [pc, #136]	; (8005524 <HAL_TIM_PWM_Start+0x1fc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a21      	ldr	r2, [pc, #132]	; (8005528 <HAL_TIM_PWM_Start+0x200>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <HAL_TIM_PWM_Start+0x204>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_TIM_PWM_Start+0x1ec>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_PWM_Start+0x19e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_TIM_PWM_Start+0x1f0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d115      	bne.n	80054f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <HAL_TIM_PWM_Start+0x208>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d015      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1dc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e008      	b.n	8005504 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40012c00 	.word	0x40012c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	00010007 	.word	0x00010007

08005534 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800554e:	2302      	movs	r3, #2
 8005550:	e0ff      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b14      	cmp	r3, #20
 800555e:	f200 80f0 	bhi.w	8005742 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005743 	.word	0x08005743
 8005570:	08005743 	.word	0x08005743
 8005574:	08005743 	.word	0x08005743
 8005578:	080055fd 	.word	0x080055fd
 800557c:	08005743 	.word	0x08005743
 8005580:	08005743 	.word	0x08005743
 8005584:	08005743 	.word	0x08005743
 8005588:	0800563f 	.word	0x0800563f
 800558c:	08005743 	.word	0x08005743
 8005590:	08005743 	.word	0x08005743
 8005594:	08005743 	.word	0x08005743
 8005598:	0800567f 	.word	0x0800567f
 800559c:	08005743 	.word	0x08005743
 80055a0:	08005743 	.word	0x08005743
 80055a4:	08005743 	.word	0x08005743
 80055a8:	080056c1 	.word	0x080056c1
 80055ac:	08005743 	.word	0x08005743
 80055b0:	08005743 	.word	0x08005743
 80055b4:	08005743 	.word	0x08005743
 80055b8:	08005701 	.word	0x08005701
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fa2e 	bl	8005a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6999      	ldr	r1, [r3, #24]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
      break;
 80055fa:	e0a5      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fa9e 	bl	8005b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6999      	ldr	r1, [r3, #24]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	619a      	str	r2, [r3, #24]
      break;
 800563c:	e084      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fb07 	bl	8005c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69da      	ldr	r2, [r3, #28]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0208 	orr.w	r2, r2, #8
 8005658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0204 	bic.w	r2, r2, #4
 8005668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69d9      	ldr	r1, [r3, #28]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]
      break;
 800567c:	e064      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fb6f 	bl	8005d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69d9      	ldr	r1, [r3, #28]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	021a      	lsls	r2, r3, #8
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	61da      	str	r2, [r3, #28]
      break;
 80056be:	e043      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fbb8 	bl	8005e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0204 	bic.w	r2, r2, #4
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056fe:	e023      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fbfc 	bl	8005f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800571a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005740:	e002      	b.n	8005748 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
      break;
 8005746:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop

0800575c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIM_ConfigClockSource+0x1c>
 8005774:	2302      	movs	r3, #2
 8005776:	e0b6      	b.n	80058e6 <HAL_TIM_ConfigClockSource+0x18a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800579a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b4:	d03e      	beq.n	8005834 <HAL_TIM_ConfigClockSource+0xd8>
 80057b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ba:	f200 8087 	bhi.w	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	f000 8086 	beq.w	80058d2 <HAL_TIM_ConfigClockSource+0x176>
 80057c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ca:	d87f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057cc:	2b70      	cmp	r3, #112	; 0x70
 80057ce:	d01a      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xaa>
 80057d0:	2b70      	cmp	r3, #112	; 0x70
 80057d2:	d87b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057d4:	2b60      	cmp	r3, #96	; 0x60
 80057d6:	d050      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x11e>
 80057d8:	2b60      	cmp	r3, #96	; 0x60
 80057da:	d877      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057dc:	2b50      	cmp	r3, #80	; 0x50
 80057de:	d03c      	beq.n	800585a <HAL_TIM_ConfigClockSource+0xfe>
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d873      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d058      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x13e>
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d86f      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	d064      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15e>
 80057f0:	2b30      	cmp	r3, #48	; 0x30
 80057f2:	d86b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d060      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15e>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d867      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05c      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15e>
 8005800:	2b10      	cmp	r3, #16
 8005802:	d05a      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x15e>
 8005804:	e062      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005816:	f000 fc55 	bl	80060c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	609a      	str	r2, [r3, #8]
      break;
 8005832:	e04f      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005844:	f000 fc3e 	bl	80060c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005856:	609a      	str	r2, [r3, #8]
      break;
 8005858:	e03c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	461a      	mov	r2, r3
 8005868:	f000 fbb2 	bl	8005fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2150      	movs	r1, #80	; 0x50
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fc0b 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005878:	e02c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005886:	461a      	mov	r2, r3
 8005888:	f000 fbd1 	bl	800602e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2160      	movs	r1, #96	; 0x60
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fbfb 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 8005898:	e01c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 fb92 	bl	8005fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fbeb 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 80058b8:	e00c      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f000 fbe2 	bl	800608e <TIM_ITRx_SetConfig>
      break;
 80058ca:	e003      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
      break;
 80058d0:	e000      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a40      	ldr	r2, [pc, #256]	; (8005a04 <TIM_Base_SetConfig+0x114>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d00f      	beq.n	8005930 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <TIM_Base_SetConfig+0x118>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00b      	beq.n	8005930 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3c      	ldr	r2, [pc, #240]	; (8005a0c <TIM_Base_SetConfig+0x11c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d007      	beq.n	8005930 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3b      	ldr	r2, [pc, #236]	; (8005a10 <TIM_Base_SetConfig+0x120>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <TIM_Base_SetConfig+0x124>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d108      	bne.n	8005942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2f      	ldr	r2, [pc, #188]	; (8005a04 <TIM_Base_SetConfig+0x114>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01f      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005950:	d01b      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <TIM_Base_SetConfig+0x118>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d017      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <TIM_Base_SetConfig+0x11c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <TIM_Base_SetConfig+0x120>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00f      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a29      	ldr	r2, [pc, #164]	; (8005a14 <TIM_Base_SetConfig+0x124>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <TIM_Base_SetConfig+0x128>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <TIM_Base_SetConfig+0x12c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_Base_SetConfig+0x9a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <TIM_Base_SetConfig+0x130>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <TIM_Base_SetConfig+0x114>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_Base_SetConfig+0xf8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <TIM_Base_SetConfig+0x124>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_Base_SetConfig+0xf8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <TIM_Base_SetConfig+0x128>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_Base_SetConfig+0xf8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <TIM_Base_SetConfig+0x12c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_Base_SetConfig+0xf8>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <TIM_Base_SetConfig+0x130>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d103      	bne.n	80059f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	615a      	str	r2, [r3, #20]
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800

08005a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f023 0201 	bic.w	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f023 0302 	bic.w	r3, r3, #2
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a2c      	ldr	r2, [pc, #176]	; (8005b30 <TIM_OC1_SetConfig+0x10c>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00f      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x80>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <TIM_OC1_SetConfig+0x110>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a2a      	ldr	r2, [pc, #168]	; (8005b38 <TIM_OC1_SetConfig+0x114>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x80>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a29      	ldr	r2, [pc, #164]	; (8005b3c <TIM_OC1_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <TIM_OC1_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <TIM_OC1_SetConfig+0x10c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xc2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <TIM_OC1_SetConfig+0x110>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xc2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <TIM_OC1_SetConfig+0x114>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xc2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <TIM_OC1_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC1_SetConfig+0xc2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <TIM_OC1_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d111      	bne.n	8005b0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40012c00 	.word	0x40012c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	40014400 	.word	0x40014400
 8005b40:	40014800 	.word	0x40014800

08005b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f023 0210 	bic.w	r2, r3, #16
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0320 	bic.w	r3, r3, #32
 8005b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <TIM_OC2_SetConfig+0x100>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_OC2_SetConfig+0x6c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <TIM_OC2_SetConfig+0x104>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10d      	bne.n	8005bcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <TIM_OC2_SetConfig+0x100>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xb0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <TIM_OC2_SetConfig+0x104>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xb0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <TIM_OC2_SetConfig+0x108>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <TIM_OC2_SetConfig+0x10c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC2_SetConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <TIM_OC2_SetConfig+0x110>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <TIM_OC3_SetConfig+0xfc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_OC3_SetConfig+0x6a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a26      	ldr	r2, [pc, #152]	; (8005d58 <TIM_OC3_SetConfig+0x100>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10d      	bne.n	8005cde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <TIM_OC3_SetConfig+0xfc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_OC3_SetConfig+0xae>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <TIM_OC3_SetConfig+0x100>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_OC3_SetConfig+0xae>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <TIM_OC3_SetConfig+0x104>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_OC3_SetConfig+0xae>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	; (8005d60 <TIM_OC3_SetConfig+0x108>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC3_SetConfig+0xae>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <TIM_OC3_SetConfig+0x10c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d113      	bne.n	8005d2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800

08005d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <TIM_OC4_SetConfig+0xc0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_OC4_SetConfig+0x84>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <TIM_OC4_SetConfig+0xc4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_OC4_SetConfig+0x84>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <TIM_OC4_SetConfig+0xc8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_OC4_SetConfig+0x84>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <TIM_OC4_SetConfig+0xcc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC4_SetConfig+0x84>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a14      	ldr	r2, [pc, #80]	; (8005e38 <TIM_OC4_SetConfig+0xd0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d109      	bne.n	8005e00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	019b      	lsls	r3, r3, #6
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <TIM_OC5_SetConfig+0xb4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_OC5_SetConfig+0x7a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <TIM_OC5_SetConfig+0xb8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_OC5_SetConfig+0x7a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <TIM_OC5_SetConfig+0xbc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_OC5_SetConfig+0x7a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a14      	ldr	r2, [pc, #80]	; (8005efc <TIM_OC5_SetConfig+0xc0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC5_SetConfig+0x7a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <TIM_OC5_SetConfig+0xc4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d109      	bne.n	8005eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	021b      	lsls	r3, r3, #8
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_OC6_SetConfig+0xb8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_OC6_SetConfig+0x7c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <TIM_OC6_SetConfig+0xbc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_OC6_SetConfig+0x7c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <TIM_OC6_SetConfig+0xc0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_OC6_SetConfig+0x7c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <TIM_OC6_SetConfig+0xc4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC6_SetConfig+0x7c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <TIM_OC6_SetConfig+0xc8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d109      	bne.n	8005f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	029b      	lsls	r3, r3, #10
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f023 030a 	bic.w	r3, r3, #10
 800600c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f023 0210 	bic.w	r2, r3, #16
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	031b      	lsls	r3, r3, #12
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800606a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f043 0307 	orr.w	r3, r3, #7
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	021a      	lsls	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	609a      	str	r2, [r3, #8]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e068      	b.n	800623a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d108      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061da:	d018      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1a      	ldr	r2, [pc, #104]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a13      	ldr	r2, [pc, #76]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a14      	ldr	r2, [pc, #80]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d10c      	bne.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	4313      	orrs	r3, r2
 800621e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40013400 	.word	0x40013400
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40014000 	.word	0x40014000

08006260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e040      	b.n	80062f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc f812 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fe8a 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fbcf 	bl	8006a50 <UART_SetConfig>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e01b      	b.n	80062f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 ff09 	bl	8007104 <UART_CheckIdleState>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b08b      	sub	sp, #44	; 0x2c
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630e:	2b20      	cmp	r3, #32
 8006310:	d147      	bne.n	80063a2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_UART_Transmit_IT+0x22>
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e040      	b.n	80063a4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006354:	d107      	bne.n	8006366 <HAL_UART_Transmit_IT+0x6a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d103      	bne.n	8006366 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <HAL_UART_Transmit_IT+0xb4>)
 8006362:	66da      	str	r2, [r3, #108]	; 0x6c
 8006364:	e002      	b.n	800636c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4a12      	ldr	r2, [pc, #72]	; (80063b4 <HAL_UART_Transmit_IT+0xb8>)
 800636a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	613b      	str	r3, [r7, #16]
   return(result);
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	623b      	str	r3, [r7, #32]
 800638c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	69f9      	ldr	r1, [r7, #28]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	61bb      	str	r3, [r7, #24]
   return(result);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	372c      	adds	r7, #44	; 0x2c
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	0800765d 	.word	0x0800765d
 80063b4:	080075a5 	.word	0x080075a5

080063b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d137      	bne.n	8006440 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Receive_IT+0x24>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e030      	b.n	8006442 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <HAL_UART_Receive_IT+0x94>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d01f      	beq.n	8006430 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	613b      	str	r3, [r7, #16]
   return(result);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	61bb      	str	r3, [r7, #24]
   return(result);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	461a      	mov	r2, r3
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 ff74 	bl	8007324 <UART_Start_Receive_IT>
 800643c:	4603      	mov	r3, r0
 800643e:	e000      	b.n	8006442 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3728      	adds	r7, #40	; 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40008000 	.word	0x40008000

08006450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b0ba      	sub	sp, #232	; 0xe8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006476:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800647a:	f640 030f 	movw	r3, #2063	; 0x80f
 800647e:	4013      	ands	r3, r2
 8006480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800648c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00f      	beq.n	80064b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 82ae 	beq.w	8006a0a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	4798      	blx	r3
      }
      return;
 80064b6:	e2a8      	b.n	8006a0a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8117 	beq.w	80066f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064d2:	4b85      	ldr	r3, [pc, #532]	; (80066e8 <HAL_UART_IRQHandler+0x298>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 810a 	beq.w	80066f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d011      	beq.n	800650c <HAL_UART_IRQHandler+0xbc>
 80064e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2201      	movs	r2, #1
 80064fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d011      	beq.n	800653c <HAL_UART_IRQHandler+0xec>
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2202      	movs	r2, #2
 800652a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d011      	beq.n	800656c <HAL_UART_IRQHandler+0x11c>
 8006548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2204      	movs	r2, #4
 800655a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006562:	f043 0202 	orr.w	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006588:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	f043 0208 	orr.w	r2, r3, #8
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <HAL_UART_IRQHandler+0x18a>
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	f043 0220 	orr.w	r2, r3, #32
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8214 	beq.w	8006a0e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b40      	cmp	r3, #64	; 0x40
 8006624:	d005      	beq.n	8006632 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04f      	beq.n	80066d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 ff3c 	bl	80074b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d141      	bne.n	80066ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800665c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3308      	adds	r3, #8
 800666e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800667e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800668a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1d9      	bne.n	8006646 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006696:	2b00      	cmp	r3, #0
 8006698:	d013      	beq.n	80066c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669e:	4a13      	ldr	r2, [pc, #76]	; (80066ec <HAL_UART_IRQHandler+0x29c>)
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fc f90f 	bl	80028ca <HAL_DMA_Abort_IT>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d017      	beq.n	80066e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e00f      	b.n	80066e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9ae 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	e00b      	b.n	80066e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9aa 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	e007      	b.n	80066e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9a6 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80066e0:	e195      	b.n	8006a0e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e2:	bf00      	nop
    return;
 80066e4:	e193      	b.n	8006a0e <HAL_UART_IRQHandler+0x5be>
 80066e6:	bf00      	nop
 80066e8:	04000120 	.word	0x04000120
 80066ec:	08007579 	.word	0x08007579

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	f040 814e 	bne.w	8006996 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8147 	beq.w	8006996 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8140 	beq.w	8006996 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2210      	movs	r2, #16
 800671c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	f040 80b8 	bne.w	800689e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800673a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8167 	beq.w	8006a12 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800674a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800674e:	429a      	cmp	r2, r3
 8006750:	f080 815f 	bcs.w	8006a12 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800675a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8086 	bne.w	800687c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800679a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800679e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1da      	bne.n	8006770 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3308      	adds	r3, #8
 80067da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e1      	bne.n	80067ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800681a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800681c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006820:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e3      	bne.n	80067f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800685e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006860:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e4      	bne.n	800683c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006876:	4618      	mov	r0, r3
 8006878:	f7fb ffe9 	bl	800284e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688e:	b29b      	uxth	r3, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8ce 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800689c:	e0b9      	b.n	8006a12 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80ab 	beq.w	8006a16 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80068c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80a6 	beq.w	8006a16 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068ec:	647b      	str	r3, [r7, #68]	; 0x44
 80068ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e4      	bne.n	80068ca <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	623b      	str	r3, [r7, #32]
   return(result);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006924:	633a      	str	r2, [r7, #48]	; 0x30
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800692a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e3      	bne.n	8006900 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	60fb      	str	r3, [r7, #12]
   return(result);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0310 	bic.w	r3, r3, #16
 8006960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	69b9      	ldr	r1, [r7, #24]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	617b      	str	r3, [r7, #20]
   return(result);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e4      	bne.n	800694c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f852 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006994:	e03f      	b.n	8006a16 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <HAL_UART_IRQHandler+0x570>
 80069a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f895 	bl	8007ae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069be:	e02d      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00e      	beq.n	80069ea <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01c      	beq.n	8006a1a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
    }
    return;
 80069e8:	e017      	b.n	8006a1a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d012      	beq.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
 80069f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00c      	beq.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fe8a 	bl	800771c <UART_EndTransmit_IT>
    return;
 8006a08:	e008      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a0a:	bf00      	nop
 8006a0c:	e006      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a0e:	bf00      	nop
 8006a10:	e004      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a1c:	37e8      	adds	r7, #232	; 0xe8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop

08006a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a54:	b08a      	sub	sp, #40	; 0x28
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4ba4      	ldr	r3, [pc, #656]	; (8006d10 <UART_SetConfig+0x2c0>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a99      	ldr	r2, [pc, #612]	; (8006d14 <UART_SetConfig+0x2c4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a90      	ldr	r2, [pc, #576]	; (8006d18 <UART_SetConfig+0x2c8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d126      	bne.n	8006b28 <UART_SetConfig+0xd8>
 8006ada:	4b90      	ldr	r3, [pc, #576]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d81b      	bhi.n	8006b20 <UART_SetConfig+0xd0>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0xa0>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b19 	.word	0x08006b19
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b06:	e116      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0e:	e112      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b16:	e10e      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1e:	e10a      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b26:	e106      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a7c      	ldr	r2, [pc, #496]	; (8006d20 <UART_SetConfig+0x2d0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d138      	bne.n	8006ba4 <UART_SetConfig+0x154>
 8006b32:	4b7a      	ldr	r3, [pc, #488]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b38:	f003 030c 	and.w	r3, r3, #12
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	d82d      	bhi.n	8006b9c <UART_SetConfig+0x14c>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0xf8>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b7d 	.word	0x08006b7d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b9d 	.word	0x08006b9d
 8006b54:	08006b9d 	.word	0x08006b9d
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006b9d 	.word	0x08006b9d
 8006b60:	08006b9d 	.word	0x08006b9d
 8006b64:	08006b9d 	.word	0x08006b9d
 8006b68:	08006b85 	.word	0x08006b85
 8006b6c:	08006b9d 	.word	0x08006b9d
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006b95 	.word	0x08006b95
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e0d8      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e0d4      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e0d0      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e0cc      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba2:	e0c8      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a5e      	ldr	r2, [pc, #376]	; (8006d24 <UART_SetConfig+0x2d4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d125      	bne.n	8006bfa <UART_SetConfig+0x1aa>
 8006bae:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d016      	beq.n	8006bea <UART_SetConfig+0x19a>
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d818      	bhi.n	8006bf2 <UART_SetConfig+0x1a2>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d00a      	beq.n	8006bda <UART_SetConfig+0x18a>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d814      	bhi.n	8006bf2 <UART_SetConfig+0x1a2>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <UART_SetConfig+0x182>
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d008      	beq.n	8006be2 <UART_SetConfig+0x192>
 8006bd0:	e00f      	b.n	8006bf2 <UART_SetConfig+0x1a2>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd8:	e0ad      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be0:	e0a9      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006be2:	2304      	movs	r3, #4
 8006be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be8:	e0a5      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006bea:	2308      	movs	r3, #8
 8006bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf0:	e0a1      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006bf2:	2310      	movs	r3, #16
 8006bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf8:	e09d      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4a      	ldr	r2, [pc, #296]	; (8006d28 <UART_SetConfig+0x2d8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d125      	bne.n	8006c50 <UART_SetConfig+0x200>
 8006c04:	4b45      	ldr	r3, [pc, #276]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c10:	d016      	beq.n	8006c40 <UART_SetConfig+0x1f0>
 8006c12:	2bc0      	cmp	r3, #192	; 0xc0
 8006c14:	d818      	bhi.n	8006c48 <UART_SetConfig+0x1f8>
 8006c16:	2b80      	cmp	r3, #128	; 0x80
 8006c18:	d00a      	beq.n	8006c30 <UART_SetConfig+0x1e0>
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d814      	bhi.n	8006c48 <UART_SetConfig+0x1f8>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d002      	beq.n	8006c28 <UART_SetConfig+0x1d8>
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x1e8>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x1f8>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e082      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e07e      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e07a      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c46:	e076      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e072      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a35      	ldr	r2, [pc, #212]	; (8006d2c <UART_SetConfig+0x2dc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d12a      	bne.n	8006cb0 <UART_SetConfig+0x260>
 8006c5a:	4b30      	ldr	r3, [pc, #192]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c68:	d01a      	beq.n	8006ca0 <UART_SetConfig+0x250>
 8006c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6e:	d81b      	bhi.n	8006ca8 <UART_SetConfig+0x258>
 8006c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c74:	d00c      	beq.n	8006c90 <UART_SetConfig+0x240>
 8006c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7a:	d815      	bhi.n	8006ca8 <UART_SetConfig+0x258>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SetConfig+0x238>
 8006c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c84:	d008      	beq.n	8006c98 <UART_SetConfig+0x248>
 8006c86:	e00f      	b.n	8006ca8 <UART_SetConfig+0x258>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e052      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e04e      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e04a      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e046      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e042      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a17      	ldr	r2, [pc, #92]	; (8006d14 <UART_SetConfig+0x2c4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d13a      	bne.n	8006d30 <UART_SetConfig+0x2e0>
 8006cba:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <UART_SetConfig+0x2cc>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc8:	d01a      	beq.n	8006d00 <UART_SetConfig+0x2b0>
 8006cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cce:	d81b      	bhi.n	8006d08 <UART_SetConfig+0x2b8>
 8006cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd4:	d00c      	beq.n	8006cf0 <UART_SetConfig+0x2a0>
 8006cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cda:	d815      	bhi.n	8006d08 <UART_SetConfig+0x2b8>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <UART_SetConfig+0x298>
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce4:	d008      	beq.n	8006cf8 <UART_SetConfig+0x2a8>
 8006ce6:	e00f      	b.n	8006d08 <UART_SetConfig+0x2b8>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e022      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf6:	e01e      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfe:	e01a      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006d00:	2308      	movs	r3, #8
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d06:	e016      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0e:	e012      	b.n	8006d36 <UART_SetConfig+0x2e6>
 8006d10:	efff69f3 	.word	0xefff69f3
 8006d14:	40008000 	.word	0x40008000
 8006d18:	40013800 	.word	0x40013800
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40004400 	.word	0x40004400
 8006d24:	40004800 	.word	0x40004800
 8006d28:	40004c00 	.word	0x40004c00
 8006d2c:	40005000 	.word	0x40005000
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a9f      	ldr	r2, [pc, #636]	; (8006fb8 <UART_SetConfig+0x568>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d17a      	bne.n	8006e36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d824      	bhi.n	8006d92 <UART_SetConfig+0x342>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x300>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d75 	.word	0x08006d75
 8006d54:	08006d93 	.word	0x08006d93
 8006d58:	08006d7d 	.word	0x08006d7d
 8006d5c:	08006d93 	.word	0x08006d93
 8006d60:	08006d83 	.word	0x08006d83
 8006d64:	08006d93 	.word	0x08006d93
 8006d68:	08006d93 	.word	0x08006d93
 8006d6c:	08006d93 	.word	0x08006d93
 8006d70:	08006d8b 	.word	0x08006d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fd fa7e 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8006d78:	61f8      	str	r0, [r7, #28]
        break;
 8006d7a:	e010      	b.n	8006d9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d7c:	4b8f      	ldr	r3, [pc, #572]	; (8006fbc <UART_SetConfig+0x56c>)
 8006d7e:	61fb      	str	r3, [r7, #28]
        break;
 8006d80:	e00d      	b.n	8006d9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d82:	f7fd f9df 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8006d86:	61f8      	str	r0, [r7, #28]
        break;
 8006d88:	e009      	b.n	8006d9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8e:	61fb      	str	r3, [r7, #28]
        break;
 8006d90:	e005      	b.n	8006d9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80fb 	beq.w	8006f9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d305      	bcc.n	8006dc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d903      	bls.n	8006dca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006dc8:	e0e8      	b.n	8006f9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	461c      	mov	r4, r3
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	022b      	lsls	r3, r5, #8
 8006ddc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006de0:	0222      	lsls	r2, r4, #8
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	6849      	ldr	r1, [r1, #4]
 8006de6:	0849      	lsrs	r1, r1, #1
 8006de8:	2000      	movs	r0, #0
 8006dea:	4688      	mov	r8, r1
 8006dec:	4681      	mov	r9, r0
 8006dee:	eb12 0a08 	adds.w	sl, r2, r8
 8006df2:	eb43 0b09 	adc.w	fp, r3, r9
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e04:	4650      	mov	r0, sl
 8006e06:	4659      	mov	r1, fp
 8006e08:	f7f9 fa4a 	bl	80002a0 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4613      	mov	r3, r2
 8006e12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1a:	d308      	bcc.n	8006e2e <UART_SetConfig+0x3de>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d204      	bcs.n	8006e2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e0b6      	b.n	8006f9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e34:	e0b2      	b.n	8006f9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3e:	d15e      	bne.n	8006efe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d828      	bhi.n	8006e9a <UART_SetConfig+0x44a>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0x400>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e85 	.word	0x08006e85
 8006e5c:	08006e9b 	.word	0x08006e9b
 8006e60:	08006e8b 	.word	0x08006e8b
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006e9b 	.word	0x08006e9b
 8006e6c:	08006e9b 	.word	0x08006e9b
 8006e70:	08006e93 	.word	0x08006e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e74:	f7fd f9fe 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8006e78:	61f8      	str	r0, [r7, #28]
        break;
 8006e7a:	e014      	b.n	8006ea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7c:	f7fd fa10 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8006e80:	61f8      	str	r0, [r7, #28]
        break;
 8006e82:	e010      	b.n	8006ea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e84:	4b4d      	ldr	r3, [pc, #308]	; (8006fbc <UART_SetConfig+0x56c>)
 8006e86:	61fb      	str	r3, [r7, #28]
        break;
 8006e88:	e00d      	b.n	8006ea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fd f95b 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8006e8e:	61f8      	str	r0, [r7, #28]
        break;
 8006e90:	e009      	b.n	8006ea6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e96:	61fb      	str	r3, [r7, #28]
        break;
 8006e98:	e005      	b.n	8006ea6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d077      	beq.n	8006f9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	005a      	lsls	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	441a      	add	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b0f      	cmp	r3, #15
 8006ec6:	d916      	bls.n	8006ef6 <UART_SetConfig+0x4a6>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ece:	d212      	bcs.n	8006ef6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f023 030f 	bic.w	r3, r3, #15
 8006ed8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	8afb      	ldrh	r3, [r7, #22]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	8afa      	ldrh	r2, [r7, #22]
 8006ef2:	60da      	str	r2, [r3, #12]
 8006ef4:	e052      	b.n	8006f9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006efc:	e04e      	b.n	8006f9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d827      	bhi.n	8006f56 <UART_SetConfig+0x506>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0x4bc>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fd f9a0 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8006f34:	61f8      	str	r0, [r7, #28]
        break;
 8006f36:	e014      	b.n	8006f62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f38:	f7fd f9b2 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8006f3c:	61f8      	str	r0, [r7, #28]
        break;
 8006f3e:	e010      	b.n	8006f62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <UART_SetConfig+0x56c>)
 8006f42:	61fb      	str	r3, [r7, #28]
        break;
 8006f44:	e00d      	b.n	8006f62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fd f8fd 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8006f4a:	61f8      	str	r0, [r7, #28]
        break;
 8006f4c:	e009      	b.n	8006f62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f52:	61fb      	str	r3, [r7, #28]
        break;
 8006f54:	e005      	b.n	8006f62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f60:	bf00      	nop
    }

    if (pclk != 0U)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d019      	beq.n	8006f9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	085a      	lsrs	r2, r3, #1
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d909      	bls.n	8006f96 <UART_SetConfig+0x546>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f88:	d205      	bcs.n	8006f96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	e002      	b.n	8006f9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fa8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3728      	adds	r7, #40	; 0x28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40008000 	.word	0x40008000
 8006fbc:	00f42400 	.word	0x00f42400

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d10a      	bne.n	80070d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b098      	sub	sp, #96	; 0x60
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007114:	f7fb fa5a 	bl	80025cc <HAL_GetTick>
 8007118:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d12e      	bne.n	8007186 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f88c 	bl	8007254 <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d021      	beq.n	8007186 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007156:	653b      	str	r3, [r7, #80]	; 0x50
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
 8007162:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e062      	b.n	800724c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d149      	bne.n	8007228 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f856 	bl	8007254 <UART_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d03c      	beq.n	8007228 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	623b      	str	r3, [r7, #32]
   return(result);
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30
 80071ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e6      	bne.n	80071ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3308      	adds	r3, #8
 80071e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	69b9      	ldr	r1, [r7, #24]
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	617b      	str	r3, [r7, #20]
   return(result);
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e011      	b.n	800724c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3758      	adds	r7, #88	; 0x58
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	4613      	mov	r3, r2
 8007262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007264:	e049      	b.n	80072fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d045      	beq.n	80072fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726e:	f7fb f9ad 	bl	80025cc <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <UART_WaitOnFlagUntilTimeout+0x30>
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e048      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d031      	beq.n	80072fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	d110      	bne.n	80072c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2208      	movs	r2, #8
 80072aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f8ff 	bl	80074b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2208      	movs	r2, #8
 80072b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e029      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d4:	d111      	bne.n	80072fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f8e5 	bl	80074b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e00f      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	bf0c      	ite	eq
 800730a:	2301      	moveq	r3, #1
 800730c:	2300      	movne	r3, #0
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	429a      	cmp	r2, r3
 8007316:	d0a6      	beq.n	8007266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007324:	b480      	push	{r7}
 8007326:	b097      	sub	sp, #92	; 0x5c
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d10e      	bne.n	8007376 <UART_Start_Receive_IT+0x52>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <UART_Start_Receive_IT+0x48>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007366:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800736a:	e02d      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007374:	e028      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10d      	bne.n	800739a <UART_Start_Receive_IT+0x76>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <UART_Start_Receive_IT+0x6c>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738e:	e01b      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	227f      	movs	r2, #127	; 0x7f
 8007394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007398:	e016      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a2:	d10d      	bne.n	80073c0 <UART_Start_Receive_IT+0x9c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <UART_Start_Receive_IT+0x92>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	227f      	movs	r2, #127	; 0x7f
 80073b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073b4:	e008      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	223f      	movs	r2, #63	; 0x3f
 80073ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073be:	e003      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2222      	movs	r2, #34	; 0x22
 80073d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	657b      	str	r3, [r7, #84]	; 0x54
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80073fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007414:	d107      	bne.n	8007426 <UART_Start_Receive_IT+0x102>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a21      	ldr	r2, [pc, #132]	; (80074a8 <UART_Start_Receive_IT+0x184>)
 8007422:	669a      	str	r2, [r3, #104]	; 0x68
 8007424:	e002      	b.n	800742c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a20      	ldr	r2, [pc, #128]	; (80074ac <UART_Start_Receive_IT+0x188>)
 800742a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
 8007454:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_Start_Receive_IT+0x110>
 8007466:	e018      	b.n	800749a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f043 0320 	orr.w	r3, r3, #32
 800747c:	653b      	str	r3, [r7, #80]	; 0x50
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007486:	623b      	str	r3, [r7, #32]
 8007488:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	69f9      	ldr	r1, [r7, #28]
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	61bb      	str	r3, [r7, #24]
   return(result);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e6      	bne.n	8007468 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	375c      	adds	r7, #92	; 0x5c
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	0800792d 	.word	0x0800792d
 80074ac:	08007771 	.word	0x08007771

080074b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b095      	sub	sp, #84	; 0x54
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d6:	643b      	str	r3, [r7, #64]	; 0x40
 80074d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e6      	bne.n	80074b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	64bb      	str	r3, [r7, #72]	; 0x48
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800750a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e5      	bne.n	80074ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007522:	2b01      	cmp	r3, #1
 8007524:	d118      	bne.n	8007558 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60bb      	str	r3, [r7, #8]
   return(result);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6979      	ldr	r1, [r7, #20]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	613b      	str	r3, [r7, #16]
   return(result);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800756c:	bf00      	nop
 800756e:	3754      	adds	r7, #84	; 0x54
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fa44 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b08f      	sub	sp, #60	; 0x3c
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b0:	2b21      	cmp	r3, #33	; 0x21
 80075b2:	d14d      	bne.n	8007650 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d132      	bne.n	8007626 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007606:	633b      	str	r3, [r7, #48]	; 0x30
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6979      	ldr	r1, [r7, #20]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	613b      	str	r3, [r7, #16]
   return(result);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e6      	bne.n	80075f2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007624:	e014      	b.n	8007650 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b292      	uxth	r2, r2
 8007632:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007650:	bf00      	nop
 8007652:	373c      	adds	r7, #60	; 0x3c
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b091      	sub	sp, #68	; 0x44
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007668:	2b21      	cmp	r3, #33	; 0x21
 800766a:	d151      	bne.n	8007710 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d132      	bne.n	80076de <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	623b      	str	r3, [r7, #32]
   return(result);
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
 8007698:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e6      	bne.n	8007678 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076be:	637b      	str	r3, [r7, #52]	; 0x34
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	617b      	str	r3, [r7, #20]
   return(result);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80076dc:	e018      	b.n	8007710 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	881a      	ldrh	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f0:	b292      	uxth	r2, r2
 80076f2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f8:	1c9a      	adds	r2, r3, #2
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007710:	bf00      	nop
 8007712:	3744      	adds	r7, #68	; 0x44
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	60bb      	str	r3, [r7, #8]
   return(result);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	613b      	str	r3, [r7, #16]
   return(result);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7f9 ff4e 	bl	8001604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007768:	bf00      	nop
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b09c      	sub	sp, #112	; 0x70
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800777e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007788:	2b22      	cmp	r3, #34	; 0x22
 800778a:	f040 80be 	bne.w	800790a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007794:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800779c:	b2d9      	uxtb	r1, r3
 800779e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a8:	400a      	ands	r2, r1
 80077aa:	b2d2      	uxtb	r2, r2
 80077ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f040 80a3 	bne.w	800791e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80077f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	667b      	str	r3, [r7, #100]	; 0x64
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800782a:	647a      	str	r2, [r7, #68]	; 0x44
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <UART_RxISR_8BIT+0x1b8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d01f      	beq.n	800789c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d018      	beq.n	800789c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	623b      	str	r3, [r7, #32]
   return(result);
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800787e:	663b      	str	r3, [r7, #96]	; 0x60
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007888:	633b      	str	r3, [r7, #48]	; 0x30
 800788a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800788e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e6      	bne.n	800786a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d12e      	bne.n	8007902 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	69b9      	ldr	r1, [r7, #24]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	617b      	str	r3, [r7, #20]
   return(result);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b10      	cmp	r3, #16
 80078e8:	d103      	bne.n	80078f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2210      	movs	r2, #16
 80078f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff f89c 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007900:	e00d      	b.n	800791e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7f9 fd66 	bl	80013d4 <HAL_UART_RxCpltCallback>
}
 8007908:	e009      	b.n	800791e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	8b1b      	ldrh	r3, [r3, #24]
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0208 	orr.w	r2, r2, #8
 800791a:	b292      	uxth	r2, r2
 800791c:	831a      	strh	r2, [r3, #24]
}
 800791e:	bf00      	nop
 8007920:	3770      	adds	r7, #112	; 0x70
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40008000 	.word	0x40008000

0800792c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b09c      	sub	sp, #112	; 0x70
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800793a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007944:	2b22      	cmp	r3, #34	; 0x22
 8007946:	f040 80be 	bne.w	8007ac6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007950:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800795a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800795e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007962:	4013      	ands	r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007968:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	1c9a      	adds	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 80a3 	bne.w	8007ada <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80079a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079a8:	667b      	str	r3, [r7, #100]	; 0x64
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079b2:	657b      	str	r3, [r7, #84]	; 0x54
 80079b4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80079c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3308      	adds	r3, #8
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	f023 0301 	bic.w	r3, r3, #1
 80079dc:	663b      	str	r3, [r7, #96]	; 0x60
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3308      	adds	r3, #8
 80079e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079e6:	643a      	str	r2, [r7, #64]	; 0x40
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a34      	ldr	r2, [pc, #208]	; (8007ae4 <UART_RxISR_16BIT+0x1b8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01f      	beq.n	8007a58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d018      	beq.n	8007a58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d12e      	bne.n	8007abe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f023 0310 	bic.w	r3, r3, #16
 8007a7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6979      	ldr	r1, [r7, #20]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	613b      	str	r3, [r7, #16]
   return(result);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d103      	bne.n	8007aae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fe ffbe 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007abc:	e00d      	b.n	8007ada <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7f9 fc88 	bl	80013d4 <HAL_UART_RxCpltCallback>
}
 8007ac4:	e009      	b.n	8007ada <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	8b1b      	ldrh	r3, [r3, #24]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0208 	orr.w	r2, r2, #8
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	831a      	strh	r2, [r3, #24]
}
 8007ada:	bf00      	nop
 8007adc:	3770      	adds	r7, #112	; 0x70
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40008000 	.word	0x40008000

08007ae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <siprintf>:
 8007afc:	b40e      	push	{r1, r2, r3}
 8007afe:	b500      	push	{lr}
 8007b00:	b09c      	sub	sp, #112	; 0x70
 8007b02:	ab1d      	add	r3, sp, #116	; 0x74
 8007b04:	9002      	str	r0, [sp, #8]
 8007b06:	9006      	str	r0, [sp, #24]
 8007b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b0c:	4809      	ldr	r0, [pc, #36]	; (8007b34 <siprintf+0x38>)
 8007b0e:	9107      	str	r1, [sp, #28]
 8007b10:	9104      	str	r1, [sp, #16]
 8007b12:	4909      	ldr	r1, [pc, #36]	; (8007b38 <siprintf+0x3c>)
 8007b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b18:	9105      	str	r1, [sp, #20]
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	a902      	add	r1, sp, #8
 8007b20:	f000 f9c0 	bl	8007ea4 <_svfiprintf_r>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	b01c      	add	sp, #112	; 0x70
 8007b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b30:	b003      	add	sp, #12
 8007b32:	4770      	bx	lr
 8007b34:	200000c0 	.word	0x200000c0
 8007b38:	ffff0208 	.word	0xffff0208

08007b3c <memset>:
 8007b3c:	4402      	add	r2, r0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d100      	bne.n	8007b46 <memset+0xa>
 8007b44:	4770      	bx	lr
 8007b46:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4a:	e7f9      	b.n	8007b40 <memset+0x4>

08007b4c <strncmp>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	b16a      	cbz	r2, 8007b6c <strncmp+0x20>
 8007b50:	3901      	subs	r1, #1
 8007b52:	1884      	adds	r4, r0, r2
 8007b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d103      	bne.n	8007b68 <strncmp+0x1c>
 8007b60:	42a0      	cmp	r0, r4
 8007b62:	d001      	beq.n	8007b68 <strncmp+0x1c>
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	d1f5      	bne.n	8007b54 <strncmp+0x8>
 8007b68:	1ad0      	subs	r0, r2, r3
 8007b6a:	bd10      	pop	{r4, pc}
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	e7fc      	b.n	8007b6a <strncmp+0x1e>

08007b70 <strncpy>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	3901      	subs	r1, #1
 8007b74:	4603      	mov	r3, r0
 8007b76:	b132      	cbz	r2, 8007b86 <strncpy+0x16>
 8007b78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b7c:	f803 4b01 	strb.w	r4, [r3], #1
 8007b80:	3a01      	subs	r2, #1
 8007b82:	2c00      	cmp	r4, #0
 8007b84:	d1f7      	bne.n	8007b76 <strncpy+0x6>
 8007b86:	441a      	add	r2, r3
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d100      	bne.n	8007b90 <strncpy+0x20>
 8007b8e:	bd10      	pop	{r4, pc}
 8007b90:	f803 1b01 	strb.w	r1, [r3], #1
 8007b94:	e7f9      	b.n	8007b8a <strncpy+0x1a>
	...

08007b98 <__errno>:
 8007b98:	4b01      	ldr	r3, [pc, #4]	; (8007ba0 <__errno+0x8>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	200000c0 	.word	0x200000c0

08007ba4 <__libc_init_array>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4d0d      	ldr	r5, [pc, #52]	; (8007bdc <__libc_init_array+0x38>)
 8007ba8:	4c0d      	ldr	r4, [pc, #52]	; (8007be0 <__libc_init_array+0x3c>)
 8007baa:	1b64      	subs	r4, r4, r5
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	2600      	movs	r6, #0
 8007bb0:	42a6      	cmp	r6, r4
 8007bb2:	d109      	bne.n	8007bc8 <__libc_init_array+0x24>
 8007bb4:	4d0b      	ldr	r5, [pc, #44]	; (8007be4 <__libc_init_array+0x40>)
 8007bb6:	4c0c      	ldr	r4, [pc, #48]	; (8007be8 <__libc_init_array+0x44>)
 8007bb8:	f000 fc72 	bl	80084a0 <_init>
 8007bbc:	1b64      	subs	r4, r4, r5
 8007bbe:	10a4      	asrs	r4, r4, #2
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	42a6      	cmp	r6, r4
 8007bc4:	d105      	bne.n	8007bd2 <__libc_init_array+0x2e>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bcc:	4798      	blx	r3
 8007bce:	3601      	adds	r6, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__libc_init_array+0xc>
 8007bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd6:	4798      	blx	r3
 8007bd8:	3601      	adds	r6, #1
 8007bda:	e7f2      	b.n	8007bc2 <__libc_init_array+0x1e>
 8007bdc:	08008664 	.word	0x08008664
 8007be0:	08008664 	.word	0x08008664
 8007be4:	08008664 	.word	0x08008664
 8007be8:	08008668 	.word	0x08008668

08007bec <__retarget_lock_acquire_recursive>:
 8007bec:	4770      	bx	lr

08007bee <__retarget_lock_release_recursive>:
 8007bee:	4770      	bx	lr

08007bf0 <strcpy>:
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf6:	f803 2b01 	strb.w	r2, [r3], #1
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	d1f9      	bne.n	8007bf2 <strcpy+0x2>
 8007bfe:	4770      	bx	lr

08007c00 <_free_r>:
 8007c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c02:	2900      	cmp	r1, #0
 8007c04:	d044      	beq.n	8007c90 <_free_r+0x90>
 8007c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c0a:	9001      	str	r0, [sp, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007c12:	bfb8      	it	lt
 8007c14:	18e4      	addlt	r4, r4, r3
 8007c16:	f000 f8df 	bl	8007dd8 <__malloc_lock>
 8007c1a:	4a1e      	ldr	r2, [pc, #120]	; (8007c94 <_free_r+0x94>)
 8007c1c:	9801      	ldr	r0, [sp, #4]
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	b933      	cbnz	r3, 8007c30 <_free_r+0x30>
 8007c22:	6063      	str	r3, [r4, #4]
 8007c24:	6014      	str	r4, [r2, #0]
 8007c26:	b003      	add	sp, #12
 8007c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c2c:	f000 b8da 	b.w	8007de4 <__malloc_unlock>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d908      	bls.n	8007c46 <_free_r+0x46>
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1961      	adds	r1, r4, r5
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf01      	itttt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	1949      	addeq	r1, r1, r5
 8007c42:	6021      	streq	r1, [r4, #0]
 8007c44:	e7ed      	b.n	8007c22 <_free_r+0x22>
 8007c46:	461a      	mov	r2, r3
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b10b      	cbz	r3, 8007c50 <_free_r+0x50>
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	d9fa      	bls.n	8007c46 <_free_r+0x46>
 8007c50:	6811      	ldr	r1, [r2, #0]
 8007c52:	1855      	adds	r5, r2, r1
 8007c54:	42a5      	cmp	r5, r4
 8007c56:	d10b      	bne.n	8007c70 <_free_r+0x70>
 8007c58:	6824      	ldr	r4, [r4, #0]
 8007c5a:	4421      	add	r1, r4
 8007c5c:	1854      	adds	r4, r2, r1
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	d1e0      	bne.n	8007c26 <_free_r+0x26>
 8007c64:	681c      	ldr	r4, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	6053      	str	r3, [r2, #4]
 8007c6a:	440c      	add	r4, r1
 8007c6c:	6014      	str	r4, [r2, #0]
 8007c6e:	e7da      	b.n	8007c26 <_free_r+0x26>
 8007c70:	d902      	bls.n	8007c78 <_free_r+0x78>
 8007c72:	230c      	movs	r3, #12
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	e7d6      	b.n	8007c26 <_free_r+0x26>
 8007c78:	6825      	ldr	r5, [r4, #0]
 8007c7a:	1961      	adds	r1, r4, r5
 8007c7c:	428b      	cmp	r3, r1
 8007c7e:	bf04      	itt	eq
 8007c80:	6819      	ldreq	r1, [r3, #0]
 8007c82:	685b      	ldreq	r3, [r3, #4]
 8007c84:	6063      	str	r3, [r4, #4]
 8007c86:	bf04      	itt	eq
 8007c88:	1949      	addeq	r1, r1, r5
 8007c8a:	6021      	streq	r1, [r4, #0]
 8007c8c:	6054      	str	r4, [r2, #4]
 8007c8e:	e7ca      	b.n	8007c26 <_free_r+0x26>
 8007c90:	b003      	add	sp, #12
 8007c92:	bd30      	pop	{r4, r5, pc}
 8007c94:	20000710 	.word	0x20000710

08007c98 <sbrk_aligned>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	4e0e      	ldr	r6, [pc, #56]	; (8007cd4 <sbrk_aligned+0x3c>)
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	6831      	ldr	r1, [r6, #0]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	b911      	cbnz	r1, 8007caa <sbrk_aligned+0x12>
 8007ca4:	f000 fba6 	bl	80083f4 <_sbrk_r>
 8007ca8:	6030      	str	r0, [r6, #0]
 8007caa:	4621      	mov	r1, r4
 8007cac:	4628      	mov	r0, r5
 8007cae:	f000 fba1 	bl	80083f4 <_sbrk_r>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	d00a      	beq.n	8007ccc <sbrk_aligned+0x34>
 8007cb6:	1cc4      	adds	r4, r0, #3
 8007cb8:	f024 0403 	bic.w	r4, r4, #3
 8007cbc:	42a0      	cmp	r0, r4
 8007cbe:	d007      	beq.n	8007cd0 <sbrk_aligned+0x38>
 8007cc0:	1a21      	subs	r1, r4, r0
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 fb96 	bl	80083f4 <_sbrk_r>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d101      	bne.n	8007cd0 <sbrk_aligned+0x38>
 8007ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	20000714 	.word	0x20000714

08007cd8 <_malloc_r>:
 8007cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	1ccd      	adds	r5, r1, #3
 8007cde:	f025 0503 	bic.w	r5, r5, #3
 8007ce2:	3508      	adds	r5, #8
 8007ce4:	2d0c      	cmp	r5, #12
 8007ce6:	bf38      	it	cc
 8007ce8:	250c      	movcc	r5, #12
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	4607      	mov	r7, r0
 8007cee:	db01      	blt.n	8007cf4 <_malloc_r+0x1c>
 8007cf0:	42a9      	cmp	r1, r5
 8007cf2:	d905      	bls.n	8007d00 <_malloc_r+0x28>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007dd4 <_malloc_r+0xfc>
 8007d04:	f000 f868 	bl	8007dd8 <__malloc_lock>
 8007d08:	f8d8 3000 	ldr.w	r3, [r8]
 8007d0c:	461c      	mov	r4, r3
 8007d0e:	bb5c      	cbnz	r4, 8007d68 <_malloc_r+0x90>
 8007d10:	4629      	mov	r1, r5
 8007d12:	4638      	mov	r0, r7
 8007d14:	f7ff ffc0 	bl	8007c98 <sbrk_aligned>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	d155      	bne.n	8007dca <_malloc_r+0xf2>
 8007d1e:	f8d8 4000 	ldr.w	r4, [r8]
 8007d22:	4626      	mov	r6, r4
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	d145      	bne.n	8007db4 <_malloc_r+0xdc>
 8007d28:	2c00      	cmp	r4, #0
 8007d2a:	d048      	beq.n	8007dbe <_malloc_r+0xe6>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4638      	mov	r0, r7
 8007d32:	eb04 0903 	add.w	r9, r4, r3
 8007d36:	f000 fb5d 	bl	80083f4 <_sbrk_r>
 8007d3a:	4581      	cmp	r9, r0
 8007d3c:	d13f      	bne.n	8007dbe <_malloc_r+0xe6>
 8007d3e:	6821      	ldr	r1, [r4, #0]
 8007d40:	1a6d      	subs	r5, r5, r1
 8007d42:	4629      	mov	r1, r5
 8007d44:	4638      	mov	r0, r7
 8007d46:	f7ff ffa7 	bl	8007c98 <sbrk_aligned>
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d037      	beq.n	8007dbe <_malloc_r+0xe6>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	442b      	add	r3, r5
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	f8d8 3000 	ldr.w	r3, [r8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d038      	beq.n	8007dce <_malloc_r+0xf6>
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	42a2      	cmp	r2, r4
 8007d60:	d12b      	bne.n	8007dba <_malloc_r+0xe2>
 8007d62:	2200      	movs	r2, #0
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	e00f      	b.n	8007d88 <_malloc_r+0xb0>
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	1b52      	subs	r2, r2, r5
 8007d6c:	d41f      	bmi.n	8007dae <_malloc_r+0xd6>
 8007d6e:	2a0b      	cmp	r2, #11
 8007d70:	d917      	bls.n	8007da2 <_malloc_r+0xca>
 8007d72:	1961      	adds	r1, r4, r5
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	6025      	str	r5, [r4, #0]
 8007d78:	bf18      	it	ne
 8007d7a:	6059      	strne	r1, [r3, #4]
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	bf08      	it	eq
 8007d80:	f8c8 1000 	streq.w	r1, [r8]
 8007d84:	5162      	str	r2, [r4, r5]
 8007d86:	604b      	str	r3, [r1, #4]
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f104 060b 	add.w	r6, r4, #11
 8007d8e:	f000 f829 	bl	8007de4 <__malloc_unlock>
 8007d92:	f026 0607 	bic.w	r6, r6, #7
 8007d96:	1d23      	adds	r3, r4, #4
 8007d98:	1af2      	subs	r2, r6, r3
 8007d9a:	d0ae      	beq.n	8007cfa <_malloc_r+0x22>
 8007d9c:	1b9b      	subs	r3, r3, r6
 8007d9e:	50a3      	str	r3, [r4, r2]
 8007da0:	e7ab      	b.n	8007cfa <_malloc_r+0x22>
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	6862      	ldr	r2, [r4, #4]
 8007da6:	d1dd      	bne.n	8007d64 <_malloc_r+0x8c>
 8007da8:	f8c8 2000 	str.w	r2, [r8]
 8007dac:	e7ec      	b.n	8007d88 <_malloc_r+0xb0>
 8007dae:	4623      	mov	r3, r4
 8007db0:	6864      	ldr	r4, [r4, #4]
 8007db2:	e7ac      	b.n	8007d0e <_malloc_r+0x36>
 8007db4:	4634      	mov	r4, r6
 8007db6:	6876      	ldr	r6, [r6, #4]
 8007db8:	e7b4      	b.n	8007d24 <_malloc_r+0x4c>
 8007dba:	4613      	mov	r3, r2
 8007dbc:	e7cc      	b.n	8007d58 <_malloc_r+0x80>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	603b      	str	r3, [r7, #0]
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f000 f80e 	bl	8007de4 <__malloc_unlock>
 8007dc8:	e797      	b.n	8007cfa <_malloc_r+0x22>
 8007dca:	6025      	str	r5, [r4, #0]
 8007dcc:	e7dc      	b.n	8007d88 <_malloc_r+0xb0>
 8007dce:	605b      	str	r3, [r3, #4]
 8007dd0:	deff      	udf	#255	; 0xff
 8007dd2:	bf00      	nop
 8007dd4:	20000710 	.word	0x20000710

08007dd8 <__malloc_lock>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__malloc_lock+0x8>)
 8007dda:	f7ff bf07 	b.w	8007bec <__retarget_lock_acquire_recursive>
 8007dde:	bf00      	nop
 8007de0:	2000070c 	.word	0x2000070c

08007de4 <__malloc_unlock>:
 8007de4:	4801      	ldr	r0, [pc, #4]	; (8007dec <__malloc_unlock+0x8>)
 8007de6:	f7ff bf02 	b.w	8007bee <__retarget_lock_release_recursive>
 8007dea:	bf00      	nop
 8007dec:	2000070c 	.word	0x2000070c

08007df0 <__ssputs_r>:
 8007df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df4:	688e      	ldr	r6, [r1, #8]
 8007df6:	461f      	mov	r7, r3
 8007df8:	42be      	cmp	r6, r7
 8007dfa:	680b      	ldr	r3, [r1, #0]
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	4690      	mov	r8, r2
 8007e02:	d82c      	bhi.n	8007e5e <__ssputs_r+0x6e>
 8007e04:	898a      	ldrh	r2, [r1, #12]
 8007e06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e0a:	d026      	beq.n	8007e5a <__ssputs_r+0x6a>
 8007e0c:	6965      	ldr	r5, [r4, #20]
 8007e0e:	6909      	ldr	r1, [r1, #16]
 8007e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e14:	eba3 0901 	sub.w	r9, r3, r1
 8007e18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e1c:	1c7b      	adds	r3, r7, #1
 8007e1e:	444b      	add	r3, r9
 8007e20:	106d      	asrs	r5, r5, #1
 8007e22:	429d      	cmp	r5, r3
 8007e24:	bf38      	it	cc
 8007e26:	461d      	movcc	r5, r3
 8007e28:	0553      	lsls	r3, r2, #21
 8007e2a:	d527      	bpl.n	8007e7c <__ssputs_r+0x8c>
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7ff ff53 	bl	8007cd8 <_malloc_r>
 8007e32:	4606      	mov	r6, r0
 8007e34:	b360      	cbz	r0, 8007e90 <__ssputs_r+0xa0>
 8007e36:	6921      	ldr	r1, [r4, #16]
 8007e38:	464a      	mov	r2, r9
 8007e3a:	f000 faeb 	bl	8008414 <memcpy>
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	81a3      	strh	r3, [r4, #12]
 8007e4a:	6126      	str	r6, [r4, #16]
 8007e4c:	6165      	str	r5, [r4, #20]
 8007e4e:	444e      	add	r6, r9
 8007e50:	eba5 0509 	sub.w	r5, r5, r9
 8007e54:	6026      	str	r6, [r4, #0]
 8007e56:	60a5      	str	r5, [r4, #8]
 8007e58:	463e      	mov	r6, r7
 8007e5a:	42be      	cmp	r6, r7
 8007e5c:	d900      	bls.n	8007e60 <__ssputs_r+0x70>
 8007e5e:	463e      	mov	r6, r7
 8007e60:	6820      	ldr	r0, [r4, #0]
 8007e62:	4632      	mov	r2, r6
 8007e64:	4641      	mov	r1, r8
 8007e66:	f000 faab 	bl	80083c0 <memmove>
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	1b9b      	subs	r3, r3, r6
 8007e6e:	60a3      	str	r3, [r4, #8]
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	4433      	add	r3, r6
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	2000      	movs	r0, #0
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	f000 fad7 	bl	8008430 <_realloc_r>
 8007e82:	4606      	mov	r6, r0
 8007e84:	2800      	cmp	r0, #0
 8007e86:	d1e0      	bne.n	8007e4a <__ssputs_r+0x5a>
 8007e88:	6921      	ldr	r1, [r4, #16]
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f7ff feb8 	bl	8007c00 <_free_r>
 8007e90:	230c      	movs	r3, #12
 8007e92:	f8ca 3000 	str.w	r3, [sl]
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea2:	e7e9      	b.n	8007e78 <__ssputs_r+0x88>

08007ea4 <_svfiprintf_r>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	898b      	ldrh	r3, [r1, #12]
 8007eac:	061b      	lsls	r3, r3, #24
 8007eae:	b09d      	sub	sp, #116	; 0x74
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	d50e      	bpl.n	8007ed6 <_svfiprintf_r+0x32>
 8007eb8:	690b      	ldr	r3, [r1, #16]
 8007eba:	b963      	cbnz	r3, 8007ed6 <_svfiprintf_r+0x32>
 8007ebc:	2140      	movs	r1, #64	; 0x40
 8007ebe:	f7ff ff0b 	bl	8007cd8 <_malloc_r>
 8007ec2:	6028      	str	r0, [r5, #0]
 8007ec4:	6128      	str	r0, [r5, #16]
 8007ec6:	b920      	cbnz	r0, 8007ed2 <_svfiprintf_r+0x2e>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	e0d0      	b.n	8008074 <_svfiprintf_r+0x1d0>
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	616b      	str	r3, [r5, #20]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8007eda:	2320      	movs	r3, #32
 8007edc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee4:	2330      	movs	r3, #48	; 0x30
 8007ee6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800808c <_svfiprintf_r+0x1e8>
 8007eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eee:	f04f 0901 	mov.w	r9, #1
 8007ef2:	4623      	mov	r3, r4
 8007ef4:	469a      	mov	sl, r3
 8007ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007efa:	b10a      	cbz	r2, 8007f00 <_svfiprintf_r+0x5c>
 8007efc:	2a25      	cmp	r2, #37	; 0x25
 8007efe:	d1f9      	bne.n	8007ef4 <_svfiprintf_r+0x50>
 8007f00:	ebba 0b04 	subs.w	fp, sl, r4
 8007f04:	d00b      	beq.n	8007f1e <_svfiprintf_r+0x7a>
 8007f06:	465b      	mov	r3, fp
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff ff6f 	bl	8007df0 <__ssputs_r>
 8007f12:	3001      	adds	r0, #1
 8007f14:	f000 80a9 	beq.w	800806a <_svfiprintf_r+0x1c6>
 8007f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1a:	445a      	add	r2, fp
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 80a1 	beq.w	800806a <_svfiprintf_r+0x1c6>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f32:	f10a 0a01 	add.w	sl, sl, #1
 8007f36:	9304      	str	r3, [sp, #16]
 8007f38:	9307      	str	r3, [sp, #28]
 8007f3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f3e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f40:	4654      	mov	r4, sl
 8007f42:	2205      	movs	r2, #5
 8007f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f48:	4850      	ldr	r0, [pc, #320]	; (800808c <_svfiprintf_r+0x1e8>)
 8007f4a:	f7f8 f959 	bl	8000200 <memchr>
 8007f4e:	9a04      	ldr	r2, [sp, #16]
 8007f50:	b9d8      	cbnz	r0, 8007f8a <_svfiprintf_r+0xe6>
 8007f52:	06d0      	lsls	r0, r2, #27
 8007f54:	bf44      	itt	mi
 8007f56:	2320      	movmi	r3, #32
 8007f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f5c:	0711      	lsls	r1, r2, #28
 8007f5e:	bf44      	itt	mi
 8007f60:	232b      	movmi	r3, #43	; 0x2b
 8007f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f66:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6c:	d015      	beq.n	8007f9a <_svfiprintf_r+0xf6>
 8007f6e:	9a07      	ldr	r2, [sp, #28]
 8007f70:	4654      	mov	r4, sl
 8007f72:	2000      	movs	r0, #0
 8007f74:	f04f 0c0a 	mov.w	ip, #10
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f7e:	3b30      	subs	r3, #48	; 0x30
 8007f80:	2b09      	cmp	r3, #9
 8007f82:	d94d      	bls.n	8008020 <_svfiprintf_r+0x17c>
 8007f84:	b1b0      	cbz	r0, 8007fb4 <_svfiprintf_r+0x110>
 8007f86:	9207      	str	r2, [sp, #28]
 8007f88:	e014      	b.n	8007fb4 <_svfiprintf_r+0x110>
 8007f8a:	eba0 0308 	sub.w	r3, r0, r8
 8007f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	9304      	str	r3, [sp, #16]
 8007f96:	46a2      	mov	sl, r4
 8007f98:	e7d2      	b.n	8007f40 <_svfiprintf_r+0x9c>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	1d19      	adds	r1, r3, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	9103      	str	r1, [sp, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfbb      	ittet	lt
 8007fa6:	425b      	neglt	r3, r3
 8007fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8007fac:	9307      	strge	r3, [sp, #28]
 8007fae:	9307      	strlt	r3, [sp, #28]
 8007fb0:	bfb8      	it	lt
 8007fb2:	9204      	strlt	r2, [sp, #16]
 8007fb4:	7823      	ldrb	r3, [r4, #0]
 8007fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fb8:	d10c      	bne.n	8007fd4 <_svfiprintf_r+0x130>
 8007fba:	7863      	ldrb	r3, [r4, #1]
 8007fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007fbe:	d134      	bne.n	800802a <_svfiprintf_r+0x186>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	1d1a      	adds	r2, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	9203      	str	r2, [sp, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bfb8      	it	lt
 8007fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fd0:	3402      	adds	r4, #2
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800809c <_svfiprintf_r+0x1f8>
 8007fd8:	7821      	ldrb	r1, [r4, #0]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	4650      	mov	r0, sl
 8007fde:	f7f8 f90f 	bl	8000200 <memchr>
 8007fe2:	b138      	cbz	r0, 8007ff4 <_svfiprintf_r+0x150>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	eba0 000a 	sub.w	r0, r0, sl
 8007fea:	2240      	movs	r2, #64	; 0x40
 8007fec:	4082      	lsls	r2, r0
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	4825      	ldr	r0, [pc, #148]	; (8008090 <_svfiprintf_r+0x1ec>)
 8007ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ffe:	2206      	movs	r2, #6
 8008000:	f7f8 f8fe 	bl	8000200 <memchr>
 8008004:	2800      	cmp	r0, #0
 8008006:	d038      	beq.n	800807a <_svfiprintf_r+0x1d6>
 8008008:	4b22      	ldr	r3, [pc, #136]	; (8008094 <_svfiprintf_r+0x1f0>)
 800800a:	bb1b      	cbnz	r3, 8008054 <_svfiprintf_r+0x1b0>
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	3307      	adds	r3, #7
 8008010:	f023 0307 	bic.w	r3, r3, #7
 8008014:	3308      	adds	r3, #8
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	4433      	add	r3, r6
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	e768      	b.n	8007ef2 <_svfiprintf_r+0x4e>
 8008020:	fb0c 3202 	mla	r2, ip, r2, r3
 8008024:	460c      	mov	r4, r1
 8008026:	2001      	movs	r0, #1
 8008028:	e7a6      	b.n	8007f78 <_svfiprintf_r+0xd4>
 800802a:	2300      	movs	r3, #0
 800802c:	3401      	adds	r4, #1
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	4619      	mov	r1, r3
 8008032:	f04f 0c0a 	mov.w	ip, #10
 8008036:	4620      	mov	r0, r4
 8008038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800803c:	3a30      	subs	r2, #48	; 0x30
 800803e:	2a09      	cmp	r2, #9
 8008040:	d903      	bls.n	800804a <_svfiprintf_r+0x1a6>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0c6      	beq.n	8007fd4 <_svfiprintf_r+0x130>
 8008046:	9105      	str	r1, [sp, #20]
 8008048:	e7c4      	b.n	8007fd4 <_svfiprintf_r+0x130>
 800804a:	fb0c 2101 	mla	r1, ip, r1, r2
 800804e:	4604      	mov	r4, r0
 8008050:	2301      	movs	r3, #1
 8008052:	e7f0      	b.n	8008036 <_svfiprintf_r+0x192>
 8008054:	ab03      	add	r3, sp, #12
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	462a      	mov	r2, r5
 800805a:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <_svfiprintf_r+0x1f4>)
 800805c:	a904      	add	r1, sp, #16
 800805e:	4638      	mov	r0, r7
 8008060:	f3af 8000 	nop.w
 8008064:	1c42      	adds	r2, r0, #1
 8008066:	4606      	mov	r6, r0
 8008068:	d1d6      	bne.n	8008018 <_svfiprintf_r+0x174>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	065b      	lsls	r3, r3, #25
 800806e:	f53f af2d 	bmi.w	8007ecc <_svfiprintf_r+0x28>
 8008072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008074:	b01d      	add	sp, #116	; 0x74
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807a:	ab03      	add	r3, sp, #12
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	462a      	mov	r2, r5
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <_svfiprintf_r+0x1f4>)
 8008082:	a904      	add	r1, sp, #16
 8008084:	4638      	mov	r0, r7
 8008086:	f000 f879 	bl	800817c <_printf_i>
 800808a:	e7eb      	b.n	8008064 <_svfiprintf_r+0x1c0>
 800808c:	08008628 	.word	0x08008628
 8008090:	08008632 	.word	0x08008632
 8008094:	00000000 	.word	0x00000000
 8008098:	08007df1 	.word	0x08007df1
 800809c:	0800862e 	.word	0x0800862e

080080a0 <_printf_common>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	4616      	mov	r6, r2
 80080a6:	4699      	mov	r9, r3
 80080a8:	688a      	ldr	r2, [r1, #8]
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bfb8      	it	lt
 80080b4:	4613      	movlt	r3, r2
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080bc:	4607      	mov	r7, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b10a      	cbz	r2, 80080c6 <_printf_common+0x26>
 80080c2:	3301      	adds	r3, #1
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	0699      	lsls	r1, r3, #26
 80080ca:	bf42      	ittt	mi
 80080cc:	6833      	ldrmi	r3, [r6, #0]
 80080ce:	3302      	addmi	r3, #2
 80080d0:	6033      	strmi	r3, [r6, #0]
 80080d2:	6825      	ldr	r5, [r4, #0]
 80080d4:	f015 0506 	ands.w	r5, r5, #6
 80080d8:	d106      	bne.n	80080e8 <_printf_common+0x48>
 80080da:	f104 0a19 	add.w	sl, r4, #25
 80080de:	68e3      	ldr	r3, [r4, #12]
 80080e0:	6832      	ldr	r2, [r6, #0]
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc26      	bgt.n	8008136 <_printf_common+0x96>
 80080e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080ec:	1e13      	subs	r3, r2, #0
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	bf18      	it	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	0692      	lsls	r2, r2, #26
 80080f6:	d42b      	bmi.n	8008150 <_printf_common+0xb0>
 80080f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080fc:	4649      	mov	r1, r9
 80080fe:	4638      	mov	r0, r7
 8008100:	47c0      	blx	r8
 8008102:	3001      	adds	r0, #1
 8008104:	d01e      	beq.n	8008144 <_printf_common+0xa4>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	f003 0306 	and.w	r3, r3, #6
 800810e:	2b04      	cmp	r3, #4
 8008110:	bf02      	ittt	eq
 8008112:	68e5      	ldreq	r5, [r4, #12]
 8008114:	6833      	ldreq	r3, [r6, #0]
 8008116:	1aed      	subeq	r5, r5, r3
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	bf0c      	ite	eq
 800811c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008120:	2500      	movne	r5, #0
 8008122:	4293      	cmp	r3, r2
 8008124:	bfc4      	itt	gt
 8008126:	1a9b      	subgt	r3, r3, r2
 8008128:	18ed      	addgt	r5, r5, r3
 800812a:	2600      	movs	r6, #0
 800812c:	341a      	adds	r4, #26
 800812e:	42b5      	cmp	r5, r6
 8008130:	d11a      	bne.n	8008168 <_printf_common+0xc8>
 8008132:	2000      	movs	r0, #0
 8008134:	e008      	b.n	8008148 <_printf_common+0xa8>
 8008136:	2301      	movs	r3, #1
 8008138:	4652      	mov	r2, sl
 800813a:	4649      	mov	r1, r9
 800813c:	4638      	mov	r0, r7
 800813e:	47c0      	blx	r8
 8008140:	3001      	adds	r0, #1
 8008142:	d103      	bne.n	800814c <_printf_common+0xac>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	3501      	adds	r5, #1
 800814e:	e7c6      	b.n	80080de <_printf_common+0x3e>
 8008150:	18e1      	adds	r1, r4, r3
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	2030      	movs	r0, #48	; 0x30
 8008156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800815a:	4422      	add	r2, r4
 800815c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008164:	3302      	adds	r3, #2
 8008166:	e7c7      	b.n	80080f8 <_printf_common+0x58>
 8008168:	2301      	movs	r3, #1
 800816a:	4622      	mov	r2, r4
 800816c:	4649      	mov	r1, r9
 800816e:	4638      	mov	r0, r7
 8008170:	47c0      	blx	r8
 8008172:	3001      	adds	r0, #1
 8008174:	d0e6      	beq.n	8008144 <_printf_common+0xa4>
 8008176:	3601      	adds	r6, #1
 8008178:	e7d9      	b.n	800812e <_printf_common+0x8e>
	...

0800817c <_printf_i>:
 800817c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	7e0f      	ldrb	r7, [r1, #24]
 8008182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008184:	2f78      	cmp	r7, #120	; 0x78
 8008186:	4691      	mov	r9, r2
 8008188:	4680      	mov	r8, r0
 800818a:	460c      	mov	r4, r1
 800818c:	469a      	mov	sl, r3
 800818e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008192:	d807      	bhi.n	80081a4 <_printf_i+0x28>
 8008194:	2f62      	cmp	r7, #98	; 0x62
 8008196:	d80a      	bhi.n	80081ae <_printf_i+0x32>
 8008198:	2f00      	cmp	r7, #0
 800819a:	f000 80d4 	beq.w	8008346 <_printf_i+0x1ca>
 800819e:	2f58      	cmp	r7, #88	; 0x58
 80081a0:	f000 80c0 	beq.w	8008324 <_printf_i+0x1a8>
 80081a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081ac:	e03a      	b.n	8008224 <_printf_i+0xa8>
 80081ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081b2:	2b15      	cmp	r3, #21
 80081b4:	d8f6      	bhi.n	80081a4 <_printf_i+0x28>
 80081b6:	a101      	add	r1, pc, #4	; (adr r1, 80081bc <_printf_i+0x40>)
 80081b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008229 	.word	0x08008229
 80081c4:	080081a5 	.word	0x080081a5
 80081c8:	080081a5 	.word	0x080081a5
 80081cc:	080081a5 	.word	0x080081a5
 80081d0:	080081a5 	.word	0x080081a5
 80081d4:	08008229 	.word	0x08008229
 80081d8:	080081a5 	.word	0x080081a5
 80081dc:	080081a5 	.word	0x080081a5
 80081e0:	080081a5 	.word	0x080081a5
 80081e4:	080081a5 	.word	0x080081a5
 80081e8:	0800832d 	.word	0x0800832d
 80081ec:	08008255 	.word	0x08008255
 80081f0:	080082e7 	.word	0x080082e7
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	0800834f 	.word	0x0800834f
 8008200:	080081a5 	.word	0x080081a5
 8008204:	08008255 	.word	0x08008255
 8008208:	080081a5 	.word	0x080081a5
 800820c:	080081a5 	.word	0x080081a5
 8008210:	080082ef 	.word	0x080082ef
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008224:	2301      	movs	r3, #1
 8008226:	e09f      	b.n	8008368 <_printf_i+0x1ec>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	0607      	lsls	r7, r0, #24
 800822e:	f103 0104 	add.w	r1, r3, #4
 8008232:	6029      	str	r1, [r5, #0]
 8008234:	d501      	bpl.n	800823a <_printf_i+0xbe>
 8008236:	681e      	ldr	r6, [r3, #0]
 8008238:	e003      	b.n	8008242 <_printf_i+0xc6>
 800823a:	0646      	lsls	r6, r0, #25
 800823c:	d5fb      	bpl.n	8008236 <_printf_i+0xba>
 800823e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008242:	2e00      	cmp	r6, #0
 8008244:	da03      	bge.n	800824e <_printf_i+0xd2>
 8008246:	232d      	movs	r3, #45	; 0x2d
 8008248:	4276      	negs	r6, r6
 800824a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824e:	485a      	ldr	r0, [pc, #360]	; (80083b8 <_printf_i+0x23c>)
 8008250:	230a      	movs	r3, #10
 8008252:	e012      	b.n	800827a <_printf_i+0xfe>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1d19      	adds	r1, r3, #4
 800825a:	6029      	str	r1, [r5, #0]
 800825c:	0605      	lsls	r5, r0, #24
 800825e:	d501      	bpl.n	8008264 <_printf_i+0xe8>
 8008260:	681e      	ldr	r6, [r3, #0]
 8008262:	e002      	b.n	800826a <_printf_i+0xee>
 8008264:	0641      	lsls	r1, r0, #25
 8008266:	d5fb      	bpl.n	8008260 <_printf_i+0xe4>
 8008268:	881e      	ldrh	r6, [r3, #0]
 800826a:	4853      	ldr	r0, [pc, #332]	; (80083b8 <_printf_i+0x23c>)
 800826c:	2f6f      	cmp	r7, #111	; 0x6f
 800826e:	bf0c      	ite	eq
 8008270:	2308      	moveq	r3, #8
 8008272:	230a      	movne	r3, #10
 8008274:	2100      	movs	r1, #0
 8008276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800827a:	6865      	ldr	r5, [r4, #4]
 800827c:	60a5      	str	r5, [r4, #8]
 800827e:	2d00      	cmp	r5, #0
 8008280:	bfa2      	ittt	ge
 8008282:	6821      	ldrge	r1, [r4, #0]
 8008284:	f021 0104 	bicge.w	r1, r1, #4
 8008288:	6021      	strge	r1, [r4, #0]
 800828a:	b90e      	cbnz	r6, 8008290 <_printf_i+0x114>
 800828c:	2d00      	cmp	r5, #0
 800828e:	d04b      	beq.n	8008328 <_printf_i+0x1ac>
 8008290:	4615      	mov	r5, r2
 8008292:	fbb6 f1f3 	udiv	r1, r6, r3
 8008296:	fb03 6711 	mls	r7, r3, r1, r6
 800829a:	5dc7      	ldrb	r7, [r0, r7]
 800829c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082a0:	4637      	mov	r7, r6
 80082a2:	42bb      	cmp	r3, r7
 80082a4:	460e      	mov	r6, r1
 80082a6:	d9f4      	bls.n	8008292 <_printf_i+0x116>
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d10b      	bne.n	80082c4 <_printf_i+0x148>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	07de      	lsls	r6, r3, #31
 80082b0:	d508      	bpl.n	80082c4 <_printf_i+0x148>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	6861      	ldr	r1, [r4, #4]
 80082b6:	4299      	cmp	r1, r3
 80082b8:	bfde      	ittt	le
 80082ba:	2330      	movle	r3, #48	; 0x30
 80082bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082c4:	1b52      	subs	r2, r2, r5
 80082c6:	6122      	str	r2, [r4, #16]
 80082c8:	f8cd a000 	str.w	sl, [sp]
 80082cc:	464b      	mov	r3, r9
 80082ce:	aa03      	add	r2, sp, #12
 80082d0:	4621      	mov	r1, r4
 80082d2:	4640      	mov	r0, r8
 80082d4:	f7ff fee4 	bl	80080a0 <_printf_common>
 80082d8:	3001      	adds	r0, #1
 80082da:	d14a      	bne.n	8008372 <_printf_i+0x1f6>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	b004      	add	sp, #16
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f043 0320 	orr.w	r3, r3, #32
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	4833      	ldr	r0, [pc, #204]	; (80083bc <_printf_i+0x240>)
 80082f0:	2778      	movs	r7, #120	; 0x78
 80082f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	6829      	ldr	r1, [r5, #0]
 80082fa:	061f      	lsls	r7, r3, #24
 80082fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008300:	d402      	bmi.n	8008308 <_printf_i+0x18c>
 8008302:	065f      	lsls	r7, r3, #25
 8008304:	bf48      	it	mi
 8008306:	b2b6      	uxthmi	r6, r6
 8008308:	07df      	lsls	r7, r3, #31
 800830a:	bf48      	it	mi
 800830c:	f043 0320 	orrmi.w	r3, r3, #32
 8008310:	6029      	str	r1, [r5, #0]
 8008312:	bf48      	it	mi
 8008314:	6023      	strmi	r3, [r4, #0]
 8008316:	b91e      	cbnz	r6, 8008320 <_printf_i+0x1a4>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	f023 0320 	bic.w	r3, r3, #32
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	2310      	movs	r3, #16
 8008322:	e7a7      	b.n	8008274 <_printf_i+0xf8>
 8008324:	4824      	ldr	r0, [pc, #144]	; (80083b8 <_printf_i+0x23c>)
 8008326:	e7e4      	b.n	80082f2 <_printf_i+0x176>
 8008328:	4615      	mov	r5, r2
 800832a:	e7bd      	b.n	80082a8 <_printf_i+0x12c>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	6826      	ldr	r6, [r4, #0]
 8008330:	6961      	ldr	r1, [r4, #20]
 8008332:	1d18      	adds	r0, r3, #4
 8008334:	6028      	str	r0, [r5, #0]
 8008336:	0635      	lsls	r5, r6, #24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	d501      	bpl.n	8008340 <_printf_i+0x1c4>
 800833c:	6019      	str	r1, [r3, #0]
 800833e:	e002      	b.n	8008346 <_printf_i+0x1ca>
 8008340:	0670      	lsls	r0, r6, #25
 8008342:	d5fb      	bpl.n	800833c <_printf_i+0x1c0>
 8008344:	8019      	strh	r1, [r3, #0]
 8008346:	2300      	movs	r3, #0
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	4615      	mov	r5, r2
 800834c:	e7bc      	b.n	80082c8 <_printf_i+0x14c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	1d1a      	adds	r2, r3, #4
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	681d      	ldr	r5, [r3, #0]
 8008356:	6862      	ldr	r2, [r4, #4]
 8008358:	2100      	movs	r1, #0
 800835a:	4628      	mov	r0, r5
 800835c:	f7f7 ff50 	bl	8000200 <memchr>
 8008360:	b108      	cbz	r0, 8008366 <_printf_i+0x1ea>
 8008362:	1b40      	subs	r0, r0, r5
 8008364:	6060      	str	r0, [r4, #4]
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	2300      	movs	r3, #0
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008370:	e7aa      	b.n	80082c8 <_printf_i+0x14c>
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	462a      	mov	r2, r5
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	47d0      	blx	sl
 800837c:	3001      	adds	r0, #1
 800837e:	d0ad      	beq.n	80082dc <_printf_i+0x160>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	079b      	lsls	r3, r3, #30
 8008384:	d413      	bmi.n	80083ae <_printf_i+0x232>
 8008386:	68e0      	ldr	r0, [r4, #12]
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	4298      	cmp	r0, r3
 800838c:	bfb8      	it	lt
 800838e:	4618      	movlt	r0, r3
 8008390:	e7a6      	b.n	80082e0 <_printf_i+0x164>
 8008392:	2301      	movs	r3, #1
 8008394:	4632      	mov	r2, r6
 8008396:	4649      	mov	r1, r9
 8008398:	4640      	mov	r0, r8
 800839a:	47d0      	blx	sl
 800839c:	3001      	adds	r0, #1
 800839e:	d09d      	beq.n	80082dc <_printf_i+0x160>
 80083a0:	3501      	adds	r5, #1
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	9903      	ldr	r1, [sp, #12]
 80083a6:	1a5b      	subs	r3, r3, r1
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dcf2      	bgt.n	8008392 <_printf_i+0x216>
 80083ac:	e7eb      	b.n	8008386 <_printf_i+0x20a>
 80083ae:	2500      	movs	r5, #0
 80083b0:	f104 0619 	add.w	r6, r4, #25
 80083b4:	e7f5      	b.n	80083a2 <_printf_i+0x226>
 80083b6:	bf00      	nop
 80083b8:	08008639 	.word	0x08008639
 80083bc:	0800864a 	.word	0x0800864a

080083c0 <memmove>:
 80083c0:	4288      	cmp	r0, r1
 80083c2:	b510      	push	{r4, lr}
 80083c4:	eb01 0402 	add.w	r4, r1, r2
 80083c8:	d902      	bls.n	80083d0 <memmove+0x10>
 80083ca:	4284      	cmp	r4, r0
 80083cc:	4623      	mov	r3, r4
 80083ce:	d807      	bhi.n	80083e0 <memmove+0x20>
 80083d0:	1e43      	subs	r3, r0, #1
 80083d2:	42a1      	cmp	r1, r4
 80083d4:	d008      	beq.n	80083e8 <memmove+0x28>
 80083d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083de:	e7f8      	b.n	80083d2 <memmove+0x12>
 80083e0:	4402      	add	r2, r0
 80083e2:	4601      	mov	r1, r0
 80083e4:	428a      	cmp	r2, r1
 80083e6:	d100      	bne.n	80083ea <memmove+0x2a>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083f2:	e7f7      	b.n	80083e4 <memmove+0x24>

080083f4 <_sbrk_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d06      	ldr	r5, [pc, #24]	; (8008410 <_sbrk_r+0x1c>)
 80083f8:	2300      	movs	r3, #0
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	f7f9 fdb2 	bl	8001f68 <_sbrk>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_sbrk_r+0x1a>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_sbrk_r+0x1a>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20000708 	.word	0x20000708

08008414 <memcpy>:
 8008414:	440a      	add	r2, r1
 8008416:	4291      	cmp	r1, r2
 8008418:	f100 33ff 	add.w	r3, r0, #4294967295
 800841c:	d100      	bne.n	8008420 <memcpy+0xc>
 800841e:	4770      	bx	lr
 8008420:	b510      	push	{r4, lr}
 8008422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842a:	4291      	cmp	r1, r2
 800842c:	d1f9      	bne.n	8008422 <memcpy+0xe>
 800842e:	bd10      	pop	{r4, pc}

08008430 <_realloc_r>:
 8008430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008434:	4680      	mov	r8, r0
 8008436:	4614      	mov	r4, r2
 8008438:	460e      	mov	r6, r1
 800843a:	b921      	cbnz	r1, 8008446 <_realloc_r+0x16>
 800843c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	4611      	mov	r1, r2
 8008442:	f7ff bc49 	b.w	8007cd8 <_malloc_r>
 8008446:	b92a      	cbnz	r2, 8008454 <_realloc_r+0x24>
 8008448:	f7ff fbda 	bl	8007c00 <_free_r>
 800844c:	4625      	mov	r5, r4
 800844e:	4628      	mov	r0, r5
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	f000 f81b 	bl	800848e <_malloc_usable_size_r>
 8008458:	4284      	cmp	r4, r0
 800845a:	4607      	mov	r7, r0
 800845c:	d802      	bhi.n	8008464 <_realloc_r+0x34>
 800845e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008462:	d812      	bhi.n	800848a <_realloc_r+0x5a>
 8008464:	4621      	mov	r1, r4
 8008466:	4640      	mov	r0, r8
 8008468:	f7ff fc36 	bl	8007cd8 <_malloc_r>
 800846c:	4605      	mov	r5, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d0ed      	beq.n	800844e <_realloc_r+0x1e>
 8008472:	42bc      	cmp	r4, r7
 8008474:	4622      	mov	r2, r4
 8008476:	4631      	mov	r1, r6
 8008478:	bf28      	it	cs
 800847a:	463a      	movcs	r2, r7
 800847c:	f7ff ffca 	bl	8008414 <memcpy>
 8008480:	4631      	mov	r1, r6
 8008482:	4640      	mov	r0, r8
 8008484:	f7ff fbbc 	bl	8007c00 <_free_r>
 8008488:	e7e1      	b.n	800844e <_realloc_r+0x1e>
 800848a:	4635      	mov	r5, r6
 800848c:	e7df      	b.n	800844e <_realloc_r+0x1e>

0800848e <_malloc_usable_size_r>:
 800848e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008492:	1f18      	subs	r0, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	bfbc      	itt	lt
 8008498:	580b      	ldrlt	r3, [r1, r0]
 800849a:	18c0      	addlt	r0, r0, r3
 800849c:	4770      	bx	lr
	...

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr

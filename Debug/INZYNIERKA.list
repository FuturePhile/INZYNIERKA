
INZYNIERKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e4  080083e4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ec  080083ec  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080083f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200000bc  080084b0  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080084b0  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019523  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039bd  00000000  00000000  00039652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e58  00000000  00000000  0003f74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d829  00000000  00000000  000695a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcbab  00000000  00000000  00086dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060e8  00000000  00000000  0018397c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00189a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008238 	.word	0x08008238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08008238 	.word	0x08008238

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_SystemReset+0x28>)
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <__NVIC_SystemReset+0x20>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	05fa0004 	.word	0x05fa0004

080005c8 <lcd_write_nibble>:

static bool previous_state_telephone = true;
static bool can_enter_key = false;

static void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <lcd_write_nibble+0x7c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 8000608:	f107 020f 	add.w	r2, r7, #15
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	214e      	movs	r1, #78	; 0x4e
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <lcd_write_nibble+0x80>)
 8000616:	f002 fb51 	bl	8002cbc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 ff0c 	bl	8002438 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 800062a:	f107 020f 	add.w	r2, r7, #15
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	214e      	movs	r1, #78	; 0x4e
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <lcd_write_nibble+0x80>)
 8000638:	f002 fb40 	bl	8002cbc <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	200000e8 	.word	0x200000e8

0800064c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffad 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffa8 	bl	80005c8 <lcd_write_nibble>
	if(cmd == 0x01 || cmd == 0x02)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <lcd_send_cmd+0x38>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <lcd_send_cmd+0x3e>
	{
		HAL_Delay(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f001 fed7 	bl	8002438 <HAL_Delay>
	}
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff8a 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff85 	bl	80005c8 <lcd_write_nibble>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <lcd_init>:

void lcd_init()
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f001 feb4 	bl	8002438 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ff78 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f001 fead 	bl	8002438 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff71 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 fea6 	bl	8002438 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2003      	movs	r0, #3
 80006f0:	f7ff ff6a 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 fe9f 	bl	8002438 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff63 	bl	80005c8 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 8000702:	2028      	movs	r0, #40	; 0x28
 8000704:	f7ff ffa2 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff9f 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff9c 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff99 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 800071a:	2002      	movs	r0, #2
 800071c:	f001 fe8c 	bl	8002438 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	while(*str)
 800072c:	e006      	b.n	800073c <lcd_write_string+0x18>
	{
		lcd_send_data(*str++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffab 	bl	8000692 <lcd_send_data>
	while(*str)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <lcd_write_string+0xa>
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	460a      	mov	r2, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <lcd_set_cursor+0x1c>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d003      	beq.n	8000770 <lcd_set_cursor+0x22>
 8000768:	e005      	b.n	8000776 <lcd_set_cursor+0x28>
	{
		case 0:
			address = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
			break;
 800076e:	e004      	b.n	800077a <lcd_set_cursor+0x2c>
		case 1:
			address = 0x40;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	73fb      	strb	r3, [r7, #15]
			break;
 8000774:	e001      	b.n	800077a <lcd_set_cursor+0x2c>
		default:
			address = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	4413      	add	r3, r2
 8000780:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff5e 	bl	800064c <lcd_send_cmd>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_clear>:

void lcd_clear(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff55 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 fe48 	bl	8002438 <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lcd_backlight>:

void lcd_backlight(uint8_t state)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <lcd_backlight+0x18>
	{
		backlight_state = 1;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <lcd_backlight+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	} else
	{
		backlight_state = 0;
	}
}
 80007c2:	e002      	b.n	80007ca <lcd_backlight+0x1e>
		backlight_state = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <lcd_backlight+0x2c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <lcd_display>:
}lcd_state;

int lcd_number = LCD_1;

void lcd_display(bool current_state_telephone, bool current_state_key, char *key_buffer, char *access_key, char pressed_button, char *ble_cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	460b      	mov	r3, r1
 80007ec:	73bb      	strb	r3, [r7, #14]
	static bool cmd_1 = false;
	static bool cmd_2 = false;
	static bool cmd_3 = false;


	if(current_state_telephone != previous_state_telephone)
 80007ee:	4ba5      	ldr	r3, [pc, #660]	; (8000a84 <lcd_display+0x2a8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d012      	beq.n	800081e <lcd_display+0x42>
	{
		if(current_state_telephone == false)
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <lcd_display+0x30>
		{
			lcd_number = LCD_1;
 8000804:	4ba0      	ldr	r3, [pc, #640]	; (8000a88 <lcd_display+0x2ac>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e005      	b.n	8000818 <lcd_display+0x3c>
		}else if(current_state_telephone == true)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <lcd_display+0x3c>
		{
			lcd_number = LCD_2;
 8000812:	4b9d      	ldr	r3, [pc, #628]	; (8000a88 <lcd_display+0x2ac>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
		}
		previous_state_telephone = current_state_telephone;
 8000818:	4a9a      	ldr	r2, [pc, #616]	; (8000a84 <lcd_display+0x2a8>)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	7013      	strb	r3, [r2, #0]
	}



	if(strlen(key_buffer) == 4)
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f7ff fce0 	bl	80001e4 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	2b04      	cmp	r3, #4
 8000828:	d10c      	bne.n	8000844 <lcd_display+0x68>
	{
		if_key_entered = true;
 800082a:	4b98      	ldr	r3, [pc, #608]	; (8000a8c <lcd_display+0x2b0>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
		if(strcmp(key_buffer, access_key) == 0)
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff fccc 	bl	80001d0 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <lcd_display+0x68>
		{
			if_key_correct = true;
 800083e:	4b94      	ldr	r3, [pc, #592]	; (8000a90 <lcd_display+0x2b4>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
		}
	}

	if(if_key_entered == true)
 8000844:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <lcd_display+0x2b0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00d      	beq.n	8000868 <lcd_display+0x8c>
	{
		if(if_key_correct == true)
 800084c:	4b90      	ldr	r3, [pc, #576]	; (8000a90 <lcd_display+0x2b4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <lcd_display+0x80>
		{
			lcd_number = LCD_4;
 8000854:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <lcd_display+0x2ac>)
 8000856:	2203      	movs	r2, #3
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e002      	b.n	8000862 <lcd_display+0x86>
		} else
		{
			lcd_number = LCD_3;
 800085c:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <lcd_display+0x2ac>)
 800085e:	2202      	movs	r2, #2
 8000860:	601a      	str	r2, [r3, #0]
		}
		if_key_entered = false;
 8000862:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <lcd_display+0x2b0>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	}

	if(pressed_button == 'A' && if_key_correct == true)
 8000868:	7e3b      	ldrb	r3, [r7, #24]
 800086a:	2b41      	cmp	r3, #65	; 0x41
 800086c:	d109      	bne.n	8000882 <lcd_display+0xa6>
 800086e:	4b88      	ldr	r3, [pc, #544]	; (8000a90 <lcd_display+0x2b4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d005      	beq.n	8000882 <lcd_display+0xa6>
	{
		lcd_number = LCD_6;
 8000876:	4b84      	ldr	r3, [pc, #528]	; (8000a88 <lcd_display+0x2ac>)
 8000878:	2205      	movs	r2, #5
 800087a:	601a      	str	r2, [r3, #0]
		if_key_correct = false;
 800087c:	4b84      	ldr	r3, [pc, #528]	; (8000a90 <lcd_display+0x2b4>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp(ble_cmd, "open") == 0)
 8000882:	4984      	ldr	r1, [pc, #528]	; (8000a94 <lcd_display+0x2b8>)
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f7ff fca3 	bl	80001d0 <strcmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d109      	bne.n	80008a4 <lcd_display+0xc8>
	{
		if(cmd_1 == true)
 8000890:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <lcd_display+0x2bc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d005      	beq.n	80008a4 <lcd_display+0xc8>
		{
			lcd_number = LCD_7;
 8000898:	4b7b      	ldr	r3, [pc, #492]	; (8000a88 <lcd_display+0x2ac>)
 800089a:	2206      	movs	r2, #6
 800089c:	601a      	str	r2, [r3, #0]
			cmd_1 = false;
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <lcd_display+0x2bc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "close") == 0)
 80008a4:	497d      	ldr	r1, [pc, #500]	; (8000a9c <lcd_display+0x2c0>)
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff fc92 	bl	80001d0 <strcmp>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d109      	bne.n	80008c6 <lcd_display+0xea>
	{
		if(cmd_2 == true)
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <lcd_display+0x2c4>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d005      	beq.n	80008c6 <lcd_display+0xea>
		{
			lcd_number = LCD_8;
 80008ba:	4b73      	ldr	r3, [pc, #460]	; (8000a88 <lcd_display+0x2ac>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
			cmd_2 = false;
 80008c0:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <lcd_display+0x2c4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "reset") == 0)
 80008c6:	4977      	ldr	r1, [pc, #476]	; (8000aa4 <lcd_display+0x2c8>)
 80008c8:	69f8      	ldr	r0, [r7, #28]
 80008ca:	f7ff fc81 	bl	80001d0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <lcd_display+0x10c>
	{
		if(cmd_3 == true)
 80008d4:	4b74      	ldr	r3, [pc, #464]	; (8000aa8 <lcd_display+0x2cc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d005      	beq.n	80008e8 <lcd_display+0x10c>
		{
			lcd_number = RST;
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <lcd_display+0x2ac>)
 80008de:	2208      	movs	r2, #8
 80008e0:	601a      	str	r2, [r3, #0]
			cmd_3 = false;
 80008e2:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <lcd_display+0x2cc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
		}
	}


	switch(lcd_number)
 80008e8:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <lcd_display+0x2ac>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	f200 819a 	bhi.w	8000c26 <lcd_display+0x44a>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <lcd_display+0x11c>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	0800096d 	.word	0x0800096d
 8000900:	080009c3 	.word	0x080009c3
 8000904:	08000a23 	.word	0x08000a23
 8000908:	08000ad1 	.word	0x08000ad1
 800090c:	08000b21 	.word	0x08000b21
 8000910:	08000b77 	.word	0x08000b77
 8000914:	08000bcd 	.word	0x08000bcd
 8000918:	08000c23 	.word	0x08000c23
	{
	case LCD_1:
		lcd_set_cursor(0, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff15 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <lcd_display+0x2d0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fefb 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff0c 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000936:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <lcd_display+0x2d4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fef2 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff ff03 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <lcd_display+0x2d0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fee9 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff fefa 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_not_set);
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <lcd_display+0x2d8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fee0 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000964:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <lcd_display+0x2ac>)
 8000966:	220a      	movs	r2, #10
 8000968:	601a      	str	r2, [r3, #0]
		break;
 800096a:	e15d      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_2:
		lcd_set_cursor(0, 0);
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff feed 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <lcd_display+0x2d0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fed3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fee4 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <lcd_display+0x2dc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff feca 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fedb 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <lcd_display+0x2d0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fec1 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fed2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_set);
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <lcd_display+0x2e0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff feb8 	bl	8000724 <lcd_write_string>

		can_enter_key = true;
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <lcd_display+0x2e4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <lcd_display+0x2ac>)
 80009bc:	220a      	movs	r2, #10
 80009be:	601a      	str	r2, [r3, #0]
		break;
 80009c0:	e132      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_3:
		lcd_set_cursor(0, 0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fec2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <lcd_display+0x2d0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fea8 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff feb9 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <lcd_display+0x2dc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe9f 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff feb0 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <lcd_display+0x2d0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe96 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fea7 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_bad);
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <lcd_display+0x2e8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe8d 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <lcd_display+0x2e4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000a10:	f000 ff70 	bl	80018f4 <reset_buffer>

		delay(delay_second*2);
 8000a14:	482c      	ldr	r0, [pc, #176]	; (8000ac8 <lcd_display+0x2ec>)
 8000a16:	f000 ff7d 	bl	8001914 <delay>

		lcd_number = LCD_2;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <lcd_display+0x2ac>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
		break;
 8000a20:	e102      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_4:
		lcd_set_cursor(0, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fe92 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <lcd_display+0x2d0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe78 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000a34:	2100      	movs	r1, #0
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fe89 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <lcd_display+0x2d4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe6f 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fe80 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <lcd_display+0x2d0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe66 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fe77 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_good);
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <lcd_display+0x2f0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe5d 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <lcd_display+0x2e4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000a70:	f000 ff40 	bl	80018f4 <reset_buffer>

		delay(delay_second*2);
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <lcd_display+0x2ec>)
 8000a76:	f000 ff4d 	bl	8001914 <delay>

		lcd_number = LCD_5;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <lcd_display+0x2ac>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	601a      	str	r2, [r3, #0]
		break;
 8000a80:	e0d2      	b.n	8000c28 <lcd_display+0x44c>
 8000a82:	bf00      	nop
 8000a84:	20000001 	.word	0x20000001
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	200000e0 	.word	0x200000e0
 8000a90:	200000e1 	.word	0x200000e1
 8000a94:	08008250 	.word	0x08008250
 8000a98:	200000e2 	.word	0x200000e2
 8000a9c:	08008258 	.word	0x08008258
 8000aa0:	200000e3 	.word	0x200000e3
 8000aa4:	08008260 	.word	0x08008260
 8000aa8:	200000e4 	.word	0x200000e4
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000014 	.word	0x20000014
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	20000018 	.word	0x20000018
 8000ac8:	01e84800 	.word	0x01e84800
 8000acc:	2000001c 	.word	0x2000001c
	case LCD_5:
		lcd_set_cursor(0, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fe3b 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ad8:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <lcd_display+0x454>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe21 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fe32 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_1);
 8000aea:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <lcd_display+0x458>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe18 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe29 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000afc:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <lcd_display+0x454>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe0f 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe20 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_2);
 8000b0e:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <lcd_display+0x45c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe06 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000b18:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <lcd_display+0x460>)
 8000b1a:	220a      	movs	r2, #10
 8000b1c:	601a      	str	r2, [r3, #0]
		break;
 8000b1e:	e083      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_6:
		lcd_set_cursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe13 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <lcd_display+0x454>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdf9 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe0a 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <lcd_display+0x464>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fdf0 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fe01 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b4c:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <lcd_display+0x454>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fde7 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fdf8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(unlock);
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <lcd_display+0x468>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdde 	bl	8000724 <lcd_write_string>

		cmd_1 = true;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <lcd_display+0x46c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <lcd_display+0x460>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	601a      	str	r2, [r3, #0]
		break;
 8000b74:	e058      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_7:
		lcd_set_cursor(0, 0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fde8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <lcd_display+0x454>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fdce 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fddf 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <lcd_display+0x470>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fdc5 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fdd6 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <lcd_display+0x454>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fdbc 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fdcd 	bl	800074e <lcd_set_cursor>
		lcd_write_string(lock);
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <lcd_display+0x474>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdb3 	bl	8000724 <lcd_write_string>

		cmd_2 = true;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <lcd_display+0x478>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <lcd_display+0x460>)
 8000bc6:	220a      	movs	r2, #10
 8000bc8:	601a      	str	r2, [r3, #0]
		break;
 8000bca:	e02d      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_8:
		lcd_set_cursor(0, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fdbd 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <lcd_display+0x454>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fda3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fdb4 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <lcd_display+0x464>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd9a 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fdab 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <lcd_display+0x454>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd91 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fda2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(reset);
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <lcd_display+0x47c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd88 	bl	8000724 <lcd_write_string>

		cmd_3 = true;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <lcd_display+0x480>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <lcd_display+0x460>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	601a      	str	r2, [r3, #0]
		break;
 8000c20:	e002      	b.n	8000c28 <lcd_display+0x44c>
	case RST:
		NVIC_SystemReset();
 8000c22:	f7ff fcbb 	bl	800059c <__NVIC_SystemReset>
		break;
	default:
		break;
 8000c26:	bf00      	nop
	}

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000020 	.word	0x20000020
 8000c38:	20000024 	.word	0x20000024
 8000c3c:	200000dc 	.word	0x200000dc
 8000c40:	20000010 	.word	0x20000010
 8000c44:	20000028 	.word	0x20000028
 8000c48:	200000e2 	.word	0x200000e2
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000002c 	.word	0x2000002c
 8000c54:	200000e3 	.word	0x200000e3
 8000c58:	20000030 	.word	0x20000030
 8000c5c:	200000e4 	.word	0x200000e4

08000c60 <lcd_display_key>:

bool lcd_display_key(char *key_buffer, bool current_state_key)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	static char *clear = "     ";

	if(current_state_key == true && can_enter_key == true)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d015      	beq.n	8000c9e <lcd_display_key+0x3e>
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <lcd_display_key+0x48>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d011      	beq.n	8000c9e <lcd_display_key+0x3e>
	{
		lcd_set_cursor(1,11);
 8000c7a:	210b      	movs	r1, #11
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd66 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <lcd_display_key+0x4c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd4c 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 11);
 8000c8c:	210b      	movs	r1, #11
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fd5d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_buffer);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fd45 	bl	8000724 <lcd_write_string>
		current_state_key = false;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	70fb      	strb	r3, [r7, #3]
	}
	return current_state_key;
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	20000034 	.word	0x20000034

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d16:	f001 ff05 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d20:	f001 ff00 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d3a:	f001 fd31 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_SWITCH_Pin;
 8000d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAG_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d54:	f001 fd24 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 8000d58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d70:	f001 fd16 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin;
 8000d74:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d8e:	f001 fd07 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODEM_ENABLE_Pin;
 8000d92:	2320      	movs	r3, #32
 8000d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODEM_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000daa:	f001 fcf9 	bl	80027a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	210c      	movs	r1, #12
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f001 fc3f 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db8:	2028      	movs	r0, #40	; 0x28
 8000dba:	f001 fc58 	bl	800266e <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e10:	f001 feb8 	bl	8002b84 <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fe85 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e22:	f002 fa73 	bl	800330c <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fe7c 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e34:	f002 fab5 	bl	80033a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fe73 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000e8 	.word	0x200000e8
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	10909cec 	.word	0x10909cec

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	; 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	; 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fd2d 	bl	80078d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_I2C_MspInit+0xb0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d13a      	bne.n	8000efa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 f947 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e9c:	f000 fe44 	bl	8001b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_I2C_MspInit+0xb8>)
 8000ede:	f001 fc5f 	bl	80027a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	37b0      	adds	r7, #176	; 0xb0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40005400 	.word	0x40005400
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <line_append_debug>:
void send_SMS(void);
void delay(uint32_t iterations);
void add_digit(char digit);

void line_append_debug(uint8_t value)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(value == '\r' || value == '\n')
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b0d      	cmp	r3, #13
 8000f1e:	d002      	beq.n	8000f26 <line_append_debug+0x16>
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b0a      	cmp	r3, #10
 8000f24:	d16c      	bne.n	8001000 <line_append_debug+0xf0>
	{
		if(line_lenght_debug >= 0)
		{
			if(strncmp(line_buffer_debug, "B ", 2) == 0)
 8000f26:	2202      	movs	r2, #2
 8000f28:	493f      	ldr	r1, [pc, #252]	; (8001028 <line_append_debug+0x118>)
 8000f2a:	4840      	ldr	r0, [pc, #256]	; (800102c <line_append_debug+0x11c>)
 8000f2c:	f006 fcda 	bl	80078e4 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d127      	bne.n	8000f86 <line_append_debug+0x76>
			{
				strncpy(line_buffer_debug_BLE, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 8000f36:	224e      	movs	r2, #78	; 0x4e
 8000f38:	493d      	ldr	r1, [pc, #244]	; (8001030 <line_append_debug+0x120>)
 8000f3a:	483e      	ldr	r0, [pc, #248]	; (8001034 <line_append_debug+0x124>)
 8000f3c:	f006 fce4 	bl	8007908 <strncpy>
				line_lenght_debug_BLE = line_lenght_debug - 2;
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <line_append_debug+0x128>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3b02      	subs	r3, #2
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <line_append_debug+0x12c>)
 8000f48:	6013      	str	r3, [r2, #0]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\r';
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <line_append_debug+0x12c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	493a      	ldr	r1, [pc, #232]	; (800103c <line_append_debug+0x12c>)
 8000f52:	600a      	str	r2, [r1, #0]
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <line_append_debug+0x124>)
 8000f56:	210d      	movs	r1, #13
 8000f58:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\n';
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <line_append_debug+0x12c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	4936      	ldr	r1, [pc, #216]	; (800103c <line_append_debug+0x12c>)
 8000f62:	600a      	str	r2, [r1, #0]
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <line_append_debug+0x124>)
 8000f66:	210a      	movs	r1, #10
 8000f68:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE] = '\0';
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <line_append_debug+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <line_append_debug+0x124>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)line_buffer_debug_BLE, line_lenght_debug_BLE);
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <line_append_debug+0x12c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	492d      	ldr	r1, [pc, #180]	; (8001034 <line_append_debug+0x124>)
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <line_append_debug+0x130>)
 8000f80:	f005 f888 	bl	8006094 <HAL_UART_Transmit_IT>
 8000f84:	e026      	b.n	8000fd4 <line_append_debug+0xc4>
			} else if (strncmp(line_buffer_debug, "G ", 2) == 0)
 8000f86:	2202      	movs	r2, #2
 8000f88:	492e      	ldr	r1, [pc, #184]	; (8001044 <line_append_debug+0x134>)
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <line_append_debug+0x11c>)
 8000f8c:	f006 fcaa 	bl	80078e4 <strncmp>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11e      	bne.n	8000fd4 <line_append_debug+0xc4>
			{
				strncpy(line_buffer_debug_GSM, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 8000f96:	224e      	movs	r2, #78	; 0x4e
 8000f98:	4925      	ldr	r1, [pc, #148]	; (8001030 <line_append_debug+0x120>)
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <line_append_debug+0x138>)
 8000f9c:	f006 fcb4 	bl	8007908 <strncpy>
				line_lenght_debug_GSM = line_lenght_debug - 2;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <line_append_debug+0x128>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4a29      	ldr	r2, [pc, #164]	; (800104c <line_append_debug+0x13c>)
 8000fa8:	6013      	str	r3, [r2, #0]
				line_buffer_debug_GSM[line_lenght_debug_GSM++] = '\n';
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <line_append_debug+0x13c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4926      	ldr	r1, [pc, #152]	; (800104c <line_append_debug+0x13c>)
 8000fb2:	600a      	str	r2, [r1, #0]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <line_append_debug+0x138>)
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_GSM[line_lenght_debug_GSM] = '\0';
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <line_append_debug+0x13c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a22      	ldr	r2, [pc, #136]	; (8001048 <line_append_debug+0x138>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)line_buffer_debug_GSM, line_lenght_debug_GSM);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <line_append_debug+0x13c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	491e      	ldr	r1, [pc, #120]	; (8001048 <line_append_debug+0x138>)
 8000fce:	4820      	ldr	r0, [pc, #128]	; (8001050 <line_append_debug+0x140>)
 8000fd0:	f005 f860 	bl	8006094 <HAL_UART_Transmit_IT>
			}
			line_buffer_debug[line_lenght_debug] = '\0';
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <line_append_debug+0x128>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <line_append_debug+0x11c>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <line_append_debug+0x144>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_debug, strlen(line_buffer_debug));
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <line_append_debug+0x11c>)
 8000fe6:	f7ff f8fd 	bl	80001e4 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	490e      	ldr	r1, [pc, #56]	; (800102c <line_append_debug+0x11c>)
 8000ff2:	4819      	ldr	r0, [pc, #100]	; (8001058 <line_append_debug+0x148>)
 8000ff4:	f005 f84e 	bl	8006094 <HAL_UART_Transmit_IT>
			line_lenght_debug = 0;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <line_append_debug+0x128>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
		if(line_lenght_debug >= 0)
 8000ffe:	e00f      	b.n	8001020 <line_append_debug+0x110>
		}
	} else
	{
		if(line_lenght_debug >= LINE_MAX_LENGTH)
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <line_append_debug+0x128>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b4f      	cmp	r3, #79	; 0x4f
 8001006:	d902      	bls.n	800100e <line_append_debug+0xfe>
		{
			line_lenght_debug = 0;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <line_append_debug+0x128>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		}
		line_buffer_debug[line_lenght_debug++] = value;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <line_append_debug+0x128>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <line_append_debug+0x128>)
 8001016:	600a      	str	r2, [r1, #0]
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <line_append_debug+0x11c>)
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	54ca      	strb	r2, [r1, r3]
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08008328 	.word	0x08008328
 800102c:	2000013c 	.word	0x2000013c
 8001030:	2000013e 	.word	0x2000013e
 8001034:	200001e4 	.word	0x200001e4
 8001038:	200002e0 	.word	0x200002e0
 800103c:	200002e4 	.word	0x200002e4
 8001040:	2000052c 	.word	0x2000052c
 8001044:	0800832c 	.word	0x0800832c
 8001048:	20000190 	.word	0x20000190
 800104c:	200002e8 	.word	0x200002e8
 8001050:	2000041c 	.word	0x2000041c
 8001054:	200002f4 	.word	0x200002f4
 8001058:	200004a4 	.word	0x200004a4

0800105c <line_append_bluetooth>:

void line_append_bluetooth(uint8_t value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]

	if(value == '\r' || value == '\n')
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b0d      	cmp	r3, #13
 800106a:	d002      	beq.n	8001072 <line_append_bluetooth+0x16>
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d119      	bne.n	80010a6 <line_append_bluetooth+0x4a>
	{
		if(line_lenght_bluetooth > 0)
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <line_append_bluetooth+0x104>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d06e      	beq.n	8001158 <line_append_bluetooth+0xfc>
		{
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <line_append_bluetooth+0x104>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <line_append_bluetooth+0x108>)
 8001080:	2100      	movs	r1, #0
 8001082:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <line_append_bluetooth+0x10c>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 800108a:	4836      	ldr	r0, [pc, #216]	; (8001164 <line_append_bluetooth+0x108>)
 800108c:	f7ff f8aa 	bl	80001e4 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4933      	ldr	r1, [pc, #204]	; (8001164 <line_append_bluetooth+0x108>)
 8001098:	4834      	ldr	r0, [pc, #208]	; (800116c <line_append_bluetooth+0x110>)
 800109a:	f004 fffb 	bl	8006094 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <line_append_bluetooth+0x104>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
		if(line_lenght_bluetooth > 0)
 80010a4:	e058      	b.n	8001158 <line_append_bluetooth+0xfc>
		}
	} else if(value == '#')
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b23      	cmp	r3, #35	; 0x23
 80010aa:	d124      	bne.n	80010f6 <line_append_bluetooth+0x9a>
	{
		if(line_lenght_bluetooth > 0)
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <line_append_bluetooth+0x104>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <line_append_bluetooth+0xfc>
		{
			strncpy(phone_number, line_buffer_bluetooth, 9);
 80010b4:	2209      	movs	r2, #9
 80010b6:	492b      	ldr	r1, [pc, #172]	; (8001164 <line_append_bluetooth+0x108>)
 80010b8:	482d      	ldr	r0, [pc, #180]	; (8001170 <line_append_bluetooth+0x114>)
 80010ba:	f006 fc25 	bl	8007908 <strncpy>
			phone_number[9] = '\0';
 80010be:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <line_append_bluetooth+0x114>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	725a      	strb	r2, [r3, #9]
			if_send_end_line = true;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <line_append_bluetooth+0x10c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			if_phone_number_set = true;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <line_append_bluetooth+0x118>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
			if_phone_number_set_latch = true;
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <line_append_bluetooth+0x11c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)phone_number, strlen(phone_number));
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <line_append_bluetooth+0x114>)
 80010d8:	f7ff f884 	bl	80001e4 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4923      	ldr	r1, [pc, #140]	; (8001170 <line_append_bluetooth+0x114>)
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <line_append_bluetooth+0x110>)
 80010e6:	f004 ffd5 	bl	8006094 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <line_append_bluetooth+0x104>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

			send_SMS();
 80010f0:	f000 f91c 	bl	800132c <send_SMS>
		{
			line_lenght_bluetooth = 0;
		}
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
	}
}
 80010f4:	e030      	b.n	8001158 <line_append_bluetooth+0xfc>
	} else if(value == '*')
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b2a      	cmp	r3, #42	; 0x2a
 80010fa:	d11d      	bne.n	8001138 <line_append_bluetooth+0xdc>
		if(line_lenght_bluetooth > 0)
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <line_append_bluetooth+0x104>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <line_append_bluetooth+0xfc>
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <line_append_bluetooth+0x104>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <line_append_bluetooth+0x108>)
 800110a:	2100      	movs	r1, #0
 800110c:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <line_append_bluetooth+0x10c>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
			strcpy(open_close_cmd, line_buffer_bluetooth);
 8001114:	4913      	ldr	r1, [pc, #76]	; (8001164 <line_append_bluetooth+0x108>)
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <line_append_bluetooth+0x120>)
 8001118:	f006 fc36 	bl	8007988 <strcpy>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <line_append_bluetooth+0x108>)
 800111e:	f7ff f861 	bl	80001e4 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <line_append_bluetooth+0x108>)
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <line_append_bluetooth+0x110>)
 800112c:	f004 ffb2 	bl	8006094 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <line_append_bluetooth+0x104>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	e00f      	b.n	8001158 <line_append_bluetooth+0xfc>
		if(line_lenght_bluetooth >= LINE_MAX_LENGTH)
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <line_append_bluetooth+0x104>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b4f      	cmp	r3, #79	; 0x4f
 800113e:	d902      	bls.n	8001146 <line_append_bluetooth+0xea>
			line_lenght_bluetooth = 0;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <line_append_bluetooth+0x104>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <line_append_bluetooth+0x104>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <line_append_bluetooth+0x104>)
 800114e:	600a      	str	r2, [r1, #0]
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <line_append_bluetooth+0x108>)
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	54ca      	strb	r2, [r1, r3]
}
 8001156:	e7ff      	b.n	8001158 <line_append_bluetooth+0xfc>
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000238 	.word	0x20000238
 8001168:	200002f4 	.word	0x200002f4
 800116c:	200004a4 	.word	0x200004a4
 8001170:	200002fc 	.word	0x200002fc
 8001174:	200002f5 	.word	0x200002f5
 8001178:	200002f6 	.word	0x200002f6
 800117c:	20000318 	.word	0x20000318

08001180 <line_append_gsm>:

void line_append_gsm(uint8_t value)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if(line_lenght_gsm < LINE_MAX_LENGTH)
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <line_append_gsm+0x3c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b4f      	cmp	r3, #79	; 0x4f
 8001190:	d80d      	bhi.n	80011ae <line_append_gsm+0x2e>
	{
		line_buffer_gsm[line_lenght_gsm++] = value;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <line_append_gsm+0x3c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <line_append_gsm+0x3c>)
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	4908      	ldr	r1, [pc, #32]	; (80011c0 <line_append_gsm+0x40>)
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	54ca      	strb	r2, [r1, r3]
		last_byte_time = HAL_GetTick();
 80011a2:	f001 f93d 	bl	8002420 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <line_append_gsm+0x44>)
 80011aa:	6013      	str	r3, [r2, #0]
	} else
	{
		line_lenght_gsm = 0;
	}
}
 80011ac:	e002      	b.n	80011b4 <line_append_gsm+0x34>
		line_lenght_gsm = 0;
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <line_append_gsm+0x3c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002f0 	.word	0x200002f0
 80011c0:	2000028c 	.word	0x2000028c
 80011c4:	200002f8 	.word	0x200002f8

080011c8 <check_timeout_gsm>:

void check_timeout_gsm(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	if(line_lenght_gsm > 0 && (HAL_GetTick() - last_byte_time > TIMEOUT_MS))
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <check_timeout_gsm+0x44>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d019      	beq.n	8001208 <check_timeout_gsm+0x40>
 80011d4:	f001 f924 	bl	8002420 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <check_timeout_gsm+0x48>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b32      	cmp	r3, #50	; 0x32
 80011e2:	d911      	bls.n	8001208 <check_timeout_gsm+0x40>
	{
		line_buffer_gsm[line_lenght_gsm] = '\0';
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <check_timeout_gsm+0x44>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <check_timeout_gsm+0x4c>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_gsm, strlen(line_buffer_gsm));
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <check_timeout_gsm+0x4c>)
 80011f0:	f7fe fff8 	bl	80001e4 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4906      	ldr	r1, [pc, #24]	; (8001214 <check_timeout_gsm+0x4c>)
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <check_timeout_gsm+0x50>)
 80011fe:	f004 ff49 	bl	8006094 <HAL_UART_Transmit_IT>
		line_lenght_gsm = 0;
 8001202:	4b02      	ldr	r3, [pc, #8]	; (800120c <check_timeout_gsm+0x44>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	}
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002f0 	.word	0x200002f0
 8001210:	200002f8 	.word	0x200002f8
 8001214:	2000028c 	.word	0x2000028c
 8001218:	200004a4 	.word	0x200004a4

0800121c <send_end_line>:

void send_end_line(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	static char end_signs[3] = "\r\n\0";

	if(if_send_end_line == true)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <send_end_line+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <send_end_line+0x1c>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)end_signs, 3);
 8001228:	2203      	movs	r2, #3
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <send_end_line+0x24>)
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <send_end_line+0x28>)
 800122e:	f004 ff31 	bl	8006094 <HAL_UART_Transmit_IT>
		if_send_end_line = false;
 8001232:	4b02      	ldr	r3, [pc, #8]	; (800123c <send_end_line+0x20>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
	}
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002f4 	.word	0x200002f4
 8001240:	20000038 	.word	0x20000038
 8001244:	200004a4 	.word	0x200004a4

08001248 <HAL_UART_RxCpltCallback>:

uint8_t uart2_rx_buffer, uart1_rx_buffer, uart3_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_RxCpltCallback+0x68>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10a      	bne.n	800126e <HAL_UART_RxCpltCallback+0x26>
	{
		line_append_debug(uart2_rx_buffer);
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe57 	bl	8000f10 <line_append_debug>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <HAL_UART_RxCpltCallback+0x68>)
 8001268:	f004 ff72 	bl	8006150 <HAL_UART_Receive_IT>
	else if(huart == &huart3)
	{
		line_append_bluetooth(uart3_rx_buffer);
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
	}
}
 800126c:	e01c      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_UART_RxCpltCallback+0x44>
		line_append_gsm(uart1_rx_buffer);
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff80 	bl	8001180 <line_append_gsm>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001286:	f004 ff63 	bl	8006150 <HAL_UART_Receive_IT>
}
 800128a:	e00d      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d109      	bne.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
		line_append_bluetooth(uart3_rx_buffer);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fedf 	bl	800105c <line_append_bluetooth>
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 80012a4:	f004 ff54 	bl	8006150 <HAL_UART_Receive_IT>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200004a4 	.word	0x200004a4
 80012b4:	2000031f 	.word	0x2000031f
 80012b8:	2000041c 	.word	0x2000041c
 80012bc:	20000320 	.word	0x20000320
 80012c0:	2000052c 	.word	0x2000052c
 80012c4:	20000321 	.word	0x20000321

080012c8 <access_key_draw>:

void access_key_draw(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	static uint32_t random_number;
	static uint16_t access_code;

	if(if_phone_number_set == true)
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <access_key_draw+0x48>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01b      	beq.n	800130c <access_key_draw+0x44>
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012d4:	490f      	ldr	r1, [pc, #60]	; (8001314 <access_key_draw+0x4c>)
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <access_key_draw+0x50>)
 80012d8:	f003 fc47 	bl	8004b6a <HAL_RNG_GenerateRandomNumber>
		access_code = random_number % 10000;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <access_key_draw+0x4c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <access_key_draw+0x54>)
 80012e2:	fba3 1302 	umull	r1, r3, r3, r2
 80012e6:	0b5b      	lsrs	r3, r3, #13
 80012e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <access_key_draw+0x58>)
 80012f6:	801a      	strh	r2, [r3, #0]
		sprintf(access_key, "%04u", access_code);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <access_key_draw+0x58>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4909      	ldr	r1, [pc, #36]	; (8001324 <access_key_draw+0x5c>)
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <access_key_draw+0x60>)
 8001302:	f006 fac7 	bl	8007894 <siprintf>
		if_phone_number_set = false;
 8001306:	4b02      	ldr	r3, [pc, #8]	; (8001310 <access_key_draw+0x48>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	}
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002f5 	.word	0x200002f5
 8001314:	2000034c 	.word	0x2000034c
 8001318:	20000398 	.word	0x20000398
 800131c:	d1b71759 	.word	0xd1b71759
 8001320:	20000350 	.word	0x20000350
 8001324:	08008330 	.word	0x08008330
 8001328:	20000308 	.word	0x20000308

0800132c <send_SMS>:
}sender_state;

int message_number = MESSAGE_1;

void send_SMS(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	static char message_cmgf[] = "AT+CMGF=1\r";
	static char message_cscs[] = "AT+CSCS=\"GSM\"\r";
	static char message_cmgs[31];
	sprintf(message_cmgs, "AT+CMGS=\"+48%s\"\r", phone_number);
 8001330:	4a31      	ldr	r2, [pc, #196]	; (80013f8 <send_SMS+0xcc>)
 8001332:	4932      	ldr	r1, [pc, #200]	; (80013fc <send_SMS+0xd0>)
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <send_SMS+0xd4>)
 8001336:	f006 faad 	bl	8007894 <siprintf>
	access_key_draw();
 800133a:	f7ff ffc5 	bl	80012c8 <access_key_draw>
	static char message_message[34];
	sprintf(message_message, "Kod dostepu do skrytki: %s", access_key);
 800133e:	4a31      	ldr	r2, [pc, #196]	; (8001404 <send_SMS+0xd8>)
 8001340:	4931      	ldr	r1, [pc, #196]	; (8001408 <send_SMS+0xdc>)
 8001342:	4832      	ldr	r0, [pc, #200]	; (800140c <send_SMS+0xe0>)
 8001344:	f006 faa6 	bl	8007894 <siprintf>
	static char message_ctrlz = 0x1A;

	delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f000 fae3 	bl	8001914 <delay>

	switch(message_number)
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <send_SMS+0xe4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b04      	cmp	r3, #4
 8001354:	d84d      	bhi.n	80013f2 <send_SMS+0xc6>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <send_SMS+0x30>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	08001371 	.word	0x08001371
 8001360:	0800138d 	.word	0x0800138d
 8001364:	080013a9 	.word	0x080013a9
 8001368:	080013c5 	.word	0x080013c5
 800136c:	080013e1 	.word	0x080013e1
	{
	case MESSAGE_1:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgf, strlen(message_cmgf));
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <send_SMS+0xe8>)
 8001372:	f7fe ff37 	bl	80001e4 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	4925      	ldr	r1, [pc, #148]	; (8001414 <send_SMS+0xe8>)
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <send_SMS+0xec>)
 8001380:	f004 fe88 	bl	8006094 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_2;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <send_SMS+0xe4>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
		break;
 800138a:	e033      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cscs, strlen(message_cscs));
 800138c:	4823      	ldr	r0, [pc, #140]	; (800141c <send_SMS+0xf0>)
 800138e:	f7fe ff29 	bl	80001e4 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4920      	ldr	r1, [pc, #128]	; (800141c <send_SMS+0xf0>)
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <send_SMS+0xec>)
 800139c:	f004 fe7a 	bl	8006094 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_3;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <send_SMS+0xe4>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
		break;
 80013a6:	e025      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_3:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgs, strlen(message_cmgs));
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <send_SMS+0xd4>)
 80013aa:	f7fe ff1b 	bl	80001e4 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4912      	ldr	r1, [pc, #72]	; (8001400 <send_SMS+0xd4>)
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <send_SMS+0xec>)
 80013b8:	f004 fe6c 	bl	8006094 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_4;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <send_SMS+0xe4>)
 80013be:	2203      	movs	r2, #3
 80013c0:	601a      	str	r2, [r3, #0]
		break;
 80013c2:	e017      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_4:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_message, strlen(message_message));
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <send_SMS+0xe0>)
 80013c6:	f7fe ff0d 	bl	80001e4 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <send_SMS+0xe0>)
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <send_SMS+0xec>)
 80013d4:	f004 fe5e 	bl	8006094 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_5;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <send_SMS+0xe4>)
 80013da:	2204      	movs	r2, #4
 80013dc:	601a      	str	r2, [r3, #0]
		break;
 80013de:	e009      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_5:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&message_ctrlz, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <send_SMS+0xf4>)
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <send_SMS+0xec>)
 80013e6:	f004 fe55 	bl	8006094 <HAL_UART_Transmit_IT>
		message_number = DONE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <send_SMS+0xe4>)
 80013ec:	2205      	movs	r2, #5
 80013ee:	601a      	str	r2, [r3, #0]
		break;
 80013f0:	e000      	b.n	80013f4 <send_SMS+0xc8>
	default:
		break;
 80013f2:	bf00      	nop
	}
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002fc 	.word	0x200002fc
 80013fc:	08008338 	.word	0x08008338
 8001400:	20000354 	.word	0x20000354
 8001404:	20000308 	.word	0x20000308
 8001408:	0800834c 	.word	0x0800834c
 800140c:	20000374 	.word	0x20000374
 8001410:	20000324 	.word	0x20000324
 8001414:	2000003c 	.word	0x2000003c
 8001418:	2000041c 	.word	0x2000041c
 800141c:	20000048 	.word	0x20000048
 8001420:	20000057 	.word	0x20000057

08001424 <send_AT_init>:

void send_AT_init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	static char AT_init[] = "AT\r\n";

	HAL_UART_Transmit_IT(&huart1, (uint8_t*)AT_init, strlen(AT_init));
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <send_AT_init+0x44>)
 800142a:	f7fe fedb 	bl	80001e4 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <send_AT_init+0x44>)
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <send_AT_init+0x48>)
 8001438:	f004 fe2c 	bl	8006094 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)AT_init, strlen(AT_init));
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <send_AT_init+0x44>)
 800143e:	f7fe fed1 	bl	80001e4 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29b      	uxth	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <send_AT_init+0x44>)
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <send_AT_init+0x4c>)
 800144c:	f004 fe22 	bl	8006094 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AT_init, strlen(AT_init));
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <send_AT_init+0x44>)
 8001452:	f7fe fec7 	bl	80001e4 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4902      	ldr	r1, [pc, #8]	; (8001468 <send_AT_init+0x44>)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <send_AT_init+0x50>)
 8001460:	f004 fe18 	bl	8006094 <HAL_UART_Transmit_IT>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000058 	.word	0x20000058
 800146c:	2000041c 	.word	0x2000041c
 8001470:	200004a4 	.word	0x200004a4
 8001474:	2000052c 	.word	0x2000052c

08001478 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_UART_TxCpltCallback+0x30>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d105      	bne.n	8001494 <HAL_UART_TxCpltCallback+0x1c>
	{
		if(if_phone_number_set_latch == true)
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_UART_TxCpltCallback+0x34>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_TxCpltCallback+0x1c>
		{
			send_SMS();
 8001490:	f7ff ff4c 	bl	800132c <send_SMS>
		}
	}
	if(huart == &huart2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_UART_TxCpltCallback+0x38>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_UART_TxCpltCallback+0x28>
	{
		send_end_line();
 800149c:	f7ff febe 	bl	800121c <send_end_line>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000041c 	.word	0x2000041c
 80014ac:	200002f6 	.word	0x200002f6
 80014b0:	200004a4 	.word	0x200004a4

080014b4 <HAL_GPIO_EXTI_Callback>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
volatile uint8_t pressed_key = '\0';

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80014be:	f000 ffaf 	bl	8002420 <HAL_GetTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4aaf      	ldr	r2, [pc, #700]	; (8001784 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014c6:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 200 )
 80014c8:	4bae      	ldr	r3, [pc, #696]	; (8001784 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4bae      	ldr	r3, [pc, #696]	; (8001788 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2bc8      	cmp	r3, #200	; 0xc8
 80014d4:	f240 81d9 	bls.w	800188a <HAL_GPIO_EXTI_Callback+0x3d6>
	{
		GPIO_InitStructPrivate.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 80014d8:	4bac      	ldr	r3, [pc, #688]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014da:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80014de:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80014e0:	4baa      	ldr	r3, [pc, #680]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80014e6:	4ba9      	ldr	r3, [pc, #676]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	4ba7      	ldr	r3, [pc, #668]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 80014f2:	49a6      	ldr	r1, [pc, #664]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014f4:	48a6      	ldr	r0, [pc, #664]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014f6:	f001 f953 	bl	80027a0 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	48a5      	ldr	r0, [pc, #660]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001500:	f001 fb10 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	48a2      	ldr	r0, [pc, #648]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800150a:	f001 fb0b 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	489f      	ldr	r0, [pc, #636]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001516:	f001 fb05 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	489c      	ldr	r0, [pc, #624]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001522:	f001 faff 	bl	8002b24 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800152c:	d10b      	bne.n	8001546 <HAL_GPIO_EXTI_Callback+0x92>
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4897      	ldr	r0, [pc, #604]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001534:	f001 fade 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_EXTI_Callback+0x92>
		{
			pressed_key = '1';
 800153e:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001540:	2231      	movs	r2, #49	; 0x31
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154c:	d10b      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0xb2>
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	488f      	ldr	r0, [pc, #572]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001554:	f001 face 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			pressed_key = '2';
 800155e:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001560:	2232      	movs	r2, #50	; 0x32
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e01e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800156c:	d10b      	bne.n	8001586 <HAL_GPIO_EXTI_Callback+0xd2>
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4887      	ldr	r0, [pc, #540]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001574:	f001 fabe 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_EXTI_Callback+0xd2>
		{
			pressed_key = '3';
 800157e:	4b86      	ldr	r3, [pc, #536]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001580:	2233      	movs	r2, #51	; 0x33
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	d10a      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
 800158e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001592:	487f      	ldr	r0, [pc, #508]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001594:	f001 faae 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		{
			pressed_key = 'A';
 800159e:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80015a0:	2241      	movs	r2, #65	; 0x41
 80015a2:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	487a      	ldr	r0, [pc, #488]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015aa:	f001 fabb 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4878      	ldr	r0, [pc, #480]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015b4:	f001 fab6 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015be:	4875      	ldr	r0, [pc, #468]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015c0:	f001 fab0 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ca:	4872      	ldr	r0, [pc, #456]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015cc:	f001 faaa 	bl	8002b24 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	d10b      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0x13c>
 80015d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015dc:	486c      	ldr	r0, [pc, #432]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015de:	f001 fa89 	bl	8002af4 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_EXTI_Callback+0x13c>
		{
			pressed_key = '4';
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80015ea:	2234      	movs	r2, #52	; 0x34
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e02e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f6:	d10b      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x15c>
 80015f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fc:	4864      	ldr	r0, [pc, #400]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015fe:	f001 fa79 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_EXTI_Callback+0x15c>
		{
			pressed_key = '5';
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800160a:	2235      	movs	r2, #53	; 0x35
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e01e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001616:	d10b      	bne.n	8001630 <HAL_GPIO_EXTI_Callback+0x17c>
 8001618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161c:	485c      	ldr	r0, [pc, #368]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800161e:	f001 fa69 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_EXTI_Callback+0x17c>
		{
			pressed_key = '6';
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800162a:	2236      	movs	r2, #54	; 0x36
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e00e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001636:	d10a      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
 8001638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163c:	4854      	ldr	r0, [pc, #336]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800163e:	f001 fa59 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		{
			pressed_key = 'B';
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800164a:	2242      	movs	r2, #66	; 0x42
 800164c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4850      	ldr	r0, [pc, #320]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001654:	f001 fa66 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	484d      	ldr	r0, [pc, #308]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800165e:	f001 fa61 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001668:	484a      	ldr	r0, [pc, #296]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800166a:	f001 fa5b 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	4847      	ldr	r0, [pc, #284]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001676:	f001 fa55 	bl	8002b24 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001680:	d10b      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0x1e6>
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	4842      	ldr	r0, [pc, #264]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001688:	f001 fa34 	bl	8002af4 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x1e6>
		{
			pressed_key = '7';
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001694:	2237      	movs	r2, #55	; 0x37
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a0:	d10b      	bne.n	80016ba <HAL_GPIO_EXTI_Callback+0x206>
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016a8:	f001 fa24 	bl	8002af4 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_EXTI_Callback+0x206>
		{
			pressed_key = '8';
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016b4:	2238      	movs	r2, #56	; 0x38
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e01e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c0:	d10b      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x226>
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	4832      	ldr	r0, [pc, #200]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016c8:	f001 fa14 	bl	8002af4 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_EXTI_Callback+0x226>
		{
			pressed_key = '9';
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016d4:	2239      	movs	r2, #57	; 0x39
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e00e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e0:	d10a      	bne.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016e8:	f001 fa04 	bl	8002af4 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		{
			pressed_key = 'C';
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016f4:	2243      	movs	r2, #67	; 0x43
 80016f6:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4825      	ldr	r0, [pc, #148]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016fe:	f001 fa11 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	4823      	ldr	r0, [pc, #140]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001708:	f001 fa0c 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001714:	f001 fa06 	bl	8002b24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001720:	f001 fa00 	bl	8002b24 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172a:	d10b      	bne.n	8001744 <HAL_GPIO_EXTI_Callback+0x290>
 800172c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001732:	f001 f9df 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_EXTI_Callback+0x290>
		{
			pressed_key = '*';
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800173e:	222a      	movs	r2, #42	; 0x2a
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e03a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d10b      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x2b0>
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001752:	f001 f9cf 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_EXTI_Callback+0x2b0>
		{
			pressed_key = '0';
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800175e:	2230      	movs	r2, #48	; 0x30
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e02a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176a:	d117      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x2e8>
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001772:	f001 f9bf 	bl	8002af4 <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00f      	beq.n	800179c <HAL_GPIO_EXTI_Callback+0x2e8>
		{
			pressed_key = '#';
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800177e:	2223      	movs	r2, #35	; 0x23
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e01a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
 8001784:	20000340 	.word	0x20000340
 8001788:	2000033c 	.word	0x2000033c
 800178c:	20000328 	.word	0x20000328
 8001790:	48000400 	.word	0x48000400
 8001794:	48000800 	.word	0x48000800
 8001798:	20000344 	.word	0x20000344
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a2:	d10a      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
 80017a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a8:	483a      	ldr	r0, [pc, #232]	; (8001894 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80017aa:	f001 f9a3 	bl	8002af4 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		{
			pressed_key = 'D';
 80017b4:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80017b6:	2244      	movs	r2, #68	; 0x44
 80017b8:	701a      	strb	r2, [r3, #0]
		}

		  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2140      	movs	r1, #64	; 0x40
 80017be:	4837      	ldr	r0, [pc, #220]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017c0:	f001 f9b0 	bl	8002b24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4834      	ldr	r0, [pc, #208]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017ca:	f001 f9ab 	bl	8002b24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4831      	ldr	r0, [pc, #196]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017d6:	f001 f9a5 	bl	8002b24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	482e      	ldr	r0, [pc, #184]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017e2:	f001 f99f 	bl	8002b24 <HAL_GPIO_WritePin>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017e8:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80017ec:	605a      	str	r2, [r3, #4]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	609a      	str	r2, [r3, #8]
		  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 80017f4:	492a      	ldr	r1, [pc, #168]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017f6:	4827      	ldr	r0, [pc, #156]	; (8001894 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80017f8:	f000 ffd2 	bl	80027a0 <HAL_GPIO_Init>

		  if((pressed_key == '1'|| pressed_key == '2'|| pressed_key == '3'|| pressed_key == '4'|| pressed_key == '5'|| pressed_key == '6'|| pressed_key == '7'|| pressed_key == '8'|| pressed_key == '9'|| pressed_key == '0') && if_phone_number_set_latch == true)
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b31      	cmp	r3, #49	; 0x31
 8001804:	d02c      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b32      	cmp	r3, #50	; 0x32
 800180e:	d027      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b33      	cmp	r3, #51	; 0x33
 8001818:	d022      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b34      	cmp	r3, #52	; 0x34
 8001822:	d01d      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b35      	cmp	r3, #53	; 0x35
 800182c:	d018      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b36      	cmp	r3, #54	; 0x36
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b37      	cmp	r3, #55	; 0x37
 8001840:	d00e      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b38      	cmp	r3, #56	; 0x38
 800184a:	d009      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b39      	cmp	r3, #57	; 0x39
 8001854:	d004      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b30      	cmp	r3, #48	; 0x30
 800185e:	d110      	bne.n	8001882 <HAL_GPIO_EXTI_Callback+0x3ce>
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00c      	beq.n	8001882 <HAL_GPIO_EXTI_Callback+0x3ce>
		  		  {
		  			  char pressed_digit = pressed_key;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	73fb      	strb	r3, [r7, #15]
		  			  add_digit(pressed_digit);
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f81f 	bl	80018b4 <add_digit>
		  			  pressed_key = '\0';
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		  			  if_key_pressed = true;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x3f4>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		  		  }

		  previousMillis = currentMillis;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_GPIO_EXTI_Callback+0x3f8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001888:	6013      	str	r3, [r2, #0]

	}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	48000400 	.word	0x48000400
 8001898:	20000344 	.word	0x20000344
 800189c:	48000800 	.word	0x48000800
 80018a0:	20000328 	.word	0x20000328
 80018a4:	200002f6 	.word	0x200002f6
 80018a8:	200002f7 	.word	0x200002f7
 80018ac:	20000340 	.word	0x20000340
 80018b0:	2000033c 	.word	0x2000033c

080018b4 <add_digit>:

int current_index = 0;

void add_digit(char digit)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	if(current_index < BUFFER_SIZE - 1)
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <add_digit+0x38>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	dc0c      	bgt.n	80018e0 <add_digit+0x2c>
	{
		key_buffer[current_index++] = digit;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <add_digit+0x38>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <add_digit+0x38>)
 80018ce:	600a      	str	r2, [r1, #0]
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <add_digit+0x3c>)
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	54ca      	strb	r2, [r1, r3]
		key_buffer[current_index] = '\0';
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <add_digit+0x38>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <add_digit+0x3c>)
 80018dc:	2100      	movs	r1, #0
 80018de:	54d1      	strb	r1, [r2, r3]
	}
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000348 	.word	0x20000348
 80018f0:	20000310 	.word	0x20000310

080018f4 <reset_buffer>:

void reset_buffer()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	memset(key_buffer, 0, BUFFER_SIZE);
 80018f8:	2205      	movs	r2, #5
 80018fa:	2100      	movs	r1, #0
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <reset_buffer+0x18>)
 80018fe:	f005 ffe9 	bl	80078d4 <memset>
	current_index = 0;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <reset_buffer+0x1c>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000310 	.word	0x20000310
 8001910:	20000348 	.word	0x20000348

08001914 <delay>:

void delay(uint32_t iterations)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	while(iterations-- > 0)
 800191c:	e000      	b.n	8001920 <delay+0xc>
	{
		__NOP();
 800191e:	bf00      	nop
	while(iterations-- > 0)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <delay+0xa>
	}
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f000 fd06 	bl	800234e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 f88f 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f7ff f9b3 	bl	8000cb0 <MX_GPIO_Init>
  MX_RNG_Init();
 800194a:	f000 f8f3 	bl	8001b34 <MX_RNG_Init>
  MX_RTC_Init();
 800194e:	f000 f951 	bl	8001bf4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001952:	f000 fb45 	bl	8001fe0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001956:	f000 fb73 	bl	8002040 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800195a:	f000 fba1 	bl	80020a0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800195e:	f7ff fa39 	bl	8000dd4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001962:	f000 fa73 	bl	8001e4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2120      	movs	r1, #32
 800196a:	482f      	ldr	r0, [pc, #188]	; (8001a28 <main+0xf0>)
 800196c:	f001 f8da 	bl	8002b24 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001974:	f000 fd60 	bl	8002438 <HAL_Delay>

  lcd_init();
 8001978:	f7fe fea5 	bl	80006c6 <lcd_init>
  send_AT_init();
 800197c:	f7ff fd52 	bl	8001424 <send_AT_init>

  lcd_backlight(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f7fe ff13 	bl	80007ac <lcd_backlight>
  lcd_clear();
 8001986:	f7fe ff07 	bl	8000798 <lcd_clear>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800198a:	2100      	movs	r1, #0
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <main+0xf4>)
 800198e:	f003 fb97 	bl	80050c0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <main+0xf4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800199a:	635a      	str	r2, [r3, #52]	; 0x34

  memset(key_buffer, '\0', BUFFER_SIZE);
 800199c:	2205      	movs	r2, #5
 800199e:	2100      	movs	r1, #0
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <main+0xf8>)
 80019a2:	f005 ff97 	bl	80078d4 <memset>

  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	4822      	ldr	r0, [pc, #136]	; (8001a34 <main+0xfc>)
 80019ac:	f001 f8ba 	bl	8002b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	481f      	ldr	r0, [pc, #124]	; (8001a34 <main+0xfc>)
 80019b6:	f001 f8b5 	bl	8002b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c0:	481c      	ldr	r0, [pc, #112]	; (8001a34 <main+0xfc>)
 80019c2:	f001 f8af 	bl	8002b24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <main+0xfc>)
 80019ce:	f001 f8a9 	bl	8002b24 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 80019d2:	2201      	movs	r2, #1
 80019d4:	4918      	ldr	r1, [pc, #96]	; (8001a38 <main+0x100>)
 80019d6:	4819      	ldr	r0, [pc, #100]	; (8001a3c <main+0x104>)
 80019d8:	f004 fbba 	bl	8006150 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	4918      	ldr	r1, [pc, #96]	; (8001a40 <main+0x108>)
 80019e0:	4818      	ldr	r0, [pc, #96]	; (8001a44 <main+0x10c>)
 80019e2:	f004 fbb5 	bl	8006150 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	4917      	ldr	r1, [pc, #92]	; (8001a48 <main+0x110>)
 80019ea:	4818      	ldr	r0, [pc, #96]	; (8001a4c <main+0x114>)
 80019ec:	f004 fbb0 	bl	8006150 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_timeout_gsm();
 80019f0:	f7ff fbea 	bl	80011c8 <check_timeout_gsm>
	  lcd_display(if_phone_number_set_latch, if_key_pressed, key_buffer, access_key, pressed_key, open_close_cmd);
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <main+0x118>)
 80019f6:	7818      	ldrb	r0, [r3, #0]
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <main+0x11c>)
 80019fa:	7819      	ldrb	r1, [r3, #0]
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <main+0x120>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <main+0x124>)
 8001a04:	9201      	str	r2, [sp, #4]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <main+0x128>)
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <main+0xf8>)
 8001a0c:	f7fe fee6 	bl	80007dc <lcd_display>
	  if_key_pressed = lcd_display_key(key_buffer, if_key_pressed);
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <main+0x11c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <main+0xf8>)
 8001a18:	f7ff f922 	bl	8000c60 <lcd_display_key>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <main+0x11c>)
 8001a22:	701a      	strb	r2, [r3, #0]
	  check_timeout_gsm();
 8001a24:	e7e4      	b.n	80019f0 <main+0xb8>
 8001a26:	bf00      	nop
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	200003d0 	.word	0x200003d0
 8001a30:	20000310 	.word	0x20000310
 8001a34:	48000800 	.word	0x48000800
 8001a38:	2000031f 	.word	0x2000031f
 8001a3c:	200004a4 	.word	0x200004a4
 8001a40:	20000320 	.word	0x20000320
 8001a44:	2000041c 	.word	0x2000041c
 8001a48:	20000321 	.word	0x20000321
 8001a4c:	2000052c 	.word	0x2000052c
 8001a50:	200002f6 	.word	0x200002f6
 8001a54:	200002f7 	.word	0x200002f7
 8001a58:	20000344 	.word	0x20000344
 8001a5c:	20000318 	.word	0x20000318
 8001a60:	20000308 	.word	0x20000308

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b096      	sub	sp, #88	; 0x58
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	2244      	movs	r2, #68	; 0x44
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 ff2e 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	463b      	mov	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a8a:	f001 fcf5 	bl	8003478 <HAL_PWREx_ControlVoltageScaling>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a94:	f000 f848 	bl	8001b28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a98:	f001 fcd0 	bl	800343c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <SystemClock_Config+0xc0>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <SystemClock_Config+0xc0>)
 8001aa4:	f023 0318 	bic.w	r3, r3, #24
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aac:	2314      	movs	r3, #20
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001acc:	2328      	movs	r3, #40	; 0x28
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 fd1f 	bl	8003524 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001aec:	f000 f81c 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af4:	2303      	movs	r3, #3
 8001af6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	2104      	movs	r1, #4
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 f8e7 	bl	8003cdc <HAL_RCC_ClockConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b14:	f000 f808 	bl	8001b28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b18:	f002 fdee 	bl	80046f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b1c:	bf00      	nop
 8001b1e:	3758      	adds	r7, #88	; 0x58
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_RNG_Init+0x20>)
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <MX_RNG_Init+0x24>)
 8001b3c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_RNG_Init+0x20>)
 8001b40:	f002 ffbc 	bl	8004abc <HAL_RNG_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b4a:	f7ff ffed 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000398 	.word	0x20000398
 8001b58:	50060800 	.word	0x50060800

08001b5c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0a6      	sub	sp, #152	; 0x98
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2288      	movs	r2, #136	; 0x88
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 feb1 	bl	80078d4 <memset>
  if(rngHandle->Instance==RNG)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	; (8001bec <HAL_RNG_MspInit+0x90>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d133      	bne.n	8001be4 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b80:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b92:	2310      	movs	r3, #16
 8001b94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b96:	2307      	movs	r3, #7
 8001b98:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ba2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fab9 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001bb8:	f7ff ffb6 	bl	8001b28 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <HAL_RNG_MspInit+0x94>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_RNG_MspInit+0x94>)
 8001bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RNG_MspInit+0x94>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 2, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	2050      	movs	r0, #80	; 0x50
 8001bda:	f000 fd2c 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001bde:	2050      	movs	r0, #80	; 0x50
 8001be0:	f000 fd45 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001be4:	bf00      	nop
 8001be6:	3798      	adds	r7, #152	; 0x98
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	50060800 	.word	0x50060800
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_RTC_Init+0x48>)
 8001bfa:	4a11      	ldr	r2, [pc, #68]	; (8001c40 <MX_RTC_Init+0x4c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c06:	227f      	movs	r2, #127	; 0x7f
 8001c08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <MX_RTC_Init+0x48>)
 8001c2a:	f003 f873 	bl	8004d14 <HAL_RTC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001c34:	f7ff ff78 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200003a8 	.word	0x200003a8
 8001c40:	40002800 	.word	0x40002800

08001c44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0a4      	sub	sp, #144	; 0x90
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2288      	movs	r2, #136	; 0x88
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 fe3d 	bl	80078d4 <memset>
  if(rtcHandle->Instance==RTC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_RTC_MspInit+0x5c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d118      	bne.n	8001c96 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 fa54 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c82:	f7ff ff51 	bl	8001b28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RTC_MspInit+0x60>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_RTC_MspInit+0x60>)
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c96:	bf00      	nop
 8001c98:	3790      	adds	r7, #144	; 0x90
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40002800 	.word	0x40002800
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x44>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x44>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x44>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x44>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x44>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3c:	f000 fb5c 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART1_IRQHandler+0x10>)
 8001d4a:	f004 fa4d 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000041c 	.word	0x2000041c

08001d58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART2_IRQHandler+0x10>)
 8001d5e:	f004 fa43 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200004a4 	.word	0x200004a4

08001d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART3_IRQHandler+0x10>)
 8001d72:	f004 fa39 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000052c 	.word	0x2000052c

08001d80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d88:	f000 fee4 	bl	8002b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8001d8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d90:	f000 fee0 	bl	8002b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8001d94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d98:	f000 fedc 	bl	8002b54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001da0:	f000 fed8 	bl	8002b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <RNG_IRQHandler+0x10>)
 8001dae:	f002 ff32 	bl	8004c16 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000398 	.word	0x20000398

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f005 fda0 	bl	8007930 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20018000 	.word	0x20018000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	200003cc 	.word	0x200003cc
 8001e24:	20000700 	.word	0x20000700

08001e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001e88:	224f      	movs	r2, #79	; 0x4f
 8001e8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001e94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001ea8:	f003 f852 	bl	8004f50 <HAL_TIM_Base_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001eb2:	f7ff fe39 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481d      	ldr	r0, [pc, #116]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001ec4:	f003 fb16 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ece:	f7ff fe2b 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed2:	4819      	ldr	r0, [pc, #100]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001ed4:	f003 f893 	bl	8004ffe <HAL_TIM_PWM_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ede:	f7ff fe23 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4811      	ldr	r0, [pc, #68]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001ef2:	f003 fff9 	bl	8005ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001efc:	f7ff fe14 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f00:	2360      	movs	r3, #96	; 0x60
 8001f02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001f1a:	f003 f9d7 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001f24:	f7ff fe00 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f28:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM2_Init+0xec>)
 8001f2a:	f000 f825 	bl	8001f78 <HAL_TIM_MspPostInit>

}
 8001f2e:	bf00      	nop
 8001f30:	3738      	adds	r7, #56	; 0x38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200003d0 	.word	0x200003d0

08001f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4c:	d10b      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_TIM_Base_MspInit+0x38>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_TIM_Base_MspInit+0x38>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_TIM_Base_MspInit+0x38>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000

08001f78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f98:	d11c      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_TIM_MspPostInit+0x64>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_TIM_MspPostInit+0x64>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_TIM_MspPostInit+0x64>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_0_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f000 fbe6 	bl	80027a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <MX_USART1_UART_Init+0x5c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fea:	4b13      	ldr	r3, [pc, #76]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_USART1_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_USART1_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_USART1_UART_Init+0x58>)
 8002024:	f003 ffe8 	bl	8005ff8 <HAL_UART_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800202e:	f7ff fd7b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000041c 	.word	0x2000041c
 800203c:	40013800 	.word	0x40013800

08002040 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <MX_USART2_UART_Init+0x5c>)
 8002048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800204c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_USART2_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_USART2_UART_Init+0x58>)
 8002084:	f003 ffb8 	bl	8005ff8 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800208e:	f7ff fd4b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200004a4 	.word	0x200004a4
 800209c:	40004400 	.word	0x40004400

080020a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <MX_USART3_UART_Init+0x5c>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART3_UART_Init+0x58>)
 80020e4:	f003 ff88 	bl	8005ff8 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ee:	f7ff fd1b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000052c 	.word	0x2000052c
 80020fc:	40004800 	.word	0x40004800

08002100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0b0      	sub	sp, #192	; 0xc0
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	2288      	movs	r2, #136	; 0x88
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f005 fbd7 	bl	80078d4 <memset>
  if(uartHandle->Instance==USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6f      	ldr	r2, [pc, #444]	; (80022e8 <HAL_UART_MspInit+0x1e8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d145      	bne.n	80021bc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002134:	2300      	movs	r3, #0
 8002136:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fff1 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002148:	f7ff fcee 	bl	8001b28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214c:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 800214e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002150:	4a66      	ldr	r2, [pc, #408]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002156:	6613      	str	r3, [r2, #96]	; 0x60
 8002158:	4b64      	ldr	r3, [pc, #400]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 800215a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b61      	ldr	r3, [pc, #388]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a60      	ldr	r2, [pc, #384]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002170:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800217c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002196:	2307      	movs	r3, #7
 8002198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021a0:	4619      	mov	r1, r3
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a6:	f000 fafb 	bl	80027a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	2025      	movs	r0, #37	; 0x25
 80021b0:	f000 fa41 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021b4:	2025      	movs	r0, #37	; 0x25
 80021b6:	f000 fa5a 	bl	800266e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021ba:	e091      	b.n	80022e0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4b      	ldr	r2, [pc, #300]	; (80022f0 <HAL_UART_MspInit+0x1f0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d144      	bne.n	8002250 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021c6:	2302      	movs	r3, #2
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 ffa6 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80021de:	f7ff fca3 	bl	8001b28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e2:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a41      	ldr	r2, [pc, #260]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002212:	230c      	movs	r3, #12
 8002214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222a:	2307      	movs	r3, #7
 800222c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223a:	f000 fab1 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	210a      	movs	r1, #10
 8002242:	2026      	movs	r0, #38	; 0x26
 8002244:	f000 f9f7 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002248:	2026      	movs	r0, #38	; 0x26
 800224a:	f000 fa10 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 800224e:	e047      	b.n	80022e0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_UART_MspInit+0x1f4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d142      	bne.n	80022e0 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800225a:	2304      	movs	r3, #4
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800225e:	2300      	movs	r3, #0
 8002260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4618      	mov	r0, r3
 8002268:	f001 ff5c 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002272:	f7ff fc59 	bl	8001b28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6593      	str	r3, [r2, #88]	; 0x58
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_UART_MspInit+0x1ec>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022a6:	2330      	movs	r3, #48	; 0x30
 80022a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022be:	2307      	movs	r3, #7
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022c8:	4619      	mov	r1, r3
 80022ca:	480b      	ldr	r0, [pc, #44]	; (80022f8 <HAL_UART_MspInit+0x1f8>)
 80022cc:	f000 fa68 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2108      	movs	r1, #8
 80022d4:	2027      	movs	r0, #39	; 0x27
 80022d6:	f000 f9ae 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022da:	2027      	movs	r0, #39	; 0x27
 80022dc:	f000 f9c7 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 80022e0:	bf00      	nop
 80022e2:	37c0      	adds	r7, #192	; 0xc0
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40004400 	.word	0x40004400
 80022f4:	40004800 	.word	0x40004800
 80022f8:	48000800 	.word	0x48000800

080022fc <Reset_Handler>:
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002334 <LoopForever+0x2>
 8002300:	f7ff fd92 	bl	8001e28 <SystemInit>
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <LoopForever+0x6>)
 8002306:	490d      	ldr	r1, [pc, #52]	; (800233c <LoopForever+0xa>)
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <LoopForever+0xe>)
 800230a:	2300      	movs	r3, #0
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:
 800230e:	58d4      	ldr	r4, [r2, r3]
 8002310:	50c4      	str	r4, [r0, r3]
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:
 8002314:	18c4      	adds	r4, r0, r3
 8002316:	428c      	cmp	r4, r1
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <LoopForever+0x12>)
 800231c:	4c0a      	ldr	r4, [pc, #40]	; (8002348 <LoopForever+0x16>)
 800231e:	2300      	movs	r3, #0
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:
 8002326:	42a2      	cmp	r2, r4
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>
 800232a:	f005 fb07 	bl	800793c <__libc_init_array>
 800232e:	f7ff fb03 	bl	8001938 <main>

08002332 <LoopForever>:
 8002332:	e7fe      	b.n	8002332 <LoopForever>
 8002334:	20018000 	.word	0x20018000
 8002338:	20000000 	.word	0x20000000
 800233c:	200000bc 	.word	0x200000bc
 8002340:	080083f4 	.word	0x080083f4
 8002344:	200000bc 	.word	0x200000bc
 8002348:	20000700 	.word	0x20000700

0800234c <ADC1_2_IRQHandler>:
 800234c:	e7fe      	b.n	800234c <ADC1_2_IRQHandler>

0800234e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002358:	2003      	movs	r0, #3
 800235a:	f000 f961 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235e:	2000      	movs	r0, #0
 8002360:	f000 f80e 	bl	8002380 <HAL_InitTick>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	e001      	b.n	8002374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002370:	f7ff fc9a 	bl	8001ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002374:	79fb      	ldrb	r3, [r7, #7]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_InitTick+0x6c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_InitTick+0x70>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_InitTick+0x6c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f96d 	bl	800268a <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d809      	bhi.n	80023d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f000 f937 	bl	8002636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_InitTick+0x74>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e004      	b.n	80023e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e001      	b.n	80023e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000068 	.word	0x20000068
 80023f0:	20000060 	.word	0x20000060
 80023f4:	20000064 	.word	0x20000064

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000068 	.word	0x20000068
 800241c:	200005b4 	.word	0x200005b4

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200005b4 	.word	0x200005b4

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000068 	.word	0x20000068

08002480 <__NVIC_SetPriorityGrouping>:
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d008      	beq.n	80026cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2204      	movs	r2, #4
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e022      	b.n	8002712 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 020e 	bic.w	r2, r2, #14
 80026da:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f003 021c 	and.w	r2, r3, #28
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d005      	beq.n	8002742 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e029      	b.n	8002796 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 020e 	bic.w	r2, r2, #14
 8002750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f003 021c 	and.w	r2, r3, #28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f202 	lsl.w	r2, r1, r2
 8002774:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
    }
  }
  return status;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	e17f      	b.n	8002ab0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8171 	beq.w	8002aaa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d005      	beq.n	80027e0 <HAL_GPIO_Init+0x40>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d130      	bne.n	8002842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002816:	2201      	movs	r2, #1
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0201 	and.w	r2, r3, #1
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d118      	bne.n	8002880 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002854:	2201      	movs	r2, #1
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f003 0201 	and.w	r2, r3, #1
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	6939      	ldr	r1, [r7, #16]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80ac 	beq.w	8002aaa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_GPIO_Init+0x330>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002956:	4a5e      	ldr	r2, [pc, #376]	; (8002ad0 <HAL_GPIO_Init+0x330>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6613      	str	r3, [r2, #96]	; 0x60
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_GPIO_Init+0x330>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800296a:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x242>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4f      	ldr	r2, [pc, #316]	; (8002ad8 <HAL_GPIO_Init+0x338>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x23e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4e      	ldr	r2, [pc, #312]	; (8002adc <HAL_GPIO_Init+0x33c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x23a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <HAL_GPIO_Init+0x340>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x236>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <HAL_GPIO_Init+0x344>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x232>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_GPIO_Init+0x348>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x22e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <HAL_GPIO_Init+0x34c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x22a>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x244>
 80029e2:	2300      	movs	r3, #0
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029f4:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_GPIO_Init+0x334>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a26:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a50:	4a27      	ldr	r2, [pc, #156]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_GPIO_Init+0x350>)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f47f ae78 	bne.w	80027b0 <HAL_GPIO_Init+0x10>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	48001000 	.word	0x48001000
 8002ae8:	48001400 	.word	0x48001400
 8002aec:	48001800 	.word	0x48001800
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e001      	b.n	8002b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d006      	beq.n	8002b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fc9e 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e08d      	b.n	8002cb2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f952 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e006      	b.n	8002c0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d108      	bne.n	8002c26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	f040 80fd 	bne.w	8002ed8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_I2C_Master_Transmit+0x30>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0f6      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cf4:	f7ff fb94 	bl	8002420 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2319      	movs	r3, #25
 8002d00:	2201      	movs	r2, #1
 8002d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f914 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0e1      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2210      	movs	r2, #16
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2bff      	cmp	r3, #255	; 0xff
 8002d46:	d906      	bls.n	8002d56 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	22ff      	movs	r2, #255	; 0xff
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e007      	b.n	8002d66 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	781a      	ldrb	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <HAL_I2C_Master_Transmit+0x228>)
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 fa79 	bl	80032a8 <I2C_TransferConfig>
 8002db6:	e066      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <HAL_I2C_Master_Transmit+0x228>)
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa6e 	bl	80032a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002dcc:	e05b      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	6a39      	ldr	r1, [r7, #32]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f8fd 	bl	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e07b      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d034      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d130      	bne.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f880 	bl	8002f34 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e04d      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d90e      	bls.n	8002e66 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa22 	bl	80032a8 <I2C_TransferConfig>
 8002e64:	e00f      	b.n	8002e86 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fa11 	bl	80032a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d19e      	bne.n	8002dce <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	6a39      	ldr	r1, [r7, #32]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f8e3 	bl	8003060 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e01a      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_I2C_Master_Transmit+0x22c>)
 8002eb8:	400b      	ands	r3, r1
 8002eba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	80002000 	.word	0x80002000
 8002ee8:	fe00e800 	.word	0xfe00e800

08002eec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d103      	bne.n	8002f0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d007      	beq.n	8002f28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	619a      	str	r2, [r3, #24]
  }
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	e031      	b.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d02d      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7ff fa67 	bl	8002420 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d122      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d113      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d0be      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fde:	e033      	b.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f87f 	bl	80030e8 <I2C_IsErrorOccurred>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e031      	b.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d025      	beq.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffc:	f7ff fa10 	bl	8002420 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	d302      	bcc.n	8003012 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11a      	bne.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b02      	cmp	r3, #2
 800301e:	d013      	beq.n	8003048 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d1c4      	bne.n	8002fe0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306c:	e02f      	b.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f838 	bl	80030e8 <I2C_IsErrorOccurred>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e02d      	b.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7ff f9cd 	bl	8002420 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11a      	bne.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d013      	beq.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1c8      	bne.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b00      	cmp	r3, #0
 8003112:	d068      	beq.n	80031e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2210      	movs	r2, #16
 800311a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800311c:	e049      	b.n	80031b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d045      	beq.n	80031b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003126:	f7ff f97b 	bl	8002420 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <I2C_IsErrorOccurred+0x54>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13a      	bne.n	80031b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003146:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800314e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d121      	bne.n	80031a4 <I2C_IsErrorOccurred+0xbc>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003166:	d01d      	beq.n	80031a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b20      	cmp	r3, #32
 800316c:	d01a      	beq.n	80031a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800317e:	f7ff f94f 	bl	8002420 <HAL_GetTick>
 8003182:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	e00e      	b.n	80031a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003186:	f7ff f94b 	bl	8002420 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b19      	cmp	r3, #25
 8003192:	d907      	bls.n	80031a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f043 0320 	orr.w	r3, r3, #32
 800319a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031a2:	e006      	b.n	80031b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d1e9      	bne.n	8003186 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d003      	beq.n	80031c8 <I2C_IsErrorOccurred+0xe0>
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0aa      	beq.n	800311e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01c      	beq.n	8003296 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fe45 	bl	8002eec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <I2C_IsErrorOccurred+0x1bc>)
 800326e:	400b      	ands	r3, r1
 8003270:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800329a:	4618      	mov	r0, r3
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	fe00e800 	.word	0xfe00e800

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	817b      	strh	r3, [r7, #10]
 80032b6:	4613      	mov	r3, r2
 80032b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c0:	7a7b      	ldrb	r3, [r7, #9]
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	0d5b      	lsrs	r3, r3, #21
 80032e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <I2C_TransferConfig+0x60>)
 80032e8:	430b      	orrs	r3, r1
 80032ea:	43db      	mvns	r3, r3
 80032ec:	ea02 0103 	and.w	r1, r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	03ff63ff 	.word	0x03ff63ff

0800330c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	d138      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800332c:	2302      	movs	r3, #2
 800332e:	e032      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	; 0x24
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d139      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e033      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2224      	movs	r2, #36	; 0x24
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000

0800345c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <HAL_PWREx_GetVoltageRange+0x18>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40007000 	.word	0x40007000

08003478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003486:	d130      	bne.n	80034ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003494:	d038      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2232      	movs	r2, #50	; 0x32
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	0c9b      	lsrs	r3, r3, #18
 80034b8:	3301      	adds	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034bc:	e002      	b.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d102      	bne.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f2      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d110      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e00f      	b.n	800350a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d007      	beq.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003500:	4a05      	ldr	r2, [pc, #20]	; (8003518 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003506:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000
 800351c:	20000060 	.word	0x20000060
 8003520:	431bde83 	.word	0x431bde83

08003524 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e3ca      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003536:	4b97      	ldr	r3, [pc, #604]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003540:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80e4 	beq.w	8003720 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_RCC_OscConfig+0x4a>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	f040 808b 	bne.w	800367c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 8087 	bne.w	800367c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_RCC_OscConfig+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e3a2      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_RCC_OscConfig+0x7c>
 8003596:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359e:	e005      	b.n	80035ac <HAL_RCC_OscConfig+0x88>
 80035a0:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d223      	bcs.n	80035f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd55 	bl	8004064 <RCC_SetFlashLatencyFromMSIRange>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e383      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c4:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035ca:	f043 0308 	orr.w	r3, r3, #8
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b70      	ldr	r3, [pc, #448]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	496d      	ldr	r1, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e2:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	4968      	ldr	r1, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
 80035f6:	e025      	b.n	8003644 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a65      	ldr	r2, [pc, #404]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035fe:	f043 0308 	orr.w	r3, r3, #8
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4960      	ldr	r1, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	495b      	ldr	r1, [pc, #364]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fd15 	bl	8004064 <RCC_SetFlashLatencyFromMSIRange>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e343      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003644:	f000 fc4a 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	4950      	ldr	r1, [pc, #320]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	4a4e      	ldr	r2, [pc, #312]	; (800379c <HAL_RCC_OscConfig+0x278>)
 8003662:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003664:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCC_OscConfig+0x27c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe fe89 	bl	8002380 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d052      	beq.n	800371e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	e327      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d032      	beq.n	80036ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003684:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003690:	f7fe fec6 	bl	8002420 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003698:	f7fe fec2 	bl	8002420 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e310      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a36      	ldr	r2, [pc, #216]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4931      	ldr	r1, [pc, #196]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	492c      	ldr	r1, [pc, #176]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e01a      	b.n	8003720 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f6:	f7fe fe93 	bl	8002420 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fe:	f7fe fe8f 	bl	8002420 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e2dd      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x1da>
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d074      	beq.n	8003816 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x21a>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d10e      	bne.n	8003756 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d10b      	bne.n	8003756 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d064      	beq.n	8003814 <HAL_RCC_OscConfig+0x2f0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d160      	bne.n	8003814 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e2ba      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x24a>
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e026      	b.n	80037bc <HAL_RCC_OscConfig+0x298>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003776:	d115      	bne.n	80037a4 <HAL_RCC_OscConfig+0x280>
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800377e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x298>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	08008368 	.word	0x08008368
 800379c:	20000060 	.word	0x20000060
 80037a0:	20000064 	.word	0x20000064
 80037a4:	4ba0      	ldr	r3, [pc, #640]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a9f      	ldr	r2, [pc, #636]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b9d      	ldr	r3, [pc, #628]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a9c      	ldr	r2, [pc, #624]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe fe2c 	bl	8002420 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fe28 	bl	8002420 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e276      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	4b92      	ldr	r3, [pc, #584]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x2a8>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fe18 	bl	8002420 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fe14 	bl	8002420 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e262      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x2d0>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d060      	beq.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x310>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d119      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d116      	bne.n	8003862 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003834:	4b7c      	ldr	r3, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x328>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e23f      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	4973      	ldr	r1, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003860:	e040      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d023      	beq.n	80038b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386a:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fdd3 	bl	8002420 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fdcf 	bl	8002420 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e21d      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b62      	ldr	r3, [pc, #392]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	495f      	ldr	r1, [pc, #380]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	e018      	b.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5c      	ldr	r2, [pc, #368]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fe fdaf 	bl	8002420 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fdab 	bl	8002420 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1f9      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d03c      	beq.n	800396a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f8:	4b4b      	ldr	r3, [pc, #300]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fe:	4a4a      	ldr	r2, [pc, #296]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe fd8a 	bl	8002420 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fd86 	bl	8002420 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e1d4      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCC_OscConfig+0x3ec>
 8003930:	e01b      	b.n	800396a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe fd6d 	bl	8002420 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394a:	f7fe fd69 	bl	8002420 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e1b7      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	4b32      	ldr	r3, [pc, #200]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ef      	bne.n	800394a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a6 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	; 0x58
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d118      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fd30 	bl	8002420 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fe fd2c 	bl	8002420 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e17a      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCC_OscConfig+0x508>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <HAL_RCC_OscConfig+0x4d8>
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039fa:	e029      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d115      	bne.n	8003a30 <HAL_RCC_OscConfig+0x50c>
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a24:	e014      	b.n	8003a50 <HAL_RCC_OscConfig+0x52c>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	4b9c      	ldr	r3, [pc, #624]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	4a9b      	ldr	r2, [pc, #620]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a40:	4b98      	ldr	r3, [pc, #608]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a97      	ldr	r2, [pc, #604]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fe fce2 	bl	8002420 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe fcde 	bl	8002420 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e12a      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ed      	beq.n	8003a60 <HAL_RCC_OscConfig+0x53c>
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe fccb 	bl	8002420 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fcc7 	bl	8002420 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e113      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b7f      	ldr	r3, [pc, #508]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ed      	bne.n	8003a8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d105      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab8:	4b7a      	ldr	r3, [pc, #488]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a79      	ldr	r2, [pc, #484]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80fe 	beq.w	8003cca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f040 80d0 	bne.w	8003c78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ad8:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d130      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d127      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d11f      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b18:	2a07      	cmp	r2, #7
 8003b1a:	bf14      	ite	ne
 8003b1c:	2201      	movne	r2, #1
 8003b1e:	2200      	moveq	r2, #0
 8003b20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d113      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d06e      	beq.n	8003c2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d069      	beq.n	8003c28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b54:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ad      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b70:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4b      	ldr	r2, [pc, #300]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b7c:	f7fe fc50 	bl	8002420 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe fc4c 	bl	8002420 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e09a      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba2:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	4b40      	ldr	r3, [pc, #256]	; (8003ca8 <HAL_RCC_OscConfig+0x784>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bbc:	0212      	lsls	r2, r2, #8
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0552      	lsls	r2, r2, #21
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bd0:	0852      	lsrs	r2, r2, #1
 8003bd2:	3a01      	subs	r2, #1
 8003bd4:	0652      	lsls	r2, r2, #25
 8003bd6:	4311      	orrs	r1, r2
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bdc:	0912      	lsrs	r2, r2, #4
 8003bde:	0452      	lsls	r2, r2, #17
 8003be0:	430a      	orrs	r2, r1
 8003be2:	4930      	ldr	r1, [pc, #192]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c00:	f7fe fc0e 	bl	8002420 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe fc0a 	bl	8002420 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e058      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c26:	e050      	b.n	8003cca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e04f      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d148      	bne.n	8003cca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c50:	f7fe fbe6 	bl	8002420 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fbe2 	bl	8002420 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e030      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x734>
 8003c76:	e028      	b.n	8003cca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d023      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <HAL_RCC_OscConfig+0x780>)
 8003c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fbc9 	bl	8002420 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c90:	e00c      	b.n	8003cac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c92:	f7fe fbc5 	bl	8002420 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d905      	bls.n	8003cac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e013      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_OscConfig+0x7b0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ec      	bne.n	8003c92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x7b0>)
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	4905      	ldr	r1, [pc, #20]	; (8003cd4 <HAL_RCC_OscConfig+0x7b0>)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x7b4>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60cb      	str	r3, [r1, #12]
 8003cc4:	e001      	b.n	8003cca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	feeefffc 	.word	0xfeeefffc

08003cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0e7      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b75      	ldr	r3, [pc, #468]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d910      	bls.n	8003d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 0207 	bic.w	r2, r3, #7
 8003d06:	4970      	ldr	r1, [pc, #448]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0cf      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	4b66      	ldr	r3, [pc, #408]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d908      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4960      	ldr	r1, [pc, #384]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04c      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d62:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d121      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0a6      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7a:	4b54      	ldr	r3, [pc, #336]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d115      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e09a      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d92:	4b4e      	ldr	r3, [pc, #312]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e08e      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e086      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003db2:	4b46      	ldr	r3, [pc, #280]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4943      	ldr	r1, [pc, #268]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fb2c 	bl	8002420 <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dcc:	f7fe fb28 	bl	8002420 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e06e      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 020c 	and.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1eb      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d208      	bcs.n	8003e22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	492b      	ldr	r1, [pc, #172]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d210      	bcs.n	8003e52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 0207 	bic.w	r2, r3, #7
 8003e38:	4923      	ldr	r1, [pc, #140]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e036      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4918      	ldr	r1, [pc, #96]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4910      	ldr	r1, [pc, #64]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e90:	f000 f824 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	490b      	ldr	r1, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8003eae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1fc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fa63 	bl	8002380 <HAL_InitTick>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ebe:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40022000 	.word	0x40022000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08008368 	.word	0x08008368
 8003ed4:	20000060 	.word	0x20000060
 8003ed8:	20000064 	.word	0x20000064

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef4:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x34>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b0c      	cmp	r3, #12
 8003f08:	d121      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d11e      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f10:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e005      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f54:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_RCC_GetSysClockFreq+0x110>)
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	e004      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d134      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0xac>
 8003f80:	e005      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_GetSysClockFreq+0x110>)
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	e005      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f8a:	617b      	str	r3, [r7, #20]
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	617b      	str	r3, [r7, #20]
      break;
 8003f92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	fb03 f202 	mul.w	r2, r3, r2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	0e5b      	lsrs	r3, r3, #25
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08008380 	.word	0x08008380
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	007a1200 	.word	0x007a1200

08003ff4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000060 	.word	0x20000060

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4904      	ldr	r1, [pc, #16]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	08008378 	.word	0x08008378

08004038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800403c:	f7ff ffda 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0adb      	lsrs	r3, r3, #11
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	08008378 	.word	0x08008378

08004064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800407c:	f7ff f9ee 	bl	800345c <HAL_PWREx_GetVoltageRange>
 8004080:	6178      	str	r0, [r7, #20]
 8004082:	e014      	b.n	80040ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004084:	4b25      	ldr	r3, [pc, #148]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	6593      	str	r3, [r2, #88]	; 0x58
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800409c:	f7ff f9de 	bl	800345c <HAL_PWREx_GetVoltageRange>
 80040a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040a2:	4b1e      	ldr	r3, [pc, #120]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	4a1d      	ldr	r2, [pc, #116]	; (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d10b      	bne.n	80040ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d919      	bls.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2ba0      	cmp	r3, #160	; 0xa0
 80040c0:	d902      	bls.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c2:	2302      	movs	r3, #2
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e013      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040c8:	2301      	movs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	e010      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d902      	bls.n	80040da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040d4:	2303      	movs	r3, #3
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e00a      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d102      	bne.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e0:	2302      	movs	r3, #2
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e004      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b70      	cmp	r3, #112	; 0x70
 80040ea:	d101      	bne.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 0207 	bic.w	r2, r3, #7
 80040f8:	4909      	ldr	r1, [pc, #36]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	40022000 	.word	0x40022000

08004124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800412c:	2300      	movs	r3, #0
 800412e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004130:	2300      	movs	r3, #0
 8004132:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413c:	2b00      	cmp	r3, #0
 800413e:	d041      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004144:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004148:	d02a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800414a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800414e:	d824      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004156:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800415a:	d81e      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004164:	d010      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004166:	e018      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004168:	4b86      	ldr	r3, [pc, #536]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a85      	ldr	r2, [pc, #532]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004174:	e015      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 facb 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3320      	adds	r3, #32
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fbb6 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	74fb      	strb	r3, [r7, #19]
      break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a8:	4b76      	ldr	r3, [pc, #472]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b6:	4973      	ldr	r1, [pc, #460]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d041      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041d8:	d02a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041de:	d824      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ea:	d81e      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d010      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041f6:	e018      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041f8:	4b62      	ldr	r3, [pc, #392]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a61      	ldr	r2, [pc, #388]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004204:	e015      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa83 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004216:	e00c      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3320      	adds	r3, #32
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fb6e 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	74fb      	strb	r3, [r7, #19]
      break;
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004232:	7cfb      	ldrb	r3, [r7, #19]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004238:	4b52      	ldr	r3, [pc, #328]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004246:	494f      	ldr	r1, [pc, #316]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800424e:	e001      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a0 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004266:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427c:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	4a40      	ldr	r2, [pc, #256]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	6593      	str	r3, [r2, #88]	; 0x58
 8004288:	4b3e      	ldr	r3, [pc, #248]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004294:	2301      	movs	r3, #1
 8004296:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3a      	ldr	r2, [pc, #232]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a4:	f7fe f8bc 	bl	8002420 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fe f8b8 	bl	8002420 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	74fb      	strb	r3, [r7, #19]
        break;
 80042be:	e005      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c0:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ef      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d15c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d2:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01f      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d019      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800431c:	4a19      	ldr	r2, [pc, #100]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fe f877 	bl	8002420 <HAL_GetTick>
 8004332:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004334:	e00b      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fe f873 	bl	8002420 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d902      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	74fb      	strb	r3, [r7, #19]
            break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ec      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004372:	4904      	ldr	r1, [pc, #16]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437a:	e009      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
 8004380:	e006      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004390:	7c7b      	ldrb	r3, [r7, #17]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004396:	4b9e      	ldr	r3, [pc, #632]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	4a9d      	ldr	r2, [pc, #628]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ae:	4b98      	ldr	r3, [pc, #608]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	4994      	ldr	r1, [pc, #592]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d0:	4b8f      	ldr	r3, [pc, #572]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f023 020c 	bic.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	498c      	ldr	r1, [pc, #560]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f2:	4b87      	ldr	r3, [pc, #540]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	4983      	ldr	r1, [pc, #524]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004414:	4b7e      	ldr	r3, [pc, #504]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	497b      	ldr	r1, [pc, #492]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004436:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	4972      	ldr	r1, [pc, #456]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004458:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	496a      	ldr	r1, [pc, #424]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004488:	4961      	ldr	r1, [pc, #388]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800449c:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	4959      	ldr	r1, [pc, #356]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044be:	4b54      	ldr	r3, [pc, #336]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044cc:	4950      	ldr	r1, [pc, #320]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e0:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	4948      	ldr	r1, [pc, #288]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004502:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	493f      	ldr	r1, [pc, #252]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d028      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004524:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004532:	4937      	ldr	r1, [pc, #220]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004542:	d106      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004544:	4b32      	ldr	r3, [pc, #200]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a31      	ldr	r2, [pc, #196]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
 8004550:	e011      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f8d8 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	491f      	ldr	r1, [pc, #124]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ac:	60d3      	str	r3, [r2, #12]
 80045ae:	e011      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f8a9 	bl	8004718 <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	4908      	ldr	r1, [pc, #32]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fe:	d109      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a02      	ldr	r2, [pc, #8]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	e014      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f877 	bl	8004718 <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02f      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004644:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004652:	4928      	ldr	r1, [pc, #160]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004662:	d10d      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f854 	bl	8004718 <RCCEx_PLLSAI1_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	74bb      	strb	r3, [r7, #18]
 800467e:	e011      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3320      	adds	r3, #32
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f935 	bl	8004900 <RCCEx_PLLSAI2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046be:	490d      	ldr	r1, [pc, #52]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	4904      	ldr	r1, [pc, #16]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000

08004718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004726:	4b75      	ldr	r3, [pc, #468]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004732:	4b72      	ldr	r3, [pc, #456]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0203 	and.w	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d10d      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
       ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800474a:	4b6c      	ldr	r3, [pc, #432]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
       ||
 800475a:	429a      	cmp	r2, r3
 800475c:	d047      	beq.n	80047ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
 8004762:	e044      	b.n	80047ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d018      	beq.n	800479e <RCCEx_PLLSAI1_Config+0x86>
 800476c:	2b03      	cmp	r3, #3
 800476e:	d825      	bhi.n	80047bc <RCCEx_PLLSAI1_Config+0xa4>
 8004770:	2b01      	cmp	r3, #1
 8004772:	d002      	beq.n	800477a <RCCEx_PLLSAI1_Config+0x62>
 8004774:	2b02      	cmp	r3, #2
 8004776:	d009      	beq.n	800478c <RCCEx_PLLSAI1_Config+0x74>
 8004778:	e020      	b.n	80047bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800477a:	4b60      	ldr	r3, [pc, #384]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11d      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478a:	e01a      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800478c:	4b5b      	ldr	r3, [pc, #364]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d116      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479c:	e013      	b.n	80047c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800479e:	4b57      	ldr	r3, [pc, #348]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10f      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047aa:	4b54      	ldr	r3, [pc, #336]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ba:	e006      	b.n	80047ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      break;
 80047c0:	e004      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047c2:	bf00      	nop
 80047c4:	e002      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047c6:	bf00      	nop
 80047c8:	e000      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047d2:	4b4a      	ldr	r3, [pc, #296]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	430b      	orrs	r3, r1
 80047e8:	4944      	ldr	r1, [pc, #272]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d17d      	bne.n	80048f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047f4:	4b41      	ldr	r3, [pc, #260]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a40      	ldr	r2, [pc, #256]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd fe0e 	bl	8002420 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004806:	e009      	b.n	800481c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004808:	f7fd fe0a 	bl	8002420 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d902      	bls.n	800481c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	73fb      	strb	r3, [r7, #15]
        break;
 800481a:	e005      	b.n	8004828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800481c:	4b37      	ldr	r3, [pc, #220]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1ef      	bne.n	8004808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d160      	bne.n	80048f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d111      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004834:	4b31      	ldr	r3, [pc, #196]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800483c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	0211      	lsls	r1, r2, #8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68d2      	ldr	r2, [r2, #12]
 800484a:	0912      	lsrs	r2, r2, #4
 800484c:	0452      	lsls	r2, r2, #17
 800484e:	430a      	orrs	r2, r1
 8004850:	492a      	ldr	r1, [pc, #168]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004852:	4313      	orrs	r3, r2
 8004854:	610b      	str	r3, [r1, #16]
 8004856:	e027      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d112      	bne.n	8004884 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800485e:	4b27      	ldr	r3, [pc, #156]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004866:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	0211      	lsls	r1, r2, #8
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6912      	ldr	r2, [r2, #16]
 8004874:	0852      	lsrs	r2, r2, #1
 8004876:	3a01      	subs	r2, #1
 8004878:	0552      	lsls	r2, r2, #21
 800487a:	430a      	orrs	r2, r1
 800487c:	491f      	ldr	r1, [pc, #124]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	610b      	str	r3, [r1, #16]
 8004882:	e011      	b.n	80048a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004884:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800488c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	0211      	lsls	r1, r2, #8
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6952      	ldr	r2, [r2, #20]
 800489a:	0852      	lsrs	r2, r2, #1
 800489c:	3a01      	subs	r2, #1
 800489e:	0652      	lsls	r2, r2, #25
 80048a0:	430a      	orrs	r2, r1
 80048a2:	4916      	ldr	r1, [pc, #88]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048a8:	4b14      	ldr	r3, [pc, #80]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a13      	ldr	r2, [pc, #76]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd fdb4 	bl	8002420 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ba:	e009      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048bc:	f7fd fdb0 	bl	8002420 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d902      	bls.n	80048d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
          break;
 80048ce:	e005      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ef      	beq.n	80048bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4904      	ldr	r1, [pc, #16]	; (80048fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800491a:	4b67      	ldr	r3, [pc, #412]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004932:	4b61      	ldr	r3, [pc, #388]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d047      	beq.n	80049d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d018      	beq.n	8004986 <RCCEx_PLLSAI2_Config+0x86>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCCEx_PLLSAI2_Config+0xa4>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d002      	beq.n	8004962 <RCCEx_PLLSAI2_Config+0x62>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <RCCEx_PLLSAI2_Config+0x74>
 8004960:	e020      	b.n	80049a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004962:	4b55      	ldr	r3, [pc, #340]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e01a      	b.n	80049aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004974:	4b50      	ldr	r3, [pc, #320]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d116      	bne.n	80049ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004984:	e013      	b.n	80049ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ba:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4939      	ldr	r1, [pc, #228]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d167      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049dc:	4b36      	ldr	r3, [pc, #216]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fd1a 	bl	8002420 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f0:	f7fd fd16 	bl	8002420 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a04:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d14a      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d111      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	0912      	lsrs	r2, r2, #4
 8004a34:	0452      	lsls	r2, r2, #17
 8004a36:	430a      	orrs	r2, r1
 8004a38:	491f      	ldr	r1, [pc, #124]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	614b      	str	r3, [r1, #20]
 8004a3e:	e011      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6892      	ldr	r2, [r2, #8]
 8004a50:	0211      	lsls	r1, r2, #8
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6912      	ldr	r2, [r2, #16]
 8004a56:	0852      	lsrs	r2, r2, #1
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	0652      	lsls	r2, r2, #25
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	4916      	ldr	r1, [pc, #88]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fd fcd6 	bl	8002420 <HAL_GetTick>
 8004a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a76:	e009      	b.n	8004a8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a78:	f7fd fcd2 	bl	8002420 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d902      	bls.n	8004a8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	73fb      	strb	r3, [r7, #15]
          break;
 8004a8a:	e005      	b.n	8004a98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ef      	beq.n	8004a78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000

08004abc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e049      	b.n	8004b62 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	795b      	ldrb	r3, [r3, #5]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fd f83c 	bl	8001b5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0204 	orr.w	r2, r2, #4
 8004af8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d104      	bne.n	8004b12 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e027      	b.n	8004b62 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b12:	f7fd fc85 	bl	8002420 <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b18:	e015      	b.n	8004b46 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b1a:	f7fd fc81 	bl	8002420 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d90e      	bls.n	8004b46 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d107      	bne.n	8004b46 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e00d      	b.n	8004b62 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d0e2      	beq.n	8004b1a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	791b      	ldrb	r3, [r3, #4]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e044      	b.n	8004c0e <HAL_RNG_GenerateRandomNumber+0xa4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	795b      	ldrb	r3, [r3, #5]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d133      	bne.n	8004bfc <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9a:	f7fd fc41 	bl	8002420 <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ba0:	e018      	b.n	8004bd4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ba2:	f7fd fc3d 	bl	8002420 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d911      	bls.n	8004bd4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e01c      	b.n	8004c0e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d1df      	bne.n	8004ba2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	715a      	strb	r2, [r3, #5]
 8004bfa:	e004      	b.n	8004c06 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	711a      	strb	r2, [r3, #4]

  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2210      	movs	r2, #16
 8004c38:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	e01f      	b.n	8004c80 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01a      	beq.n	8004c80 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	e00c      	b.n	8004c80 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0208 	bic.w	r2, r2, #8
 8004c7e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10b      	bne.n	8004c9e <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f837 	bl	8004d00 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004c9a:	605a      	str	r2, [r3, #4]

    return;
 8004c9c:	e022      	b.n	8004ce4 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01d      	beq.n	8004ce4 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0208 	bic.w	r2, r2, #8
 8004cb6:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	795b      	ldrb	r3, [r3, #5]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d00b      	beq.n	8004ce4 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f803 	bl	8004cea <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d079      	beq.n	8004e1a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc ff82 	bl	8001c44 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d058      	beq.n	8004e08 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	22ca      	movs	r2, #202	; 0xca
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2253      	movs	r2, #83	; 0x53
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f880 	bl	8004e6c <RTC_EnterInitMode>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d127      	bne.n	8004dc6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68d2      	ldr	r2, [r2, #12]
 8004db0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	041a      	lsls	r2, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f884 	bl	8004ed4 <RTC_ExitInitMode>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d113      	bne.n	8004dfe <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0203 	bic.w	r2, r2, #3
 8004de4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
 8004e06:	e001      	b.n	8004e0c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_RTC_WaitForSynchro+0x44>)
 8004e32:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e34:	f7fd faf4 	bl	8002420 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e3a:	e009      	b.n	8004e50 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e3c:	f7fd faf0 	bl	8002420 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4a:	d901      	bls.n	8004e50 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e007      	b.n	8004e60 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ee      	beq.n	8004e3c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	0003ff5f 	.word	0x0003ff5f

08004e6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d120      	bne.n	8004ec8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004e90:	f7fd fac6 	bl	8002420 <HAL_GetTick>
 8004e94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004e96:	e00d      	b.n	8004eb4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e98:	f7fd fac2 	bl	8002420 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea6:	d905      	bls.n	8004eb4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2203      	movs	r2, #3
 8004eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <RTC_EnterInitMode+0x5c>
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d1e7      	bne.n	8004e98 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004eec:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10c      	bne.n	8004f12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff93 	bl	8004e24 <HAL_RTC_WaitForSynchro>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01e      	beq.n	8004f42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2203      	movs	r2, #3
 8004f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e017      	b.n	8004f42 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004f18:	f023 0320 	bic.w	r3, r3, #32
 8004f1c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ff80 	bl	8004e24 <HAL_RTC_WaitForSynchro>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <RTC_ExitInitMode+0x78>)
 8004f3c:	f043 0320 	orr.w	r3, r3, #32
 8004f40:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40002800 	.word	0x40002800

08004f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e049      	b.n	8004ff6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc ffe0 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 fb7a 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e049      	b.n	80050a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f841 	bl	80050ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f000 fb23 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x24>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e03c      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d109      	bne.n	80050fe <HAL_TIM_PWM_Start+0x3e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e02f      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x58>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e022      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d109      	bne.n	8005132 <HAL_TIM_PWM_Start+0x72>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e015      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b10      	cmp	r3, #16
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x8c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e008      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e09c      	b.n	80052a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0xb6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	e023      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xc6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005184:	e01b      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xd6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	e013      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xe6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a4:	e00b      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xf6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b4:	e003      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fe68 	bl	8005e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <HAL_TIM_PWM_Start+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a34      	ldr	r2, [pc, #208]	; (80052ac <HAL_TIM_PWM_Start+0x1ec>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a32      	ldr	r2, [pc, #200]	; (80052b0 <HAL_TIM_PWM_Start+0x1f0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_TIM_PWM_Start+0x1f4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <HAL_TIM_PWM_Start+0x1f8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Start+0x142>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_TIM_PWM_Start+0x144>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_TIM_PWM_Start+0x1e8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d018      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_TIM_PWM_Start+0x1fc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_TIM_PWM_Start+0x200>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_TIM_PWM_Start+0x204>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	; (80052ac <HAL_TIM_PWM_Start+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <HAL_TIM_PWM_Start+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d115      	bne.n	800528a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <HAL_TIM_PWM_Start+0x208>)
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d015      	beq.n	800529c <HAL_TIM_PWM_Start+0x1dc>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005276:	d011      	beq.n	800529c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	e008      	b.n	800529c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e000      	b.n	800529e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	00010007 	.word	0x00010007

080052cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ff      	b.n	80054ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b14      	cmp	r3, #20
 80052f6:	f200 80f0 	bhi.w	80054da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005355 	.word	0x08005355
 8005304:	080054db 	.word	0x080054db
 8005308:	080054db 	.word	0x080054db
 800530c:	080054db 	.word	0x080054db
 8005310:	08005395 	.word	0x08005395
 8005314:	080054db 	.word	0x080054db
 8005318:	080054db 	.word	0x080054db
 800531c:	080054db 	.word	0x080054db
 8005320:	080053d7 	.word	0x080053d7
 8005324:	080054db 	.word	0x080054db
 8005328:	080054db 	.word	0x080054db
 800532c:	080054db 	.word	0x080054db
 8005330:	08005417 	.word	0x08005417
 8005334:	080054db 	.word	0x080054db
 8005338:	080054db 	.word	0x080054db
 800533c:	080054db 	.word	0x080054db
 8005340:	08005459 	.word	0x08005459
 8005344:	080054db 	.word	0x080054db
 8005348:	080054db 	.word	0x080054db
 800534c:	080054db 	.word	0x080054db
 8005350:	08005499 	.word	0x08005499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fa2e 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0208 	orr.w	r2, r2, #8
 800536e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0204 	bic.w	r2, r2, #4
 800537e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6999      	ldr	r1, [r3, #24]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	619a      	str	r2, [r3, #24]
      break;
 8005392:	e0a5      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fa9e 	bl	80058dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6999      	ldr	r1, [r3, #24]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]
      break;
 80053d4:	e084      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fb07 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0208 	orr.w	r2, r2, #8
 80053f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0204 	bic.w	r2, r2, #4
 8005400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69d9      	ldr	r1, [r3, #28]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	61da      	str	r2, [r3, #28]
      break;
 8005414:	e064      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fb6f 	bl	8005b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69d9      	ldr	r1, [r3, #28]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	61da      	str	r2, [r3, #28]
      break;
 8005456:	e043      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbb8 	bl	8005bd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0208 	orr.w	r2, r2, #8
 8005472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0204 	bic.w	r2, r2, #4
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005496:	e023      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fbfc 	bl	8005c9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	021a      	lsls	r2, r3, #8
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054d8:	e002      	b.n	80054e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
      break;
 80054de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop

080054f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIM_ConfigClockSource+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e0b6      	b.n	800567e <HAL_TIM_ConfigClockSource+0x18a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d03e      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd8>
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005552:	f200 8087 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	f000 8086 	beq.w	800566a <HAL_TIM_ConfigClockSource+0x176>
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d87f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d01a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xaa>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d87b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d050      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x11e>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d877      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d03c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xfe>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d873      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d058      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x13e>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d86f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d064      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d86b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d060      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d867      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05c      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 8005598:	2b10      	cmp	r3, #16
 800559a:	d05a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15e>
 800559c:	e062      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	f000 fc55 	bl	8005e5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	609a      	str	r2, [r3, #8]
      break;
 80055ca:	e04f      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	f000 fc3e 	bl	8005e5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ee:	609a      	str	r2, [r3, #8]
      break;
 80055f0:	e03c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 fbb2 	bl	8005d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2150      	movs	r1, #80	; 0x50
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fc0b 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005610:	e02c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	461a      	mov	r2, r3
 8005620:	f000 fbd1 	bl	8005dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2160      	movs	r1, #96	; 0x60
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fbfb 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005630:	e01c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 fb92 	bl	8005d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fbeb 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005650:	e00c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f000 fbe2 	bl	8005e26 <TIM_ITRx_SetConfig>
      break;
 8005662:	e003      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800566a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <TIM_Base_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <TIM_Base_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01f      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d01b      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d017      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00f      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00b      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d007      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d003      	beq.n	8005722 <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d108      	bne.n	8005734 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a10      	ldr	r2, [pc, #64]	; (800579c <TIM_Base_SetConfig+0x114>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a12      	ldr	r2, [pc, #72]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a10      	ldr	r2, [pc, #64]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f023 0201 	bic.w	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <TIM_OC1_SetConfig+0x10c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <TIM_OC1_SetConfig+0x110>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_OC1_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_OC1_SetConfig+0x118>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC1_SetConfig+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_OC1_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0308 	bic.w	r3, r3, #8
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC1_SetConfig+0x10c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00f      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_OC1_SetConfig+0x110>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00b      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_OC1_SetConfig+0x114>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_OC1_SetConfig+0x118>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC1_SetConfig+0xc2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC1_SetConfig+0x11c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d111      	bne.n	80058a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40013400 	.word	0x40013400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f023 0210 	bic.w	r2, r3, #16
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0320 	bic.w	r3, r3, #32
 800592a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a28      	ldr	r2, [pc, #160]	; (80059dc <TIM_OC2_SetConfig+0x100>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <TIM_OC2_SetConfig+0x104>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10d      	bne.n	8005964 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <TIM_OC2_SetConfig+0x100>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00f      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <TIM_OC2_SetConfig+0x104>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <TIM_OC2_SetConfig+0x108>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <TIM_OC2_SetConfig+0x10c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC2_SetConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a19      	ldr	r2, [pc, #100]	; (80059ec <TIM_OC2_SetConfig+0x110>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d113      	bne.n	80059b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_OC3_SetConfig+0xfc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_OC3_SetConfig+0x6a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <TIM_OC3_SetConfig+0x100>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10d      	bne.n	8005a76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <TIM_OC3_SetConfig+0xfc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <TIM_OC3_SetConfig+0x100>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <TIM_OC3_SetConfig+0x104>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <TIM_OC3_SetConfig+0x108>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_OC3_SetConfig+0xae>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <TIM_OC3_SetConfig+0x10c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d113      	bne.n	8005ac6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40013400 	.word	0x40013400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800

08005b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <TIM_OC4_SetConfig+0xc0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <TIM_OC4_SetConfig+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <TIM_OC4_SetConfig+0xc8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <TIM_OC4_SetConfig+0xcc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC4_SetConfig+0x84>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a14      	ldr	r2, [pc, #80]	; (8005bd0 <TIM_OC4_SetConfig+0xd0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d109      	bne.n	8005b98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC5_SetConfig+0xb4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC5_SetConfig+0xb8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC5_SetConfig+0xbc>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <TIM_OC5_SetConfig+0xc0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC5_SetConfig+0x7a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <TIM_OC5_SetConfig+0xc4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d109      	bne.n	8005c62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	621a      	str	r2, [r3, #32]
}
 8005c7c:	bf00      	nop
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40013400 	.word	0x40013400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	051b      	lsls	r3, r3, #20
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <TIM_OC6_SetConfig+0xb8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00f      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <TIM_OC6_SetConfig+0xbc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <TIM_OC6_SetConfig+0xc0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <TIM_OC6_SetConfig+0xc4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC6_SetConfig+0x7c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <TIM_OC6_SetConfig+0xc8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d109      	bne.n	8005d2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40013400 	.word	0x40013400
 8005d5c:	40014000 	.word	0x40014000
 8005d60:	40014400 	.word	0x40014400
 8005d64:	40014800 	.word	0x40014800

08005d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 030a 	bic.w	r3, r3, #10
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b087      	sub	sp, #28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f023 0210 	bic.w	r2, r3, #16
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	031b      	lsls	r3, r3, #12
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f043 0307 	orr.w	r3, r3, #7
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	609a      	str	r2, [r3, #8]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2201      	movs	r2, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1a      	ldr	r2, [r3, #32]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e068      	b.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2d      	ldr	r2, [pc, #180]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01d      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d018      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a14      	ldr	r2, [pc, #80]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40000c00 	.word	0x40000c00
 8005ff4:	40014000 	.word	0x40014000

08005ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e040      	b.n	800608c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fc f870 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2224      	movs	r2, #36	; 0x24
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fe8a 	bl	8006d58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fbcf 	bl	80067e8 <UART_SetConfig>
 800604a:	4603      	mov	r3, r0
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e01b      	b.n	800608c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 ff09 	bl	8006e9c <UART_CheckIdleState>
 800608a:	4603      	mov	r3, r0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006094:	b480      	push	{r7}
 8006096:	b08b      	sub	sp, #44	; 0x2c
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d147      	bne.n	800613a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_UART_Transmit_IT+0x22>
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e040      	b.n	800613c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2221      	movs	r2, #33	; 0x21
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d107      	bne.n	80060fe <HAL_UART_Transmit_IT+0x6a>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a13      	ldr	r2, [pc, #76]	; (8006148 <HAL_UART_Transmit_IT+0xb4>)
 80060fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80060fc:	e002      	b.n	8006104 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a12      	ldr	r2, [pc, #72]	; (800614c <HAL_UART_Transmit_IT+0xb8>)
 8006102:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	613b      	str	r3, [r7, #16]
   return(result);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	69f9      	ldr	r1, [r7, #28]
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e6      	bne.n	8006104 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e000      	b.n	800613c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
  }
}
 800613c:	4618      	mov	r0, r3
 800613e:	372c      	adds	r7, #44	; 0x2c
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	080073f5 	.word	0x080073f5
 800614c:	0800733d 	.word	0x0800733d

08006150 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006164:	2b20      	cmp	r3, #32
 8006166:	d137      	bne.n	80061d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_UART_Receive_IT+0x24>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e030      	b.n	80061da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <HAL_UART_Receive_IT+0x94>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01f      	beq.n	80061c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d018      	beq.n	80061c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 ff74 	bl	80070bc <UART_Start_Receive_IT>
 80061d4:	4603      	mov	r3, r0
 80061d6:	e000      	b.n	80061da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3728      	adds	r7, #40	; 0x28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40008000 	.word	0x40008000

080061e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b0ba      	sub	sp, #232	; 0xe8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800620e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006212:	f640 030f 	movw	r3, #2063	; 0x80f
 8006216:	4013      	ands	r3, r2
 8006218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800621c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d115      	bne.n	8006250 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00f      	beq.n	8006250 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 82ae 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
      }
      return;
 800624e:	e2a8      	b.n	80067a2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8117 	beq.w	8006488 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800625a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800626a:	4b85      	ldr	r3, [pc, #532]	; (8006480 <HAL_UART_IRQHandler+0x298>)
 800626c:	4013      	ands	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 810a 	beq.w	8006488 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d011      	beq.n	80062a4 <HAL_UART_IRQHandler+0xbc>
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d011      	beq.n	80062d4 <HAL_UART_IRQHandler+0xec>
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2202      	movs	r2, #2
 80062c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d011      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
 80062e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2204      	movs	r2, #4
 80062f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fa:	f043 0202 	orr.w	r2, r3, #2
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800631c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006320:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2208      	movs	r2, #8
 800632e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006336:	f043 0208 	orr.w	r2, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006348:	2b00      	cmp	r3, #0
 800634a:	d012      	beq.n	8006372 <HAL_UART_IRQHandler+0x18a>
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8214 	beq.w	80067a6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d04f      	beq.n	800646a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 ff3c 	bl	8007248 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d141      	bne.n	8006462 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800640a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800640e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1d9      	bne.n	80063de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006436:	4a13      	ldr	r2, [pc, #76]	; (8006484 <HAL_UART_IRQHandler+0x29c>)
 8006438:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643e:	4618      	mov	r0, r3
 8006440:	f7fc f96d 	bl	800271e <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d017      	beq.n	800647a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006458:	e00f      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9ae 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006460:	e00b      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9aa 	bl	80067bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e007      	b.n	800647a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9a6 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006478:	e195      	b.n	80067a6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647a:	bf00      	nop
    return;
 800647c:	e193      	b.n	80067a6 <HAL_UART_IRQHandler+0x5be>
 800647e:	bf00      	nop
 8006480:	04000120 	.word	0x04000120
 8006484:	08007311 	.word	0x08007311

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	2b01      	cmp	r3, #1
 800648e:	f040 814e 	bne.w	800672e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0310 	and.w	r3, r3, #16
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8147 	beq.w	800672e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8140 	beq.w	800672e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	f040 80b8 	bne.w	8006636 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8167 	beq.w	80067aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 815f 	bcs.w	80067aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8086 	bne.w	8006614 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800653e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1da      	bne.n	8006508 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3308      	adds	r3, #8
 8006572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800657a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800657e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e1      	bne.n	8006552 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800659e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e4:	f023 0310 	bic.w	r3, r3, #16
 80065e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80065f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e4      	bne.n	80065d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800660e:	4618      	mov	r0, r3
 8006610:	f7fc f847 	bl	80026a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006626:	b29b      	uxth	r3, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	b29b      	uxth	r3, r3
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8ce 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006634:	e0b9      	b.n	80067aa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006642:	b29b      	uxth	r3, r3
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80ab 	beq.w	80067ae <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a6 	beq.w	80067ae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e4      	bne.n	8006662 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	623b      	str	r3, [r7, #32]
   return(result);
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066bc:	633a      	str	r2, [r7, #48]	; 0x30
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e3      	bne.n	8006698 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	617b      	str	r3, [r7, #20]
   return(result);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e4      	bne.n	80066e4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006720:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f852 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800672c:	e03f      	b.n	80067ae <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <HAL_UART_IRQHandler+0x570>
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800674e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f895 	bl	8007880 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006756:	e02d      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01c      	beq.n	80067b2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
    }
    return;
 8006780:	e017      	b.n	80067b2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d012      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00c      	beq.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fe8a 	bl	80074b4 <UART_EndTransmit_IT>
    return;
 80067a0:	e008      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067a2:	bf00      	nop
 80067a4:	e006      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80067a6:	bf00      	nop
 80067a8:	e004      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067aa:	bf00      	nop
 80067ac:	e002      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067ae:	bf00      	nop
 80067b0:	e000      	b.n	80067b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80067b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067b4:	37e8      	adds	r7, #232	; 0xe8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop

080067bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067ec:	b08a      	sub	sp, #40	; 0x28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	431a      	orrs	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	4313      	orrs	r3, r2
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4ba4      	ldr	r3, [pc, #656]	; (8006aa8 <UART_SetConfig+0x2c0>)
 8006818:	4013      	ands	r3, r2
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	6812      	ldr	r2, [r2, #0]
 800681e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006820:	430b      	orrs	r3, r1
 8006822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a99      	ldr	r2, [pc, #612]	; (8006aac <UART_SetConfig+0x2c4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006850:	4313      	orrs	r3, r2
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006864:	430a      	orrs	r2, r1
 8006866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a90      	ldr	r2, [pc, #576]	; (8006ab0 <UART_SetConfig+0x2c8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d126      	bne.n	80068c0 <UART_SetConfig+0xd8>
 8006872:	4b90      	ldr	r3, [pc, #576]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	2b03      	cmp	r3, #3
 800687e:	d81b      	bhi.n	80068b8 <UART_SetConfig+0xd0>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <UART_SetConfig+0xa0>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	08006899 	.word	0x08006899
 800688c:	080068a9 	.word	0x080068a9
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068b1 	.word	0x080068b1
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689e:	e116      	b.n	8006ace <UART_SetConfig+0x2e6>
 80068a0:	2302      	movs	r3, #2
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a6:	e112      	b.n	8006ace <UART_SetConfig+0x2e6>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e10e      	b.n	8006ace <UART_SetConfig+0x2e6>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b6:	e10a      	b.n	8006ace <UART_SetConfig+0x2e6>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e106      	b.n	8006ace <UART_SetConfig+0x2e6>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a7c      	ldr	r2, [pc, #496]	; (8006ab8 <UART_SetConfig+0x2d0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d138      	bne.n	800693c <UART_SetConfig+0x154>
 80068ca:	4b7a      	ldr	r3, [pc, #488]	; (8006ab4 <UART_SetConfig+0x2cc>)
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	f003 030c 	and.w	r3, r3, #12
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	d82d      	bhi.n	8006934 <UART_SetConfig+0x14c>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <UART_SetConfig+0xf8>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006915 	.word	0x08006915
 80068e4:	08006935 	.word	0x08006935
 80068e8:	08006935 	.word	0x08006935
 80068ec:	08006935 	.word	0x08006935
 80068f0:	08006925 	.word	0x08006925
 80068f4:	08006935 	.word	0x08006935
 80068f8:	08006935 	.word	0x08006935
 80068fc:	08006935 	.word	0x08006935
 8006900:	0800691d 	.word	0x0800691d
 8006904:	08006935 	.word	0x08006935
 8006908:	08006935 	.word	0x08006935
 800690c:	08006935 	.word	0x08006935
 8006910:	0800692d 	.word	0x0800692d
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e0d8      	b.n	8006ace <UART_SetConfig+0x2e6>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e0d4      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e0d0      	b.n	8006ace <UART_SetConfig+0x2e6>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e0cc      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e0c8      	b.n	8006ace <UART_SetConfig+0x2e6>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a5e      	ldr	r2, [pc, #376]	; (8006abc <UART_SetConfig+0x2d4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d125      	bne.n	8006992 <UART_SetConfig+0x1aa>
 8006946:	4b5b      	ldr	r3, [pc, #364]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006950:	2b30      	cmp	r3, #48	; 0x30
 8006952:	d016      	beq.n	8006982 <UART_SetConfig+0x19a>
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	d818      	bhi.n	800698a <UART_SetConfig+0x1a2>
 8006958:	2b20      	cmp	r3, #32
 800695a:	d00a      	beq.n	8006972 <UART_SetConfig+0x18a>
 800695c:	2b20      	cmp	r3, #32
 800695e:	d814      	bhi.n	800698a <UART_SetConfig+0x1a2>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <UART_SetConfig+0x182>
 8006964:	2b10      	cmp	r3, #16
 8006966:	d008      	beq.n	800697a <UART_SetConfig+0x192>
 8006968:	e00f      	b.n	800698a <UART_SetConfig+0x1a2>
 800696a:	2300      	movs	r3, #0
 800696c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006970:	e0ad      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006972:	2302      	movs	r3, #2
 8006974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006978:	e0a9      	b.n	8006ace <UART_SetConfig+0x2e6>
 800697a:	2304      	movs	r3, #4
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006980:	e0a5      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006982:	2308      	movs	r3, #8
 8006984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006988:	e0a1      	b.n	8006ace <UART_SetConfig+0x2e6>
 800698a:	2310      	movs	r3, #16
 800698c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006990:	e09d      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a4a      	ldr	r2, [pc, #296]	; (8006ac0 <UART_SetConfig+0x2d8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d125      	bne.n	80069e8 <UART_SetConfig+0x200>
 800699c:	4b45      	ldr	r3, [pc, #276]	; (8006ab4 <UART_SetConfig+0x2cc>)
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069a6:	2bc0      	cmp	r3, #192	; 0xc0
 80069a8:	d016      	beq.n	80069d8 <UART_SetConfig+0x1f0>
 80069aa:	2bc0      	cmp	r3, #192	; 0xc0
 80069ac:	d818      	bhi.n	80069e0 <UART_SetConfig+0x1f8>
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d00a      	beq.n	80069c8 <UART_SetConfig+0x1e0>
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d814      	bhi.n	80069e0 <UART_SetConfig+0x1f8>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <UART_SetConfig+0x1d8>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d008      	beq.n	80069d0 <UART_SetConfig+0x1e8>
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x1f8>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e082      	b.n	8006ace <UART_SetConfig+0x2e6>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e07e      	b.n	8006ace <UART_SetConfig+0x2e6>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e07a      	b.n	8006ace <UART_SetConfig+0x2e6>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e076      	b.n	8006ace <UART_SetConfig+0x2e6>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e072      	b.n	8006ace <UART_SetConfig+0x2e6>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a35      	ldr	r2, [pc, #212]	; (8006ac4 <UART_SetConfig+0x2dc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d12a      	bne.n	8006a48 <UART_SetConfig+0x260>
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <UART_SetConfig+0x2cc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a00:	d01a      	beq.n	8006a38 <UART_SetConfig+0x250>
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a06:	d81b      	bhi.n	8006a40 <UART_SetConfig+0x258>
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d00c      	beq.n	8006a28 <UART_SetConfig+0x240>
 8006a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a12:	d815      	bhi.n	8006a40 <UART_SetConfig+0x258>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <UART_SetConfig+0x238>
 8006a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1c:	d008      	beq.n	8006a30 <UART_SetConfig+0x248>
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x258>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e052      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e04e      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e04a      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e046      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e042      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	; (8006aac <UART_SetConfig+0x2c4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d13a      	bne.n	8006ac8 <UART_SetConfig+0x2e0>
 8006a52:	4b18      	ldr	r3, [pc, #96]	; (8006ab4 <UART_SetConfig+0x2cc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a60:	d01a      	beq.n	8006a98 <UART_SetConfig+0x2b0>
 8006a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a66:	d81b      	bhi.n	8006aa0 <UART_SetConfig+0x2b8>
 8006a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6c:	d00c      	beq.n	8006a88 <UART_SetConfig+0x2a0>
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a72:	d815      	bhi.n	8006aa0 <UART_SetConfig+0x2b8>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <UART_SetConfig+0x298>
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d008      	beq.n	8006a90 <UART_SetConfig+0x2a8>
 8006a7e:	e00f      	b.n	8006aa0 <UART_SetConfig+0x2b8>
 8006a80:	2300      	movs	r3, #0
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e022      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e01e      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e01a      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9e:	e016      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa6:	e012      	b.n	8006ace <UART_SetConfig+0x2e6>
 8006aa8:	efff69f3 	.word	0xefff69f3
 8006aac:	40008000 	.word	0x40008000
 8006ab0:	40013800 	.word	0x40013800
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40004400 	.word	0x40004400
 8006abc:	40004800 	.word	0x40004800
 8006ac0:	40004c00 	.word	0x40004c00
 8006ac4:	40005000 	.word	0x40005000
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a9f      	ldr	r2, [pc, #636]	; (8006d50 <UART_SetConfig+0x568>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d17a      	bne.n	8006bce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d824      	bhi.n	8006b2a <UART_SetConfig+0x342>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x300>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b2b 	.word	0x08006b2b
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b2b 	.word	0x08006b2b
 8006af8:	08006b1b 	.word	0x08006b1b
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b2b 	.word	0x08006b2b
 8006b04:	08006b2b 	.word	0x08006b2b
 8006b08:	08006b23 	.word	0x08006b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fd fa7e 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8006b10:	61f8      	str	r0, [r7, #28]
        break;
 8006b12:	e010      	b.n	8006b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b8f      	ldr	r3, [pc, #572]	; (8006d54 <UART_SetConfig+0x56c>)
 8006b16:	61fb      	str	r3, [r7, #28]
        break;
 8006b18:	e00d      	b.n	8006b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1a:	f7fd f9df 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8006b1e:	61f8      	str	r0, [r7, #28]
        break;
 8006b20:	e009      	b.n	8006b36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	61fb      	str	r3, [r7, #28]
        break;
 8006b28:	e005      	b.n	8006b36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80fb 	beq.w	8006d34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d305      	bcc.n	8006b5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d903      	bls.n	8006b62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b60:	e0e8      	b.n	8006d34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	2200      	movs	r2, #0
 8006b66:	461c      	mov	r4, r3
 8006b68:	4615      	mov	r5, r2
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	022b      	lsls	r3, r5, #8
 8006b74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b78:	0222      	lsls	r2, r4, #8
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6849      	ldr	r1, [r1, #4]
 8006b7e:	0849      	lsrs	r1, r1, #1
 8006b80:	2000      	movs	r0, #0
 8006b82:	4688      	mov	r8, r1
 8006b84:	4681      	mov	r9, r0
 8006b86:	eb12 0a08 	adds.w	sl, r2, r8
 8006b8a:	eb43 0b09 	adc.w	fp, r3, r9
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	4659      	mov	r1, fp
 8006ba0:	f7f9 fb7e 	bl	80002a0 <__aeabi_uldivmod>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4613      	mov	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb2:	d308      	bcc.n	8006bc6 <UART_SetConfig+0x3de>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bba:	d204      	bcs.n	8006bc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	60da      	str	r2, [r3, #12]
 8006bc4:	e0b6      	b.n	8006d34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bcc:	e0b2      	b.n	8006d34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd6:	d15e      	bne.n	8006c96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d828      	bhi.n	8006c32 <UART_SetConfig+0x44a>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x400>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c33 	.word	0x08006c33
 8006bf8:	08006c23 	.word	0x08006c23
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
 8006c08:	08006c2b 	.word	0x08006c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd f9fe 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8006c10:	61f8      	str	r0, [r7, #28]
        break;
 8006c12:	e014      	b.n	8006c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fd fa10 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 8006c18:	61f8      	str	r0, [r7, #28]
        break;
 8006c1a:	e010      	b.n	8006c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c1c:	4b4d      	ldr	r3, [pc, #308]	; (8006d54 <UART_SetConfig+0x56c>)
 8006c1e:	61fb      	str	r3, [r7, #28]
        break;
 8006c20:	e00d      	b.n	8006c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c22:	f7fd f95b 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8006c26:	61f8      	str	r0, [r7, #28]
        break;
 8006c28:	e009      	b.n	8006c3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	61fb      	str	r3, [r7, #28]
        break;
 8006c30:	e005      	b.n	8006c3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d077      	beq.n	8006d34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	005a      	lsls	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d916      	bls.n	8006c8e <UART_SetConfig+0x4a6>
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c66:	d212      	bcs.n	8006c8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f023 030f 	bic.w	r3, r3, #15
 8006c70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	8afb      	ldrh	r3, [r7, #22]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	8afa      	ldrh	r2, [r7, #22]
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e052      	b.n	8006d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c94:	e04e      	b.n	8006d34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d827      	bhi.n	8006cee <UART_SetConfig+0x506>
 8006c9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x4bc>)
 8006ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	08006cef 	.word	0x08006cef
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cef 	.word	0x08006cef
 8006cbc:	08006cef 	.word	0x08006cef
 8006cc0:	08006cef 	.word	0x08006cef
 8006cc4:	08006ce7 	.word	0x08006ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f7fd f9a0 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 8006ccc:	61f8      	str	r0, [r7, #28]
        break;
 8006cce:	e014      	b.n	8006cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd0:	f7fd f9b2 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 8006cd4:	61f8      	str	r0, [r7, #28]
        break;
 8006cd6:	e010      	b.n	8006cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <UART_SetConfig+0x56c>)
 8006cda:	61fb      	str	r3, [r7, #28]
        break;
 8006cdc:	e00d      	b.n	8006cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fd f8fd 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8006ce2:	61f8      	str	r0, [r7, #28]
        break;
 8006ce4:	e009      	b.n	8006cfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cea:	61fb      	str	r3, [r7, #28]
        break;
 8006cec:	e005      	b.n	8006cfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cf8:	bf00      	nop
    }

    if (pclk != 0U)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d019      	beq.n	8006d34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	085a      	lsrs	r2, r3, #1
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d909      	bls.n	8006d2e <UART_SetConfig+0x546>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d20:	d205      	bcs.n	8006d2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60da      	str	r2, [r3, #12]
 8006d2c:	e002      	b.n	8006d34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3728      	adds	r7, #40	; 0x28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4e:	bf00      	nop
 8006d50:	40008000 	.word	0x40008000
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d10a      	bne.n	8006e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b098      	sub	sp, #96	; 0x60
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eac:	f7fb fab8 	bl	8002420 <HAL_GetTick>
 8006eb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d12e      	bne.n	8006f1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f88c 	bl	8006fec <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d021      	beq.n	8006f1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eee:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8006efa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e062      	b.n	8006fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d149      	bne.n	8006fc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f34:	2200      	movs	r2, #0
 8006f36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f856 	bl	8006fec <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03c      	beq.n	8006fc0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	623b      	str	r3, [r7, #32]
   return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30
 8006f66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e5      	bne.n	8006f78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e011      	b.n	8006fe4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3758      	adds	r7, #88	; 0x58
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffc:	e049      	b.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d045      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fb fa0b 	bl	8002420 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <UART_WaitOnFlagUntilTimeout+0x30>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e048      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d031      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d110      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2208      	movs	r2, #8
 8007042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f8ff 	bl	8007248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2208      	movs	r2, #8
 800704e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e029      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706c:	d111      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f8e5 	bl	8007248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e00f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0a6      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070bc:	b480      	push	{r7}
 80070be:	b097      	sub	sp, #92	; 0x5c
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	88fa      	ldrh	r2, [r7, #6]
 80070dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	d10e      	bne.n	800710e <UART_Start_Receive_IT+0x52>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d105      	bne.n	8007104 <UART_Start_Receive_IT+0x48>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007102:	e02d      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	22ff      	movs	r2, #255	; 0xff
 8007108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800710c:	e028      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <UART_Start_Receive_IT+0x76>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <UART_Start_Receive_IT+0x6c>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007126:	e01b      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	227f      	movs	r2, #127	; 0x7f
 800712c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007130:	e016      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713a:	d10d      	bne.n	8007158 <UART_Start_Receive_IT+0x9c>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <UART_Start_Receive_IT+0x92>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	227f      	movs	r2, #127	; 0x7f
 8007148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800714c:	e008      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	223f      	movs	r2, #63	; 0x3f
 8007152:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007156:	e003      	b.n	8007160 <UART_Start_Receive_IT+0xa4>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2222      	movs	r2, #34	; 0x22
 800716c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3308      	adds	r3, #8
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	657b      	str	r3, [r7, #84]	; 0x54
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3308      	adds	r3, #8
 800718e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007190:	64ba      	str	r2, [r7, #72]	; 0x48
 8007192:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800719e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e5      	bne.n	8007170 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ac:	d107      	bne.n	80071be <UART_Start_Receive_IT+0x102>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a21      	ldr	r2, [pc, #132]	; (8007240 <UART_Start_Receive_IT+0x184>)
 80071ba:	669a      	str	r2, [r3, #104]	; 0x68
 80071bc:	e002      	b.n	80071c4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <UART_Start_Receive_IT+0x188>)
 80071c2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d019      	beq.n	8007200 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
 80071ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e6      	bne.n	80071cc <UART_Start_Receive_IT+0x110>
 80071fe:	e018      	b.n	8007232 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	613b      	str	r3, [r7, #16]
   return(result);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	653b      	str	r3, [r7, #80]	; 0x50
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721e:	623b      	str	r3, [r7, #32]
 8007220:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	69f9      	ldr	r1, [r7, #28]
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	61bb      	str	r3, [r7, #24]
   return(result);
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	375c      	adds	r7, #92	; 0x5c
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	080076c5 	.word	0x080076c5
 8007244:	08007509 	.word	0x08007509

08007248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007248:	b480      	push	{r7}
 800724a:	b095      	sub	sp, #84	; 0x54
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726e:	643b      	str	r3, [r7, #64]	; 0x40
 8007270:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e6      	bne.n	8007250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	61fb      	str	r3, [r7, #28]
   return(result);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f023 0301 	bic.w	r3, r3, #1
 8007298:	64bb      	str	r3, [r7, #72]	; 0x48
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e5      	bne.n	8007282 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d118      	bne.n	80072f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 0310 	bic.w	r3, r3, #16
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6979      	ldr	r1, [r7, #20]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e6      	bne.n	80072be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007304:	bf00      	nop
 8007306:	3754      	adds	r7, #84	; 0x54
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f7ff fa44 	bl	80067bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b08f      	sub	sp, #60	; 0x3c
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007348:	2b21      	cmp	r3, #33	; 0x21
 800734a:	d14d      	bne.n	80073e8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007352:	b29b      	uxth	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d132      	bne.n	80073be <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	61fb      	str	r3, [r7, #28]
   return(result);
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007378:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e6      	bne.n	8007358 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	60bb      	str	r3, [r7, #8]
   return(result);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6979      	ldr	r1, [r7, #20]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	613b      	str	r3, [r7, #16]
   return(result);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e6      	bne.n	800738a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073bc:	e014      	b.n	80073e8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c2:	781a      	ldrb	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	b292      	uxth	r2, r2
 80073ca:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073e8:	bf00      	nop
 80073ea:	373c      	adds	r7, #60	; 0x3c
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b091      	sub	sp, #68	; 0x44
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007400:	2b21      	cmp	r3, #33	; 0x21
 8007402:	d151      	bne.n	80074a8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800740a:	b29b      	uxth	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d132      	bne.n	8007476 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	623b      	str	r3, [r7, #32]
   return(result);
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007424:	63bb      	str	r3, [r7, #56]	; 0x38
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	633b      	str	r3, [r7, #48]	; 0x30
 8007430:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e6      	bne.n	8007410 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	69b9      	ldr	r1, [r7, #24]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	617b      	str	r3, [r7, #20]
   return(result);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007474:	e018      	b.n	80074a8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	881a      	ldrh	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007488:	b292      	uxth	r2, r2
 800748a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074a8:	bf00      	nop
 80074aa:	3744      	adds	r7, #68	; 0x44
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	613b      	str	r3, [r7, #16]
   return(result);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e6      	bne.n	80074bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7f9 ffbc 	bl	8001478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007500:	bf00      	nop
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b09c      	sub	sp, #112	; 0x70
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007516:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007520:	2b22      	cmp	r3, #34	; 0x22
 8007522:	f040 80be 	bne.w	80076a2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800752c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007530:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007534:	b2d9      	uxtb	r1, r3
 8007536:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800753a:	b2da      	uxtb	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007540:	400a      	ands	r2, r1
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 80a3 	bne.w	80076b6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800757e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007584:	66bb      	str	r3, [r7, #104]	; 0x68
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800758e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007590:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800759c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	667b      	str	r3, [r7, #100]	; 0x64
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075c2:	647a      	str	r2, [r7, #68]	; 0x44
 80075c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2220      	movs	r2, #32
 80075da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a34      	ldr	r2, [pc, #208]	; (80076c0 <UART_RxISR_8BIT+0x1b8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01f      	beq.n	8007634 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d018      	beq.n	8007634 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	623b      	str	r3, [r7, #32]
   return(result);
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007616:	663b      	str	r3, [r7, #96]	; 0x60
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	633b      	str	r3, [r7, #48]	; 0x30
 8007622:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e6      	bne.n	8007602 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007638:	2b01      	cmp	r3, #1
 800763a:	d12e      	bne.n	800769a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0310 	bic.w	r3, r3, #16
 8007656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e6      	bne.n	8007642 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d103      	bne.n	800768a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2210      	movs	r2, #16
 8007688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff f89c 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007698:	e00d      	b.n	80076b6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7f9 fdd4 	bl	8001248 <HAL_UART_RxCpltCallback>
}
 80076a0:	e009      	b.n	80076b6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	8b1b      	ldrh	r3, [r3, #24]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0208 	orr.w	r2, r2, #8
 80076b2:	b292      	uxth	r2, r2
 80076b4:	831a      	strh	r2, [r3, #24]
}
 80076b6:	bf00      	nop
 80076b8:	3770      	adds	r7, #112	; 0x70
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40008000 	.word	0x40008000

080076c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b09c      	sub	sp, #112	; 0x70
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076dc:	2b22      	cmp	r3, #34	; 0x22
 80076de:	f040 80be 	bne.w	800785e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80076f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80076f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076fa:	4013      	ands	r3, r2
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	1c9a      	adds	r2, r3, #2
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	f040 80a3 	bne.w	8007872 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800773a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800773c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007740:	667b      	str	r3, [r7, #100]	; 0x64
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774a:	657b      	str	r3, [r7, #84]	; 0x54
 800774c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e6      	bne.n	800772c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	663b      	str	r3, [r7, #96]	; 0x60
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800777e:	643a      	str	r2, [r7, #64]	; 0x40
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e5      	bne.n	800775e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a34      	ldr	r2, [pc, #208]	; (800787c <UART_RxISR_16BIT+0x1b8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d01f      	beq.n	80077f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d018      	beq.n	80077f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e6      	bne.n	80077be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d12e      	bne.n	8007856 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60bb      	str	r3, [r7, #8]
   return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	65bb      	str	r3, [r7, #88]	; 0x58
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b10      	cmp	r3, #16
 800783c:	d103      	bne.n	8007846 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fe ffbe 	bl	80067d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007854:	e00d      	b.n	8007872 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7f9 fcf6 	bl	8001248 <HAL_UART_RxCpltCallback>
}
 800785c:	e009      	b.n	8007872 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	8b1b      	ldrh	r3, [r3, #24]
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	b292      	uxth	r2, r2
 8007870:	831a      	strh	r2, [r3, #24]
}
 8007872:	bf00      	nop
 8007874:	3770      	adds	r7, #112	; 0x70
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40008000 	.word	0x40008000

08007880 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <siprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b500      	push	{lr}
 8007898:	b09c      	sub	sp, #112	; 0x70
 800789a:	ab1d      	add	r3, sp, #116	; 0x74
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a4:	4809      	ldr	r0, [pc, #36]	; (80078cc <siprintf+0x38>)
 80078a6:	9107      	str	r1, [sp, #28]
 80078a8:	9104      	str	r1, [sp, #16]
 80078aa:	4909      	ldr	r1, [pc, #36]	; (80078d0 <siprintf+0x3c>)
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	6800      	ldr	r0, [r0, #0]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	a902      	add	r1, sp, #8
 80078b8:	f000 f9c0 	bl	8007c3c <_svfiprintf_r>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	b01c      	add	sp, #112	; 0x70
 80078c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c8:	b003      	add	sp, #12
 80078ca:	4770      	bx	lr
 80078cc:	200000b8 	.word	0x200000b8
 80078d0:	ffff0208 	.word	0xffff0208

080078d4 <memset>:
 80078d4:	4402      	add	r2, r0
 80078d6:	4603      	mov	r3, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <strncmp>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	b16a      	cbz	r2, 8007904 <strncmp+0x20>
 80078e8:	3901      	subs	r1, #1
 80078ea:	1884      	adds	r4, r0, r2
 80078ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d103      	bne.n	8007900 <strncmp+0x1c>
 80078f8:	42a0      	cmp	r0, r4
 80078fa:	d001      	beq.n	8007900 <strncmp+0x1c>
 80078fc:	2a00      	cmp	r2, #0
 80078fe:	d1f5      	bne.n	80078ec <strncmp+0x8>
 8007900:	1ad0      	subs	r0, r2, r3
 8007902:	bd10      	pop	{r4, pc}
 8007904:	4610      	mov	r0, r2
 8007906:	e7fc      	b.n	8007902 <strncmp+0x1e>

08007908 <strncpy>:
 8007908:	b510      	push	{r4, lr}
 800790a:	3901      	subs	r1, #1
 800790c:	4603      	mov	r3, r0
 800790e:	b132      	cbz	r2, 800791e <strncpy+0x16>
 8007910:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007914:	f803 4b01 	strb.w	r4, [r3], #1
 8007918:	3a01      	subs	r2, #1
 800791a:	2c00      	cmp	r4, #0
 800791c:	d1f7      	bne.n	800790e <strncpy+0x6>
 800791e:	441a      	add	r2, r3
 8007920:	2100      	movs	r1, #0
 8007922:	4293      	cmp	r3, r2
 8007924:	d100      	bne.n	8007928 <strncpy+0x20>
 8007926:	bd10      	pop	{r4, pc}
 8007928:	f803 1b01 	strb.w	r1, [r3], #1
 800792c:	e7f9      	b.n	8007922 <strncpy+0x1a>
	...

08007930 <__errno>:
 8007930:	4b01      	ldr	r3, [pc, #4]	; (8007938 <__errno+0x8>)
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200000b8 	.word	0x200000b8

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	; (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	; (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	; (8007980 <__libc_init_array+0x44>)
 8007950:	f000 fc72 	bl	8008238 <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	080083ec 	.word	0x080083ec
 8007978:	080083ec 	.word	0x080083ec
 800797c:	080083ec 	.word	0x080083ec
 8007980:	080083f0 	.word	0x080083f0

08007984 <__retarget_lock_acquire_recursive>:
 8007984:	4770      	bx	lr

08007986 <__retarget_lock_release_recursive>:
 8007986:	4770      	bx	lr

08007988 <strcpy>:
 8007988:	4603      	mov	r3, r0
 800798a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800798e:	f803 2b01 	strb.w	r2, [r3], #1
 8007992:	2a00      	cmp	r2, #0
 8007994:	d1f9      	bne.n	800798a <strcpy+0x2>
 8007996:	4770      	bx	lr

08007998 <_free_r>:
 8007998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800799a:	2900      	cmp	r1, #0
 800799c:	d044      	beq.n	8007a28 <_free_r+0x90>
 800799e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a2:	9001      	str	r0, [sp, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f1a1 0404 	sub.w	r4, r1, #4
 80079aa:	bfb8      	it	lt
 80079ac:	18e4      	addlt	r4, r4, r3
 80079ae:	f000 f8df 	bl	8007b70 <__malloc_lock>
 80079b2:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <_free_r+0x94>)
 80079b4:	9801      	ldr	r0, [sp, #4]
 80079b6:	6813      	ldr	r3, [r2, #0]
 80079b8:	b933      	cbnz	r3, 80079c8 <_free_r+0x30>
 80079ba:	6063      	str	r3, [r4, #4]
 80079bc:	6014      	str	r4, [r2, #0]
 80079be:	b003      	add	sp, #12
 80079c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c4:	f000 b8da 	b.w	8007b7c <__malloc_unlock>
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	d908      	bls.n	80079de <_free_r+0x46>
 80079cc:	6825      	ldr	r5, [r4, #0]
 80079ce:	1961      	adds	r1, r4, r5
 80079d0:	428b      	cmp	r3, r1
 80079d2:	bf01      	itttt	eq
 80079d4:	6819      	ldreq	r1, [r3, #0]
 80079d6:	685b      	ldreq	r3, [r3, #4]
 80079d8:	1949      	addeq	r1, r1, r5
 80079da:	6021      	streq	r1, [r4, #0]
 80079dc:	e7ed      	b.n	80079ba <_free_r+0x22>
 80079de:	461a      	mov	r2, r3
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	b10b      	cbz	r3, 80079e8 <_free_r+0x50>
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d9fa      	bls.n	80079de <_free_r+0x46>
 80079e8:	6811      	ldr	r1, [r2, #0]
 80079ea:	1855      	adds	r5, r2, r1
 80079ec:	42a5      	cmp	r5, r4
 80079ee:	d10b      	bne.n	8007a08 <_free_r+0x70>
 80079f0:	6824      	ldr	r4, [r4, #0]
 80079f2:	4421      	add	r1, r4
 80079f4:	1854      	adds	r4, r2, r1
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	6011      	str	r1, [r2, #0]
 80079fa:	d1e0      	bne.n	80079be <_free_r+0x26>
 80079fc:	681c      	ldr	r4, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	6053      	str	r3, [r2, #4]
 8007a02:	440c      	add	r4, r1
 8007a04:	6014      	str	r4, [r2, #0]
 8007a06:	e7da      	b.n	80079be <_free_r+0x26>
 8007a08:	d902      	bls.n	8007a10 <_free_r+0x78>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	6003      	str	r3, [r0, #0]
 8007a0e:	e7d6      	b.n	80079be <_free_r+0x26>
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	1961      	adds	r1, r4, r5
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf04      	itt	eq
 8007a18:	6819      	ldreq	r1, [r3, #0]
 8007a1a:	685b      	ldreq	r3, [r3, #4]
 8007a1c:	6063      	str	r3, [r4, #4]
 8007a1e:	bf04      	itt	eq
 8007a20:	1949      	addeq	r1, r1, r5
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	6054      	str	r4, [r2, #4]
 8007a26:	e7ca      	b.n	80079be <_free_r+0x26>
 8007a28:	b003      	add	sp, #12
 8007a2a:	bd30      	pop	{r4, r5, pc}
 8007a2c:	200006f8 	.word	0x200006f8

08007a30 <sbrk_aligned>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4e0e      	ldr	r6, [pc, #56]	; (8007a6c <sbrk_aligned+0x3c>)
 8007a34:	460c      	mov	r4, r1
 8007a36:	6831      	ldr	r1, [r6, #0]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	b911      	cbnz	r1, 8007a42 <sbrk_aligned+0x12>
 8007a3c:	f000 fba6 	bl	800818c <_sbrk_r>
 8007a40:	6030      	str	r0, [r6, #0]
 8007a42:	4621      	mov	r1, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 fba1 	bl	800818c <_sbrk_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d00a      	beq.n	8007a64 <sbrk_aligned+0x34>
 8007a4e:	1cc4      	adds	r4, r0, #3
 8007a50:	f024 0403 	bic.w	r4, r4, #3
 8007a54:	42a0      	cmp	r0, r4
 8007a56:	d007      	beq.n	8007a68 <sbrk_aligned+0x38>
 8007a58:	1a21      	subs	r1, r4, r0
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 fb96 	bl	800818c <_sbrk_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d101      	bne.n	8007a68 <sbrk_aligned+0x38>
 8007a64:	f04f 34ff 	mov.w	r4, #4294967295
 8007a68:	4620      	mov	r0, r4
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	200006fc 	.word	0x200006fc

08007a70 <_malloc_r>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	1ccd      	adds	r5, r1, #3
 8007a76:	f025 0503 	bic.w	r5, r5, #3
 8007a7a:	3508      	adds	r5, #8
 8007a7c:	2d0c      	cmp	r5, #12
 8007a7e:	bf38      	it	cc
 8007a80:	250c      	movcc	r5, #12
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	4607      	mov	r7, r0
 8007a86:	db01      	blt.n	8007a8c <_malloc_r+0x1c>
 8007a88:	42a9      	cmp	r1, r5
 8007a8a:	d905      	bls.n	8007a98 <_malloc_r+0x28>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	2600      	movs	r6, #0
 8007a92:	4630      	mov	r0, r6
 8007a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b6c <_malloc_r+0xfc>
 8007a9c:	f000 f868 	bl	8007b70 <__malloc_lock>
 8007aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa4:	461c      	mov	r4, r3
 8007aa6:	bb5c      	cbnz	r4, 8007b00 <_malloc_r+0x90>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f7ff ffc0 	bl	8007a30 <sbrk_aligned>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	d155      	bne.n	8007b62 <_malloc_r+0xf2>
 8007ab6:	f8d8 4000 	ldr.w	r4, [r8]
 8007aba:	4626      	mov	r6, r4
 8007abc:	2e00      	cmp	r6, #0
 8007abe:	d145      	bne.n	8007b4c <_malloc_r+0xdc>
 8007ac0:	2c00      	cmp	r4, #0
 8007ac2:	d048      	beq.n	8007b56 <_malloc_r+0xe6>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4638      	mov	r0, r7
 8007aca:	eb04 0903 	add.w	r9, r4, r3
 8007ace:	f000 fb5d 	bl	800818c <_sbrk_r>
 8007ad2:	4581      	cmp	r9, r0
 8007ad4:	d13f      	bne.n	8007b56 <_malloc_r+0xe6>
 8007ad6:	6821      	ldr	r1, [r4, #0]
 8007ad8:	1a6d      	subs	r5, r5, r1
 8007ada:	4629      	mov	r1, r5
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff ffa7 	bl	8007a30 <sbrk_aligned>
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d037      	beq.n	8007b56 <_malloc_r+0xe6>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	442b      	add	r3, r5
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	f8d8 3000 	ldr.w	r3, [r8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d038      	beq.n	8007b66 <_malloc_r+0xf6>
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	42a2      	cmp	r2, r4
 8007af8:	d12b      	bne.n	8007b52 <_malloc_r+0xe2>
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	e00f      	b.n	8007b20 <_malloc_r+0xb0>
 8007b00:	6822      	ldr	r2, [r4, #0]
 8007b02:	1b52      	subs	r2, r2, r5
 8007b04:	d41f      	bmi.n	8007b46 <_malloc_r+0xd6>
 8007b06:	2a0b      	cmp	r2, #11
 8007b08:	d917      	bls.n	8007b3a <_malloc_r+0xca>
 8007b0a:	1961      	adds	r1, r4, r5
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	6025      	str	r5, [r4, #0]
 8007b10:	bf18      	it	ne
 8007b12:	6059      	strne	r1, [r3, #4]
 8007b14:	6863      	ldr	r3, [r4, #4]
 8007b16:	bf08      	it	eq
 8007b18:	f8c8 1000 	streq.w	r1, [r8]
 8007b1c:	5162      	str	r2, [r4, r5]
 8007b1e:	604b      	str	r3, [r1, #4]
 8007b20:	4638      	mov	r0, r7
 8007b22:	f104 060b 	add.w	r6, r4, #11
 8007b26:	f000 f829 	bl	8007b7c <__malloc_unlock>
 8007b2a:	f026 0607 	bic.w	r6, r6, #7
 8007b2e:	1d23      	adds	r3, r4, #4
 8007b30:	1af2      	subs	r2, r6, r3
 8007b32:	d0ae      	beq.n	8007a92 <_malloc_r+0x22>
 8007b34:	1b9b      	subs	r3, r3, r6
 8007b36:	50a3      	str	r3, [r4, r2]
 8007b38:	e7ab      	b.n	8007a92 <_malloc_r+0x22>
 8007b3a:	42a3      	cmp	r3, r4
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	d1dd      	bne.n	8007afc <_malloc_r+0x8c>
 8007b40:	f8c8 2000 	str.w	r2, [r8]
 8007b44:	e7ec      	b.n	8007b20 <_malloc_r+0xb0>
 8007b46:	4623      	mov	r3, r4
 8007b48:	6864      	ldr	r4, [r4, #4]
 8007b4a:	e7ac      	b.n	8007aa6 <_malloc_r+0x36>
 8007b4c:	4634      	mov	r4, r6
 8007b4e:	6876      	ldr	r6, [r6, #4]
 8007b50:	e7b4      	b.n	8007abc <_malloc_r+0x4c>
 8007b52:	4613      	mov	r3, r2
 8007b54:	e7cc      	b.n	8007af0 <_malloc_r+0x80>
 8007b56:	230c      	movs	r3, #12
 8007b58:	603b      	str	r3, [r7, #0]
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f000 f80e 	bl	8007b7c <__malloc_unlock>
 8007b60:	e797      	b.n	8007a92 <_malloc_r+0x22>
 8007b62:	6025      	str	r5, [r4, #0]
 8007b64:	e7dc      	b.n	8007b20 <_malloc_r+0xb0>
 8007b66:	605b      	str	r3, [r3, #4]
 8007b68:	deff      	udf	#255	; 0xff
 8007b6a:	bf00      	nop
 8007b6c:	200006f8 	.word	0x200006f8

08007b70 <__malloc_lock>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__malloc_lock+0x8>)
 8007b72:	f7ff bf07 	b.w	8007984 <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	200006f4 	.word	0x200006f4

08007b7c <__malloc_unlock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__malloc_unlock+0x8>)
 8007b7e:	f7ff bf02 	b.w	8007986 <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	200006f4 	.word	0x200006f4

08007b88 <__ssputs_r>:
 8007b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b8c:	688e      	ldr	r6, [r1, #8]
 8007b8e:	461f      	mov	r7, r3
 8007b90:	42be      	cmp	r6, r7
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	4682      	mov	sl, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4690      	mov	r8, r2
 8007b9a:	d82c      	bhi.n	8007bf6 <__ssputs_r+0x6e>
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ba2:	d026      	beq.n	8007bf2 <__ssputs_r+0x6a>
 8007ba4:	6965      	ldr	r5, [r4, #20]
 8007ba6:	6909      	ldr	r1, [r1, #16]
 8007ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bac:	eba3 0901 	sub.w	r9, r3, r1
 8007bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bb4:	1c7b      	adds	r3, r7, #1
 8007bb6:	444b      	add	r3, r9
 8007bb8:	106d      	asrs	r5, r5, #1
 8007bba:	429d      	cmp	r5, r3
 8007bbc:	bf38      	it	cc
 8007bbe:	461d      	movcc	r5, r3
 8007bc0:	0553      	lsls	r3, r2, #21
 8007bc2:	d527      	bpl.n	8007c14 <__ssputs_r+0x8c>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	f7ff ff53 	bl	8007a70 <_malloc_r>
 8007bca:	4606      	mov	r6, r0
 8007bcc:	b360      	cbz	r0, 8007c28 <__ssputs_r+0xa0>
 8007bce:	6921      	ldr	r1, [r4, #16]
 8007bd0:	464a      	mov	r2, r9
 8007bd2:	f000 faeb 	bl	80081ac <memcpy>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	6126      	str	r6, [r4, #16]
 8007be4:	6165      	str	r5, [r4, #20]
 8007be6:	444e      	add	r6, r9
 8007be8:	eba5 0509 	sub.w	r5, r5, r9
 8007bec:	6026      	str	r6, [r4, #0]
 8007bee:	60a5      	str	r5, [r4, #8]
 8007bf0:	463e      	mov	r6, r7
 8007bf2:	42be      	cmp	r6, r7
 8007bf4:	d900      	bls.n	8007bf8 <__ssputs_r+0x70>
 8007bf6:	463e      	mov	r6, r7
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	f000 faab 	bl	8008158 <memmove>
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	1b9b      	subs	r3, r3, r6
 8007c06:	60a3      	str	r3, [r4, #8]
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	4433      	add	r3, r6
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	462a      	mov	r2, r5
 8007c16:	f000 fad7 	bl	80081c8 <_realloc_r>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d1e0      	bne.n	8007be2 <__ssputs_r+0x5a>
 8007c20:	6921      	ldr	r1, [r4, #16]
 8007c22:	4650      	mov	r0, sl
 8007c24:	f7ff feb8 	bl	8007998 <_free_r>
 8007c28:	230c      	movs	r3, #12
 8007c2a:	f8ca 3000 	str.w	r3, [sl]
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	e7e9      	b.n	8007c10 <__ssputs_r+0x88>

08007c3c <_svfiprintf_r>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4698      	mov	r8, r3
 8007c42:	898b      	ldrh	r3, [r1, #12]
 8007c44:	061b      	lsls	r3, r3, #24
 8007c46:	b09d      	sub	sp, #116	; 0x74
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	d50e      	bpl.n	8007c6e <_svfiprintf_r+0x32>
 8007c50:	690b      	ldr	r3, [r1, #16]
 8007c52:	b963      	cbnz	r3, 8007c6e <_svfiprintf_r+0x32>
 8007c54:	2140      	movs	r1, #64	; 0x40
 8007c56:	f7ff ff0b 	bl	8007a70 <_malloc_r>
 8007c5a:	6028      	str	r0, [r5, #0]
 8007c5c:	6128      	str	r0, [r5, #16]
 8007c5e:	b920      	cbnz	r0, 8007c6a <_svfiprintf_r+0x2e>
 8007c60:	230c      	movs	r3, #12
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e0d0      	b.n	8007e0c <_svfiprintf_r+0x1d0>
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	616b      	str	r3, [r5, #20]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	2320      	movs	r3, #32
 8007c74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7c:	2330      	movs	r3, #48	; 0x30
 8007c7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e24 <_svfiprintf_r+0x1e8>
 8007c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c86:	f04f 0901 	mov.w	r9, #1
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	469a      	mov	sl, r3
 8007c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c92:	b10a      	cbz	r2, 8007c98 <_svfiprintf_r+0x5c>
 8007c94:	2a25      	cmp	r2, #37	; 0x25
 8007c96:	d1f9      	bne.n	8007c8c <_svfiprintf_r+0x50>
 8007c98:	ebba 0b04 	subs.w	fp, sl, r4
 8007c9c:	d00b      	beq.n	8007cb6 <_svfiprintf_r+0x7a>
 8007c9e:	465b      	mov	r3, fp
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff ff6f 	bl	8007b88 <__ssputs_r>
 8007caa:	3001      	adds	r0, #1
 8007cac:	f000 80a9 	beq.w	8007e02 <_svfiprintf_r+0x1c6>
 8007cb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb2:	445a      	add	r2, fp
 8007cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 80a1 	beq.w	8007e02 <_svfiprintf_r+0x1c6>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cca:	f10a 0a01 	add.w	sl, sl, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	9307      	str	r3, [sp, #28]
 8007cd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cd6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cd8:	4654      	mov	r4, sl
 8007cda:	2205      	movs	r2, #5
 8007cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce0:	4850      	ldr	r0, [pc, #320]	; (8007e24 <_svfiprintf_r+0x1e8>)
 8007ce2:	f7f8 fa8d 	bl	8000200 <memchr>
 8007ce6:	9a04      	ldr	r2, [sp, #16]
 8007ce8:	b9d8      	cbnz	r0, 8007d22 <_svfiprintf_r+0xe6>
 8007cea:	06d0      	lsls	r0, r2, #27
 8007cec:	bf44      	itt	mi
 8007cee:	2320      	movmi	r3, #32
 8007cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cf4:	0711      	lsls	r1, r2, #28
 8007cf6:	bf44      	itt	mi
 8007cf8:	232b      	movmi	r3, #43	; 0x2b
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007d02:	2b2a      	cmp	r3, #42	; 0x2a
 8007d04:	d015      	beq.n	8007d32 <_svfiprintf_r+0xf6>
 8007d06:	9a07      	ldr	r2, [sp, #28]
 8007d08:	4654      	mov	r4, sl
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f04f 0c0a 	mov.w	ip, #10
 8007d10:	4621      	mov	r1, r4
 8007d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d16:	3b30      	subs	r3, #48	; 0x30
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d94d      	bls.n	8007db8 <_svfiprintf_r+0x17c>
 8007d1c:	b1b0      	cbz	r0, 8007d4c <_svfiprintf_r+0x110>
 8007d1e:	9207      	str	r2, [sp, #28]
 8007d20:	e014      	b.n	8007d4c <_svfiprintf_r+0x110>
 8007d22:	eba0 0308 	sub.w	r3, r0, r8
 8007d26:	fa09 f303 	lsl.w	r3, r9, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	46a2      	mov	sl, r4
 8007d30:	e7d2      	b.n	8007cd8 <_svfiprintf_r+0x9c>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	1d19      	adds	r1, r3, #4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	9103      	str	r1, [sp, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bfbb      	ittet	lt
 8007d3e:	425b      	neglt	r3, r3
 8007d40:	f042 0202 	orrlt.w	r2, r2, #2
 8007d44:	9307      	strge	r3, [sp, #28]
 8007d46:	9307      	strlt	r3, [sp, #28]
 8007d48:	bfb8      	it	lt
 8007d4a:	9204      	strlt	r2, [sp, #16]
 8007d4c:	7823      	ldrb	r3, [r4, #0]
 8007d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d50:	d10c      	bne.n	8007d6c <_svfiprintf_r+0x130>
 8007d52:	7863      	ldrb	r3, [r4, #1]
 8007d54:	2b2a      	cmp	r3, #42	; 0x2a
 8007d56:	d134      	bne.n	8007dc2 <_svfiprintf_r+0x186>
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	1d1a      	adds	r2, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	9203      	str	r2, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bfb8      	it	lt
 8007d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d68:	3402      	adds	r4, #2
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e34 <_svfiprintf_r+0x1f8>
 8007d70:	7821      	ldrb	r1, [r4, #0]
 8007d72:	2203      	movs	r2, #3
 8007d74:	4650      	mov	r0, sl
 8007d76:	f7f8 fa43 	bl	8000200 <memchr>
 8007d7a:	b138      	cbz	r0, 8007d8c <_svfiprintf_r+0x150>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	eba0 000a 	sub.w	r0, r0, sl
 8007d82:	2240      	movs	r2, #64	; 0x40
 8007d84:	4082      	lsls	r2, r0
 8007d86:	4313      	orrs	r3, r2
 8007d88:	3401      	adds	r4, #1
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d90:	4825      	ldr	r0, [pc, #148]	; (8007e28 <_svfiprintf_r+0x1ec>)
 8007d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d96:	2206      	movs	r2, #6
 8007d98:	f7f8 fa32 	bl	8000200 <memchr>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d038      	beq.n	8007e12 <_svfiprintf_r+0x1d6>
 8007da0:	4b22      	ldr	r3, [pc, #136]	; (8007e2c <_svfiprintf_r+0x1f0>)
 8007da2:	bb1b      	cbnz	r3, 8007dec <_svfiprintf_r+0x1b0>
 8007da4:	9b03      	ldr	r3, [sp, #12]
 8007da6:	3307      	adds	r3, #7
 8007da8:	f023 0307 	bic.w	r3, r3, #7
 8007dac:	3308      	adds	r3, #8
 8007dae:	9303      	str	r3, [sp, #12]
 8007db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db2:	4433      	add	r3, r6
 8007db4:	9309      	str	r3, [sp, #36]	; 0x24
 8007db6:	e768      	b.n	8007c8a <_svfiprintf_r+0x4e>
 8007db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	2001      	movs	r0, #1
 8007dc0:	e7a6      	b.n	8007d10 <_svfiprintf_r+0xd4>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	3401      	adds	r4, #1
 8007dc6:	9305      	str	r3, [sp, #20]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f04f 0c0a 	mov.w	ip, #10
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd4:	3a30      	subs	r2, #48	; 0x30
 8007dd6:	2a09      	cmp	r2, #9
 8007dd8:	d903      	bls.n	8007de2 <_svfiprintf_r+0x1a6>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0c6      	beq.n	8007d6c <_svfiprintf_r+0x130>
 8007dde:	9105      	str	r1, [sp, #20]
 8007de0:	e7c4      	b.n	8007d6c <_svfiprintf_r+0x130>
 8007de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de6:	4604      	mov	r4, r0
 8007de8:	2301      	movs	r3, #1
 8007dea:	e7f0      	b.n	8007dce <_svfiprintf_r+0x192>
 8007dec:	ab03      	add	r3, sp, #12
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	462a      	mov	r2, r5
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <_svfiprintf_r+0x1f4>)
 8007df4:	a904      	add	r1, sp, #16
 8007df6:	4638      	mov	r0, r7
 8007df8:	f3af 8000 	nop.w
 8007dfc:	1c42      	adds	r2, r0, #1
 8007dfe:	4606      	mov	r6, r0
 8007e00:	d1d6      	bne.n	8007db0 <_svfiprintf_r+0x174>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	065b      	lsls	r3, r3, #25
 8007e06:	f53f af2d 	bmi.w	8007c64 <_svfiprintf_r+0x28>
 8007e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e0c:	b01d      	add	sp, #116	; 0x74
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	ab03      	add	r3, sp, #12
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	462a      	mov	r2, r5
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <_svfiprintf_r+0x1f4>)
 8007e1a:	a904      	add	r1, sp, #16
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f000 f879 	bl	8007f14 <_printf_i>
 8007e22:	e7eb      	b.n	8007dfc <_svfiprintf_r+0x1c0>
 8007e24:	080083b0 	.word	0x080083b0
 8007e28:	080083ba 	.word	0x080083ba
 8007e2c:	00000000 	.word	0x00000000
 8007e30:	08007b89 	.word	0x08007b89
 8007e34:	080083b6 	.word	0x080083b6

08007e38 <_printf_common>:
 8007e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	4699      	mov	r9, r3
 8007e40:	688a      	ldr	r2, [r1, #8]
 8007e42:	690b      	ldr	r3, [r1, #16]
 8007e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	bfb8      	it	lt
 8007e4c:	4613      	movlt	r3, r2
 8007e4e:	6033      	str	r3, [r6, #0]
 8007e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e54:	4607      	mov	r7, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	b10a      	cbz	r2, 8007e5e <_printf_common+0x26>
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	6033      	str	r3, [r6, #0]
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	0699      	lsls	r1, r3, #26
 8007e62:	bf42      	ittt	mi
 8007e64:	6833      	ldrmi	r3, [r6, #0]
 8007e66:	3302      	addmi	r3, #2
 8007e68:	6033      	strmi	r3, [r6, #0]
 8007e6a:	6825      	ldr	r5, [r4, #0]
 8007e6c:	f015 0506 	ands.w	r5, r5, #6
 8007e70:	d106      	bne.n	8007e80 <_printf_common+0x48>
 8007e72:	f104 0a19 	add.w	sl, r4, #25
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	6832      	ldr	r2, [r6, #0]
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dc26      	bgt.n	8007ece <_printf_common+0x96>
 8007e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e84:	1e13      	subs	r3, r2, #0
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	bf18      	it	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	0692      	lsls	r2, r2, #26
 8007e8e:	d42b      	bmi.n	8007ee8 <_printf_common+0xb0>
 8007e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e94:	4649      	mov	r1, r9
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c0      	blx	r8
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	d01e      	beq.n	8007edc <_printf_common+0xa4>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	6922      	ldr	r2, [r4, #16]
 8007ea2:	f003 0306 	and.w	r3, r3, #6
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	bf02      	ittt	eq
 8007eaa:	68e5      	ldreq	r5, [r4, #12]
 8007eac:	6833      	ldreq	r3, [r6, #0]
 8007eae:	1aed      	subeq	r5, r5, r3
 8007eb0:	68a3      	ldr	r3, [r4, #8]
 8007eb2:	bf0c      	ite	eq
 8007eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eb8:	2500      	movne	r5, #0
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	bfc4      	itt	gt
 8007ebe:	1a9b      	subgt	r3, r3, r2
 8007ec0:	18ed      	addgt	r5, r5, r3
 8007ec2:	2600      	movs	r6, #0
 8007ec4:	341a      	adds	r4, #26
 8007ec6:	42b5      	cmp	r5, r6
 8007ec8:	d11a      	bne.n	8007f00 <_printf_common+0xc8>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e008      	b.n	8007ee0 <_printf_common+0xa8>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	4652      	mov	r2, sl
 8007ed2:	4649      	mov	r1, r9
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	47c0      	blx	r8
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d103      	bne.n	8007ee4 <_printf_common+0xac>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	e7c6      	b.n	8007e76 <_printf_common+0x3e>
 8007ee8:	18e1      	adds	r1, r4, r3
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	2030      	movs	r0, #48	; 0x30
 8007eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ef2:	4422      	add	r2, r4
 8007ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007efc:	3302      	adds	r3, #2
 8007efe:	e7c7      	b.n	8007e90 <_printf_common+0x58>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4622      	mov	r2, r4
 8007f04:	4649      	mov	r1, r9
 8007f06:	4638      	mov	r0, r7
 8007f08:	47c0      	blx	r8
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d0e6      	beq.n	8007edc <_printf_common+0xa4>
 8007f0e:	3601      	adds	r6, #1
 8007f10:	e7d9      	b.n	8007ec6 <_printf_common+0x8e>
	...

08007f14 <_printf_i>:
 8007f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	7e0f      	ldrb	r7, [r1, #24]
 8007f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f1c:	2f78      	cmp	r7, #120	; 0x78
 8007f1e:	4691      	mov	r9, r2
 8007f20:	4680      	mov	r8, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	469a      	mov	sl, r3
 8007f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f2a:	d807      	bhi.n	8007f3c <_printf_i+0x28>
 8007f2c:	2f62      	cmp	r7, #98	; 0x62
 8007f2e:	d80a      	bhi.n	8007f46 <_printf_i+0x32>
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	f000 80d4 	beq.w	80080de <_printf_i+0x1ca>
 8007f36:	2f58      	cmp	r7, #88	; 0x58
 8007f38:	f000 80c0 	beq.w	80080bc <_printf_i+0x1a8>
 8007f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f44:	e03a      	b.n	8007fbc <_printf_i+0xa8>
 8007f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f4a:	2b15      	cmp	r3, #21
 8007f4c:	d8f6      	bhi.n	8007f3c <_printf_i+0x28>
 8007f4e:	a101      	add	r1, pc, #4	; (adr r1, 8007f54 <_printf_i+0x40>)
 8007f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fc1 	.word	0x08007fc1
 8007f5c:	08007f3d 	.word	0x08007f3d
 8007f60:	08007f3d 	.word	0x08007f3d
 8007f64:	08007f3d 	.word	0x08007f3d
 8007f68:	08007f3d 	.word	0x08007f3d
 8007f6c:	08007fc1 	.word	0x08007fc1
 8007f70:	08007f3d 	.word	0x08007f3d
 8007f74:	08007f3d 	.word	0x08007f3d
 8007f78:	08007f3d 	.word	0x08007f3d
 8007f7c:	08007f3d 	.word	0x08007f3d
 8007f80:	080080c5 	.word	0x080080c5
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	0800807f 	.word	0x0800807f
 8007f8c:	08007f3d 	.word	0x08007f3d
 8007f90:	08007f3d 	.word	0x08007f3d
 8007f94:	080080e7 	.word	0x080080e7
 8007f98:	08007f3d 	.word	0x08007f3d
 8007f9c:	08007fed 	.word	0x08007fed
 8007fa0:	08007f3d 	.word	0x08007f3d
 8007fa4:	08007f3d 	.word	0x08007f3d
 8007fa8:	08008087 	.word	0x08008087
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	602a      	str	r2, [r5, #0]
 8007fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e09f      	b.n	8008100 <_printf_i+0x1ec>
 8007fc0:	6820      	ldr	r0, [r4, #0]
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	0607      	lsls	r7, r0, #24
 8007fc6:	f103 0104 	add.w	r1, r3, #4
 8007fca:	6029      	str	r1, [r5, #0]
 8007fcc:	d501      	bpl.n	8007fd2 <_printf_i+0xbe>
 8007fce:	681e      	ldr	r6, [r3, #0]
 8007fd0:	e003      	b.n	8007fda <_printf_i+0xc6>
 8007fd2:	0646      	lsls	r6, r0, #25
 8007fd4:	d5fb      	bpl.n	8007fce <_printf_i+0xba>
 8007fd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	da03      	bge.n	8007fe6 <_printf_i+0xd2>
 8007fde:	232d      	movs	r3, #45	; 0x2d
 8007fe0:	4276      	negs	r6, r6
 8007fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe6:	485a      	ldr	r0, [pc, #360]	; (8008150 <_printf_i+0x23c>)
 8007fe8:	230a      	movs	r3, #10
 8007fea:	e012      	b.n	8008012 <_printf_i+0xfe>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	6820      	ldr	r0, [r4, #0]
 8007ff0:	1d19      	adds	r1, r3, #4
 8007ff2:	6029      	str	r1, [r5, #0]
 8007ff4:	0605      	lsls	r5, r0, #24
 8007ff6:	d501      	bpl.n	8007ffc <_printf_i+0xe8>
 8007ff8:	681e      	ldr	r6, [r3, #0]
 8007ffa:	e002      	b.n	8008002 <_printf_i+0xee>
 8007ffc:	0641      	lsls	r1, r0, #25
 8007ffe:	d5fb      	bpl.n	8007ff8 <_printf_i+0xe4>
 8008000:	881e      	ldrh	r6, [r3, #0]
 8008002:	4853      	ldr	r0, [pc, #332]	; (8008150 <_printf_i+0x23c>)
 8008004:	2f6f      	cmp	r7, #111	; 0x6f
 8008006:	bf0c      	ite	eq
 8008008:	2308      	moveq	r3, #8
 800800a:	230a      	movne	r3, #10
 800800c:	2100      	movs	r1, #0
 800800e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008012:	6865      	ldr	r5, [r4, #4]
 8008014:	60a5      	str	r5, [r4, #8]
 8008016:	2d00      	cmp	r5, #0
 8008018:	bfa2      	ittt	ge
 800801a:	6821      	ldrge	r1, [r4, #0]
 800801c:	f021 0104 	bicge.w	r1, r1, #4
 8008020:	6021      	strge	r1, [r4, #0]
 8008022:	b90e      	cbnz	r6, 8008028 <_printf_i+0x114>
 8008024:	2d00      	cmp	r5, #0
 8008026:	d04b      	beq.n	80080c0 <_printf_i+0x1ac>
 8008028:	4615      	mov	r5, r2
 800802a:	fbb6 f1f3 	udiv	r1, r6, r3
 800802e:	fb03 6711 	mls	r7, r3, r1, r6
 8008032:	5dc7      	ldrb	r7, [r0, r7]
 8008034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008038:	4637      	mov	r7, r6
 800803a:	42bb      	cmp	r3, r7
 800803c:	460e      	mov	r6, r1
 800803e:	d9f4      	bls.n	800802a <_printf_i+0x116>
 8008040:	2b08      	cmp	r3, #8
 8008042:	d10b      	bne.n	800805c <_printf_i+0x148>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07de      	lsls	r6, r3, #31
 8008048:	d508      	bpl.n	800805c <_printf_i+0x148>
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	4299      	cmp	r1, r3
 8008050:	bfde      	ittt	le
 8008052:	2330      	movle	r3, #48	; 0x30
 8008054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800805c:	1b52      	subs	r2, r2, r5
 800805e:	6122      	str	r2, [r4, #16]
 8008060:	f8cd a000 	str.w	sl, [sp]
 8008064:	464b      	mov	r3, r9
 8008066:	aa03      	add	r2, sp, #12
 8008068:	4621      	mov	r1, r4
 800806a:	4640      	mov	r0, r8
 800806c:	f7ff fee4 	bl	8007e38 <_printf_common>
 8008070:	3001      	adds	r0, #1
 8008072:	d14a      	bne.n	800810a <_printf_i+0x1f6>
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	b004      	add	sp, #16
 800807a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	f043 0320 	orr.w	r3, r3, #32
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	4833      	ldr	r0, [pc, #204]	; (8008154 <_printf_i+0x240>)
 8008088:	2778      	movs	r7, #120	; 0x78
 800808a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	6829      	ldr	r1, [r5, #0]
 8008092:	061f      	lsls	r7, r3, #24
 8008094:	f851 6b04 	ldr.w	r6, [r1], #4
 8008098:	d402      	bmi.n	80080a0 <_printf_i+0x18c>
 800809a:	065f      	lsls	r7, r3, #25
 800809c:	bf48      	it	mi
 800809e:	b2b6      	uxthmi	r6, r6
 80080a0:	07df      	lsls	r7, r3, #31
 80080a2:	bf48      	it	mi
 80080a4:	f043 0320 	orrmi.w	r3, r3, #32
 80080a8:	6029      	str	r1, [r5, #0]
 80080aa:	bf48      	it	mi
 80080ac:	6023      	strmi	r3, [r4, #0]
 80080ae:	b91e      	cbnz	r6, 80080b8 <_printf_i+0x1a4>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	f023 0320 	bic.w	r3, r3, #32
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	2310      	movs	r3, #16
 80080ba:	e7a7      	b.n	800800c <_printf_i+0xf8>
 80080bc:	4824      	ldr	r0, [pc, #144]	; (8008150 <_printf_i+0x23c>)
 80080be:	e7e4      	b.n	800808a <_printf_i+0x176>
 80080c0:	4615      	mov	r5, r2
 80080c2:	e7bd      	b.n	8008040 <_printf_i+0x12c>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	6826      	ldr	r6, [r4, #0]
 80080c8:	6961      	ldr	r1, [r4, #20]
 80080ca:	1d18      	adds	r0, r3, #4
 80080cc:	6028      	str	r0, [r5, #0]
 80080ce:	0635      	lsls	r5, r6, #24
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	d501      	bpl.n	80080d8 <_printf_i+0x1c4>
 80080d4:	6019      	str	r1, [r3, #0]
 80080d6:	e002      	b.n	80080de <_printf_i+0x1ca>
 80080d8:	0670      	lsls	r0, r6, #25
 80080da:	d5fb      	bpl.n	80080d4 <_printf_i+0x1c0>
 80080dc:	8019      	strh	r1, [r3, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	4615      	mov	r5, r2
 80080e4:	e7bc      	b.n	8008060 <_printf_i+0x14c>
 80080e6:	682b      	ldr	r3, [r5, #0]
 80080e8:	1d1a      	adds	r2, r3, #4
 80080ea:	602a      	str	r2, [r5, #0]
 80080ec:	681d      	ldr	r5, [r3, #0]
 80080ee:	6862      	ldr	r2, [r4, #4]
 80080f0:	2100      	movs	r1, #0
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7f8 f884 	bl	8000200 <memchr>
 80080f8:	b108      	cbz	r0, 80080fe <_printf_i+0x1ea>
 80080fa:	1b40      	subs	r0, r0, r5
 80080fc:	6060      	str	r0, [r4, #4]
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	2300      	movs	r3, #0
 8008104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008108:	e7aa      	b.n	8008060 <_printf_i+0x14c>
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	462a      	mov	r2, r5
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	47d0      	blx	sl
 8008114:	3001      	adds	r0, #1
 8008116:	d0ad      	beq.n	8008074 <_printf_i+0x160>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	079b      	lsls	r3, r3, #30
 800811c:	d413      	bmi.n	8008146 <_printf_i+0x232>
 800811e:	68e0      	ldr	r0, [r4, #12]
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	4298      	cmp	r0, r3
 8008124:	bfb8      	it	lt
 8008126:	4618      	movlt	r0, r3
 8008128:	e7a6      	b.n	8008078 <_printf_i+0x164>
 800812a:	2301      	movs	r3, #1
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d09d      	beq.n	8008074 <_printf_i+0x160>
 8008138:	3501      	adds	r5, #1
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	9903      	ldr	r1, [sp, #12]
 800813e:	1a5b      	subs	r3, r3, r1
 8008140:	42ab      	cmp	r3, r5
 8008142:	dcf2      	bgt.n	800812a <_printf_i+0x216>
 8008144:	e7eb      	b.n	800811e <_printf_i+0x20a>
 8008146:	2500      	movs	r5, #0
 8008148:	f104 0619 	add.w	r6, r4, #25
 800814c:	e7f5      	b.n	800813a <_printf_i+0x226>
 800814e:	bf00      	nop
 8008150:	080083c1 	.word	0x080083c1
 8008154:	080083d2 	.word	0x080083d2

08008158 <memmove>:
 8008158:	4288      	cmp	r0, r1
 800815a:	b510      	push	{r4, lr}
 800815c:	eb01 0402 	add.w	r4, r1, r2
 8008160:	d902      	bls.n	8008168 <memmove+0x10>
 8008162:	4284      	cmp	r4, r0
 8008164:	4623      	mov	r3, r4
 8008166:	d807      	bhi.n	8008178 <memmove+0x20>
 8008168:	1e43      	subs	r3, r0, #1
 800816a:	42a1      	cmp	r1, r4
 800816c:	d008      	beq.n	8008180 <memmove+0x28>
 800816e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008176:	e7f8      	b.n	800816a <memmove+0x12>
 8008178:	4402      	add	r2, r0
 800817a:	4601      	mov	r1, r0
 800817c:	428a      	cmp	r2, r1
 800817e:	d100      	bne.n	8008182 <memmove+0x2a>
 8008180:	bd10      	pop	{r4, pc}
 8008182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800818a:	e7f7      	b.n	800817c <memmove+0x24>

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_sbrk_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fe10 	bl	8001dbc <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200006f0 	.word	0x200006f0

080081ac <memcpy>:
 80081ac:	440a      	add	r2, r1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b4:	d100      	bne.n	80081b8 <memcpy+0xc>
 80081b6:	4770      	bx	lr
 80081b8:	b510      	push	{r4, lr}
 80081ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c2:	4291      	cmp	r1, r2
 80081c4:	d1f9      	bne.n	80081ba <memcpy+0xe>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <_realloc_r>:
 80081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	4680      	mov	r8, r0
 80081ce:	4614      	mov	r4, r2
 80081d0:	460e      	mov	r6, r1
 80081d2:	b921      	cbnz	r1, 80081de <_realloc_r+0x16>
 80081d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081d8:	4611      	mov	r1, r2
 80081da:	f7ff bc49 	b.w	8007a70 <_malloc_r>
 80081de:	b92a      	cbnz	r2, 80081ec <_realloc_r+0x24>
 80081e0:	f7ff fbda 	bl	8007998 <_free_r>
 80081e4:	4625      	mov	r5, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	f000 f81b 	bl	8008226 <_malloc_usable_size_r>
 80081f0:	4284      	cmp	r4, r0
 80081f2:	4607      	mov	r7, r0
 80081f4:	d802      	bhi.n	80081fc <_realloc_r+0x34>
 80081f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081fa:	d812      	bhi.n	8008222 <_realloc_r+0x5a>
 80081fc:	4621      	mov	r1, r4
 80081fe:	4640      	mov	r0, r8
 8008200:	f7ff fc36 	bl	8007a70 <_malloc_r>
 8008204:	4605      	mov	r5, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	d0ed      	beq.n	80081e6 <_realloc_r+0x1e>
 800820a:	42bc      	cmp	r4, r7
 800820c:	4622      	mov	r2, r4
 800820e:	4631      	mov	r1, r6
 8008210:	bf28      	it	cs
 8008212:	463a      	movcs	r2, r7
 8008214:	f7ff ffca 	bl	80081ac <memcpy>
 8008218:	4631      	mov	r1, r6
 800821a:	4640      	mov	r0, r8
 800821c:	f7ff fbbc 	bl	8007998 <_free_r>
 8008220:	e7e1      	b.n	80081e6 <_realloc_r+0x1e>
 8008222:	4635      	mov	r5, r6
 8008224:	e7df      	b.n	80081e6 <_realloc_r+0x1e>

08008226 <_malloc_usable_size_r>:
 8008226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822a:	1f18      	subs	r0, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfbc      	itt	lt
 8008230:	580b      	ldrlt	r3, [r1, r0]
 8008232:	18c0      	addlt	r0, r0, r3
 8008234:	4770      	bx	lr
	...

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

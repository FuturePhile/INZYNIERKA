
INZYNIERKA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008260  08008260  00018260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f4  080083f4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083fc  080083fc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08008404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200000bc  080084c0  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  080084c0  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001951d  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039bd  00000000  00000000  0003964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003e628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e4e  00000000  00000000  0003f74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d822  00000000  00000000  0006959c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcba6  00000000  00000000  00086dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060e8  00000000  00000000  00183964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00189a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008248 	.word	0x08008248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08008248 	.word	0x08008248

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a0:	f3bf 8f4f 	dsb	sy
}
 80005a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x24>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_SystemReset+0x28>)
 80005b2:	4313      	orrs	r3, r2
 80005b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <__NVIC_SystemReset+0x20>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	05fa0004 	.word	0x05fa0004

080005c8 <lcd_write_nibble>:

static bool previous_state_telephone = true;
static bool can_enter_key = false;

static void lcd_write_nibble(uint8_t nibble, uint8_t rs)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nibble << D4_BIT;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <lcd_write_nibble+0x7c>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	b25a      	sxtb	r2, r3
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 8000608:	f107 020f 	add.w	r2, r7, #15
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	214e      	movs	r1, #78	; 0x4e
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <lcd_write_nibble+0x80>)
 8000616:	f002 fb59 	bl	8002ccc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 ff14 	bl	8002448 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0304 	bic.w	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, TIMEOUT);
 800062a:	f107 020f 	add.w	r2, r7, #15
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	214e      	movs	r1, #78	; 0x4e
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <lcd_write_nibble+0x80>)
 8000638:	f002 fb48 	bl	8002ccc <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	200000e8 	.word	0x200000e8

0800064c <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffad 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffa8 	bl	80005c8 <lcd_write_nibble>
	if(cmd == 0x01 || cmd == 0x02)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <lcd_send_cmd+0x38>
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d102      	bne.n	800068a <lcd_send_cmd+0x3e>
	{
		HAL_Delay(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f001 fedf 	bl	8002448 <HAL_Delay>
	}
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_send_data>:

void lcd_send_data(uint8_t data)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff8a 	bl	80005c8 <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80006b4:	7bbb      	ldrb	r3, [r7, #14]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff85 	bl	80005c8 <lcd_write_nibble>
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <lcd_init>:

void lcd_init()
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f001 febc 	bl	8002448 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ff78 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f001 feb5 	bl	8002448 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff71 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 feae 	bl	8002448 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2003      	movs	r0, #3
 80006f0:	f7ff ff6a 	bl	80005c8 <lcd_write_nibble>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f001 fea7 	bl	8002448 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff63 	bl	80005c8 <lcd_write_nibble>
	lcd_send_cmd(0x28);
 8000702:	2028      	movs	r0, #40	; 0x28
 8000704:	f7ff ffa2 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff9f 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800070e:	2006      	movs	r0, #6
 8000710:	f7ff ff9c 	bl	800064c <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff99 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 800071a:	2002      	movs	r0, #2
 800071c:	f001 fe94 	bl	8002448 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	while(*str)
 800072c:	e006      	b.n	800073c <lcd_write_string+0x18>
	{
		lcd_send_data(*str++);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffab 	bl	8000692 <lcd_send_data>
	while(*str)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f4      	bne.n	800072e <lcd_write_string+0xa>
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	460a      	mov	r2, r1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4613      	mov	r3, r2
 800075c:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <lcd_set_cursor+0x1c>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d003      	beq.n	8000770 <lcd_set_cursor+0x22>
 8000768:	e005      	b.n	8000776 <lcd_set_cursor+0x28>
	{
		case 0:
			address = 0x00;
 800076a:	2300      	movs	r3, #0
 800076c:	73fb      	strb	r3, [r7, #15]
			break;
 800076e:	e004      	b.n	800077a <lcd_set_cursor+0x2c>
		case 1:
			address = 0x40;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	73fb      	strb	r3, [r7, #15]
			break;
 8000774:	e001      	b.n	800077a <lcd_set_cursor+0x2c>
		default:
			address = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	4413      	add	r3, r2
 8000780:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff5e 	bl	800064c <lcd_send_cmd>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_clear>:

void lcd_clear(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff55 	bl	800064c <lcd_send_cmd>
	HAL_Delay(2);
 80007a2:	2002      	movs	r0, #2
 80007a4:	f001 fe50 	bl	8002448 <HAL_Delay>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <lcd_backlight>:

void lcd_backlight(uint8_t state)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(state)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <lcd_backlight+0x18>
	{
		backlight_state = 1;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <lcd_backlight+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	} else
	{
		backlight_state = 0;
	}
}
 80007c2:	e002      	b.n	80007ca <lcd_backlight+0x1e>
		backlight_state = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <lcd_backlight+0x2c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <lcd_display>:
}lcd_state;

int lcd_number = LCD_1;

void lcd_display(bool current_state_telephone, bool current_state_key, char *key_buffer, char *access_key, char pressed_button, char *ble_cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	460b      	mov	r3, r1
 80007ec:	73bb      	strb	r3, [r7, #14]
	static bool cmd_1 = false;
	static bool cmd_2 = false;
	static bool cmd_3 = false;


	if(current_state_telephone != previous_state_telephone)
 80007ee:	4ba5      	ldr	r3, [pc, #660]	; (8000a84 <lcd_display+0x2a8>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d012      	beq.n	800081e <lcd_display+0x42>
	{
		if(current_state_telephone == false)
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <lcd_display+0x30>
		{
			lcd_number = LCD_1;
 8000804:	4ba0      	ldr	r3, [pc, #640]	; (8000a88 <lcd_display+0x2ac>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e005      	b.n	8000818 <lcd_display+0x3c>
		}else if(current_state_telephone == true)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <lcd_display+0x3c>
		{
			lcd_number = LCD_2;
 8000812:	4b9d      	ldr	r3, [pc, #628]	; (8000a88 <lcd_display+0x2ac>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
		}
		previous_state_telephone = current_state_telephone;
 8000818:	4a9a      	ldr	r2, [pc, #616]	; (8000a84 <lcd_display+0x2a8>)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	7013      	strb	r3, [r2, #0]
	}

	if(strlen(key_buffer) == 4)
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f7ff fce0 	bl	80001e4 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	2b04      	cmp	r3, #4
 8000828:	d10c      	bne.n	8000844 <lcd_display+0x68>
	{
		if_key_entered = true;
 800082a:	4b98      	ldr	r3, [pc, #608]	; (8000a8c <lcd_display+0x2b0>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
		if(strcmp(key_buffer, access_key) == 0)
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	68b8      	ldr	r0, [r7, #8]
 8000834:	f7ff fccc 	bl	80001d0 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <lcd_display+0x68>
		{
			if_key_correct = true;
 800083e:	4b94      	ldr	r3, [pc, #592]	; (8000a90 <lcd_display+0x2b4>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
		}
	}

	if(if_key_entered == true)
 8000844:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <lcd_display+0x2b0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00d      	beq.n	8000868 <lcd_display+0x8c>
	{
		if(if_key_correct == true)
 800084c:	4b90      	ldr	r3, [pc, #576]	; (8000a90 <lcd_display+0x2b4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <lcd_display+0x80>
		{
			lcd_number = LCD_4;
 8000854:	4b8c      	ldr	r3, [pc, #560]	; (8000a88 <lcd_display+0x2ac>)
 8000856:	2203      	movs	r2, #3
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e002      	b.n	8000862 <lcd_display+0x86>
		} else
		{
			lcd_number = LCD_3;
 800085c:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <lcd_display+0x2ac>)
 800085e:	2202      	movs	r2, #2
 8000860:	601a      	str	r2, [r3, #0]
		}
		if_key_entered = false;
 8000862:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <lcd_display+0x2b0>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
	}

	if(pressed_button == 'A' && if_key_correct == true)
 8000868:	7e3b      	ldrb	r3, [r7, #24]
 800086a:	2b41      	cmp	r3, #65	; 0x41
 800086c:	d109      	bne.n	8000882 <lcd_display+0xa6>
 800086e:	4b88      	ldr	r3, [pc, #544]	; (8000a90 <lcd_display+0x2b4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d005      	beq.n	8000882 <lcd_display+0xa6>
	{
		lcd_number = LCD_6;
 8000876:	4b84      	ldr	r3, [pc, #528]	; (8000a88 <lcd_display+0x2ac>)
 8000878:	2205      	movs	r2, #5
 800087a:	601a      	str	r2, [r3, #0]
		if_key_correct = false;
 800087c:	4b84      	ldr	r3, [pc, #528]	; (8000a90 <lcd_display+0x2b4>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp(ble_cmd, "open") == 0)
 8000882:	4984      	ldr	r1, [pc, #528]	; (8000a94 <lcd_display+0x2b8>)
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f7ff fca3 	bl	80001d0 <strcmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d109      	bne.n	80008a4 <lcd_display+0xc8>
	{
		if(cmd_1 == true)
 8000890:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <lcd_display+0x2bc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d005      	beq.n	80008a4 <lcd_display+0xc8>
		{
			lcd_number = LCD_7;
 8000898:	4b7b      	ldr	r3, [pc, #492]	; (8000a88 <lcd_display+0x2ac>)
 800089a:	2206      	movs	r2, #6
 800089c:	601a      	str	r2, [r3, #0]
			cmd_1 = false;
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <lcd_display+0x2bc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "close") == 0)
 80008a4:	497d      	ldr	r1, [pc, #500]	; (8000a9c <lcd_display+0x2c0>)
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff fc92 	bl	80001d0 <strcmp>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d109      	bne.n	80008c6 <lcd_display+0xea>
	{
		if(cmd_2 == true)
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <lcd_display+0x2c4>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d005      	beq.n	80008c6 <lcd_display+0xea>
		{
			lcd_number = LCD_8;
 80008ba:	4b73      	ldr	r3, [pc, #460]	; (8000a88 <lcd_display+0x2ac>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
			cmd_2 = false;
 80008c0:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <lcd_display+0x2c4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
		}
	}
	if(strcmp(ble_cmd, "reset") == 0)
 80008c6:	4977      	ldr	r1, [pc, #476]	; (8000aa4 <lcd_display+0x2c8>)
 80008c8:	69f8      	ldr	r0, [r7, #28]
 80008ca:	f7ff fc81 	bl	80001d0 <strcmp>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <lcd_display+0x10c>
	{
		if(cmd_3 == true)
 80008d4:	4b74      	ldr	r3, [pc, #464]	; (8000aa8 <lcd_display+0x2cc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d005      	beq.n	80008e8 <lcd_display+0x10c>
		{
			lcd_number = RST;
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <lcd_display+0x2ac>)
 80008de:	2208      	movs	r2, #8
 80008e0:	601a      	str	r2, [r3, #0]
			cmd_3 = false;
 80008e2:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <lcd_display+0x2cc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
		}
	}


	switch(lcd_number)
 80008e8:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <lcd_display+0x2ac>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b08      	cmp	r3, #8
 80008ee:	f200 819a 	bhi.w	8000c26 <lcd_display+0x44a>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <lcd_display+0x11c>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	0800091d 	.word	0x0800091d
 80008fc:	0800096d 	.word	0x0800096d
 8000900:	080009c3 	.word	0x080009c3
 8000904:	08000a23 	.word	0x08000a23
 8000908:	08000ad1 	.word	0x08000ad1
 800090c:	08000b21 	.word	0x08000b21
 8000910:	08000b77 	.word	0x08000b77
 8000914:	08000bcd 	.word	0x08000bcd
 8000918:	08000c23 	.word	0x08000c23
	{
	case LCD_1:
		lcd_set_cursor(0, 0);
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff15 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000924:	4b61      	ldr	r3, [pc, #388]	; (8000aac <lcd_display+0x2d0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fefb 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff0c 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000936:	4b5e      	ldr	r3, [pc, #376]	; (8000ab0 <lcd_display+0x2d4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fef2 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff ff03 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <lcd_display+0x2d0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fee9 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff fefa 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_not_set);
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <lcd_display+0x2d8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fee0 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000964:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <lcd_display+0x2ac>)
 8000966:	2209      	movs	r2, #9
 8000968:	601a      	str	r2, [r3, #0]
		break;
 800096a:	e15d      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_2:
		lcd_set_cursor(0, 0);
 800096c:	2100      	movs	r1, #0
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff feed 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <lcd_display+0x2d0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fed3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fee4 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <lcd_display+0x2dc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff feca 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fedb 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <lcd_display+0x2d0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fec1 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009a2:	2100      	movs	r1, #0
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fed2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(telephone_set);
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <lcd_display+0x2e0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff feb8 	bl	8000724 <lcd_write_string>

		can_enter_key = true;
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <lcd_display+0x2e4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <lcd_display+0x2ac>)
 80009bc:	2209      	movs	r2, #9
 80009be:	601a      	str	r2, [r3, #0]
		break;
 80009c0:	e132      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_3:
		lcd_set_cursor(0, 0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fec2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <lcd_display+0x2d0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fea8 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff feb9 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <lcd_display+0x2dc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe9f 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff feb0 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <lcd_display+0x2d0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe96 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff fea7 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_bad);
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <lcd_display+0x2e8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fe8d 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <lcd_display+0x2e4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000a10:	f000 ff70 	bl	80018f4 <reset_buffer>

		delay(delay_second*2);
 8000a14:	482c      	ldr	r0, [pc, #176]	; (8000ac8 <lcd_display+0x2ec>)
 8000a16:	f000 ff7d 	bl	8001914 <delay>

		lcd_number = LCD_2;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <lcd_display+0x2ac>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
		break;
 8000a20:	e102      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_4:
		lcd_set_cursor(0, 0);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fe92 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <lcd_display+0x2d0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe78 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000a34:	2100      	movs	r1, #0
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fe89 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <lcd_display+0x2d4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe6f 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fe80 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <lcd_display+0x2d0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fe66 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fe77 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_good);
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <lcd_display+0x2f0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe5d 	bl	8000724 <lcd_write_string>

		can_enter_key = false;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <lcd_display+0x2e4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]

		reset_buffer();
 8000a70:	f000 ff40 	bl	80018f4 <reset_buffer>

		delay(delay_second*2);
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <lcd_display+0x2ec>)
 8000a76:	f000 ff4d 	bl	8001914 <delay>

		lcd_number = LCD_5;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <lcd_display+0x2ac>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	601a      	str	r2, [r3, #0]
		break;
 8000a80:	e0d2      	b.n	8000c28 <lcd_display+0x44c>
 8000a82:	bf00      	nop
 8000a84:	20000001 	.word	0x20000001
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	200000e0 	.word	0x200000e0
 8000a90:	200000e1 	.word	0x200000e1
 8000a94:	08008260 	.word	0x08008260
 8000a98:	200000e2 	.word	0x200000e2
 8000a9c:	08008268 	.word	0x08008268
 8000aa0:	200000e3 	.word	0x200000e3
 8000aa4:	08008270 	.word	0x08008270
 8000aa8:	200000e4 	.word	0x200000e4
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	2000000c 	.word	0x2000000c
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000014 	.word	0x20000014
 8000ac0:	200000d8 	.word	0x200000d8
 8000ac4:	20000018 	.word	0x20000018
 8000ac8:	01e84800 	.word	0x01e84800
 8000acc:	2000001c 	.word	0x2000001c
	case LCD_5:
		lcd_set_cursor(0, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fe3b 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ad8:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <lcd_display+0x454>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe21 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fe32 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_1);
 8000aea:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <lcd_display+0x458>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe18 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe29 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000afc:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <lcd_display+0x454>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe0f 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fe20 	bl	800074e <lcd_set_cursor>
		lcd_write_string(message_2);
 8000b0e:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <lcd_display+0x45c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe06 	bl	8000724 <lcd_write_string>

		lcd_number = DONE;
 8000b18:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <lcd_display+0x460>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	601a      	str	r2, [r3, #0]
		break;
 8000b1e:	e083      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_6:
		lcd_set_cursor(0, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe13 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <lcd_display+0x454>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdf9 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b32:	2100      	movs	r1, #0
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fe0a 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <lcd_display+0x464>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fdf0 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b44:	2100      	movs	r1, #0
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fe01 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b4c:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <lcd_display+0x454>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fde7 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fdf8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(unlock);
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <lcd_display+0x468>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdde 	bl	8000724 <lcd_write_string>

		cmd_1 = true;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <lcd_display+0x46c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <lcd_display+0x460>)
 8000b70:	2209      	movs	r2, #9
 8000b72:	601a      	str	r2, [r3, #0]
		break;
 8000b74:	e058      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_7:
		lcd_set_cursor(0, 0);
 8000b76:	2100      	movs	r1, #0
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fde8 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <lcd_display+0x454>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fdce 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fddf 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_open);
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <lcd_display+0x470>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fdc5 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fdd6 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <lcd_display+0x454>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fdbc 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff fdcd 	bl	800074e <lcd_set_cursor>
		lcd_write_string(lock);
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <lcd_display+0x474>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdb3 	bl	8000724 <lcd_write_string>

		cmd_2 = true;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <lcd_display+0x478>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <lcd_display+0x460>)
 8000bc6:	2209      	movs	r2, #9
 8000bc8:	601a      	str	r2, [r3, #0]
		break;
 8000bca:	e02d      	b.n	8000c28 <lcd_display+0x44c>
	case LCD_8:
		lcd_set_cursor(0, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fdbd 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <lcd_display+0x454>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fda3 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(0, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fdb4 	bl	800074e <lcd_set_cursor>
		lcd_write_string(door_closed);
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <lcd_display+0x464>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fd9a 	bl	8000724 <lcd_write_string>

		lcd_set_cursor(1, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fdab 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear_line);
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <lcd_display+0x454>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd91 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fda2 	bl	800074e <lcd_set_cursor>
		lcd_write_string(reset);
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <lcd_display+0x47c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd88 	bl	8000724 <lcd_write_string>

		cmd_3 = true;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <lcd_display+0x480>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]

		lcd_number = DONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <lcd_display+0x460>)
 8000c1c:	2209      	movs	r2, #9
 8000c1e:	601a      	str	r2, [r3, #0]
		break;
 8000c20:	e002      	b.n	8000c28 <lcd_display+0x44c>
	case RST:
		NVIC_SystemReset();
 8000c22:	f7ff fcbb 	bl	800059c <__NVIC_SystemReset>
		break;
	default:
		break;
 8000c26:	bf00      	nop
	}

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000020 	.word	0x20000020
 8000c38:	20000024 	.word	0x20000024
 8000c3c:	200000dc 	.word	0x200000dc
 8000c40:	20000010 	.word	0x20000010
 8000c44:	20000028 	.word	0x20000028
 8000c48:	200000e2 	.word	0x200000e2
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000002c 	.word	0x2000002c
 8000c54:	200000e3 	.word	0x200000e3
 8000c58:	20000030 	.word	0x20000030
 8000c5c:	200000e4 	.word	0x200000e4

08000c60 <lcd_display_key>:

bool lcd_display_key(char *key_buffer, bool current_state_key)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	static char *clear = "     ";

	if(current_state_key == true && can_enter_key == true)
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d015      	beq.n	8000c9e <lcd_display_key+0x3e>
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <lcd_display_key+0x48>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d011      	beq.n	8000c9e <lcd_display_key+0x3e>
	{
		lcd_set_cursor(1,11);
 8000c7a:	210b      	movs	r1, #11
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd66 	bl	800074e <lcd_set_cursor>
		lcd_write_string(clear);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <lcd_display_key+0x4c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd4c 	bl	8000724 <lcd_write_string>
		lcd_set_cursor(1, 11);
 8000c8c:	210b      	movs	r1, #11
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fd5d 	bl	800074e <lcd_set_cursor>
		lcd_write_string(key_buffer);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fd45 	bl	8000724 <lcd_write_string>
		current_state_key = false;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	70fb      	strb	r3, [r7, #3]
	}
	return current_state_key;
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	20000034 	.word	0x20000034

08000cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a3f      	ldr	r2, [pc, #252]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a39      	ldr	r2, [pc, #228]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000d14:	482d      	ldr	r0, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d16:	f001 ff0d 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d20:	f001 ff08 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	4824      	ldr	r0, [pc, #144]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d3a:	f001 fd39 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_SWITCH_Pin;
 8000d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MAG_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d54:	f001 fd2c 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 8000d58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000d70:	f001 fd1e 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ROW_1_Pin|ROW_2_Pin|ROW_3_Pin|ROW_4_Pin;
 8000d74:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_GPIO_Init+0x11c>)
 8000d8e:	f001 fd0f 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODEM_ENABLE_Pin;
 8000d92:	2320      	movs	r3, #32
 8000d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODEM_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MX_GPIO_Init+0x120>)
 8000daa:	f001 fd01 	bl	80027b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	210c      	movs	r1, #12
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f001 fc47 	bl	8002646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db8:	2028      	movs	r0, #40	; 0x28
 8000dba:	f001 fc60 	bl	800267e <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48000800 	.word	0x48000800
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C1_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e10:	f001 fec0 	bl	8002b94 <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fe8d 	bl	8001b38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e22:	f002 fa7b 	bl	800331c <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fe84 	bl	8001b38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_I2C1_Init+0x74>)
 8000e34:	f002 fabd 	bl	80033b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fe7b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000e8 	.word	0x200000e8
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	10909cec 	.word	0x10909cec

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0ac      	sub	sp, #176	; 0xb0
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2288      	movs	r2, #136	; 0x88
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fd35 	bl	80078e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_I2C_MspInit+0xb0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d13a      	bne.n	8000efa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 f94f 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e9c:	f000 fe4c 	bl	8001b38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebe:	2312      	movs	r3, #18
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <HAL_I2C_MspInit+0xb8>)
 8000ede:	f001 fc67 	bl	80027b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eec:	6593      	str	r3, [r2, #88]	; 0x58
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_I2C_MspInit+0xb4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	37b0      	adds	r7, #176	; 0xb0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40005400 	.word	0x40005400
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400

08000f10 <line_append_debug>:
void send_SMS(void);
void delay(uint32_t iterations);
void add_digit(char digit);

void line_append_debug(uint8_t value)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	if(value == '\r' || value == '\n')
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b0d      	cmp	r3, #13
 8000f1e:	d002      	beq.n	8000f26 <line_append_debug+0x16>
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b0a      	cmp	r3, #10
 8000f24:	d16c      	bne.n	8001000 <line_append_debug+0xf0>
	{
		if(line_lenght_debug >= 0)
		{
			if(strncmp(line_buffer_debug, "B ", 2) == 0)
 8000f26:	2202      	movs	r2, #2
 8000f28:	493f      	ldr	r1, [pc, #252]	; (8001028 <line_append_debug+0x118>)
 8000f2a:	4840      	ldr	r0, [pc, #256]	; (800102c <line_append_debug+0x11c>)
 8000f2c:	f006 fce2 	bl	80078f4 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d127      	bne.n	8000f86 <line_append_debug+0x76>
			{
				strncpy(line_buffer_debug_BLE, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 8000f36:	224e      	movs	r2, #78	; 0x4e
 8000f38:	493d      	ldr	r1, [pc, #244]	; (8001030 <line_append_debug+0x120>)
 8000f3a:	483e      	ldr	r0, [pc, #248]	; (8001034 <line_append_debug+0x124>)
 8000f3c:	f006 fcec 	bl	8007918 <strncpy>
				line_lenght_debug_BLE = line_lenght_debug - 2;
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <line_append_debug+0x128>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3b02      	subs	r3, #2
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <line_append_debug+0x12c>)
 8000f48:	6013      	str	r3, [r2, #0]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\r';
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	; (800103c <line_append_debug+0x12c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	493a      	ldr	r1, [pc, #232]	; (800103c <line_append_debug+0x12c>)
 8000f52:	600a      	str	r2, [r1, #0]
 8000f54:	4a37      	ldr	r2, [pc, #220]	; (8001034 <line_append_debug+0x124>)
 8000f56:	210d      	movs	r1, #13
 8000f58:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE++] = '\n';
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <line_append_debug+0x12c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	4936      	ldr	r1, [pc, #216]	; (800103c <line_append_debug+0x12c>)
 8000f62:	600a      	str	r2, [r1, #0]
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <line_append_debug+0x124>)
 8000f66:	210a      	movs	r1, #10
 8000f68:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_BLE[line_lenght_debug_BLE] = '\0';
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <line_append_debug+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <line_append_debug+0x124>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)line_buffer_debug_BLE, line_lenght_debug_BLE);
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <line_append_debug+0x12c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	492d      	ldr	r1, [pc, #180]	; (8001034 <line_append_debug+0x124>)
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <line_append_debug+0x130>)
 8000f80:	f005 f890 	bl	80060a4 <HAL_UART_Transmit_IT>
 8000f84:	e026      	b.n	8000fd4 <line_append_debug+0xc4>
			} else if (strncmp(line_buffer_debug, "G ", 2) == 0)
 8000f86:	2202      	movs	r2, #2
 8000f88:	492e      	ldr	r1, [pc, #184]	; (8001044 <line_append_debug+0x134>)
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <line_append_debug+0x11c>)
 8000f8c:	f006 fcb2 	bl	80078f4 <strncmp>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11e      	bne.n	8000fd4 <line_append_debug+0xc4>
			{
				strncpy(line_buffer_debug_GSM, &line_buffer_debug[2], (LINE_MAX_LENGTH - 2));
 8000f96:	224e      	movs	r2, #78	; 0x4e
 8000f98:	4925      	ldr	r1, [pc, #148]	; (8001030 <line_append_debug+0x120>)
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <line_append_debug+0x138>)
 8000f9c:	f006 fcbc 	bl	8007918 <strncpy>
				line_lenght_debug_GSM = line_lenght_debug - 2;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <line_append_debug+0x128>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	4a29      	ldr	r2, [pc, #164]	; (800104c <line_append_debug+0x13c>)
 8000fa8:	6013      	str	r3, [r2, #0]
				line_buffer_debug_GSM[line_lenght_debug_GSM++] = '\n';
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <line_append_debug+0x13c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4926      	ldr	r1, [pc, #152]	; (800104c <line_append_debug+0x13c>)
 8000fb2:	600a      	str	r2, [r1, #0]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <line_append_debug+0x138>)
 8000fb6:	210a      	movs	r1, #10
 8000fb8:	54d1      	strb	r1, [r2, r3]
				line_buffer_debug_GSM[line_lenght_debug_GSM] = '\0';
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <line_append_debug+0x13c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a22      	ldr	r2, [pc, #136]	; (8001048 <line_append_debug+0x138>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit_IT(&huart1, (uint8_t*)line_buffer_debug_GSM, line_lenght_debug_GSM);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <line_append_debug+0x13c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	491e      	ldr	r1, [pc, #120]	; (8001048 <line_append_debug+0x138>)
 8000fce:	4820      	ldr	r0, [pc, #128]	; (8001050 <line_append_debug+0x140>)
 8000fd0:	f005 f868 	bl	80060a4 <HAL_UART_Transmit_IT>
			}
			line_buffer_debug[line_lenght_debug] = '\0';
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <line_append_debug+0x128>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <line_append_debug+0x11c>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <line_append_debug+0x144>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_debug, strlen(line_buffer_debug));
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <line_append_debug+0x11c>)
 8000fe6:	f7ff f8fd 	bl	80001e4 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	490e      	ldr	r1, [pc, #56]	; (800102c <line_append_debug+0x11c>)
 8000ff2:	4819      	ldr	r0, [pc, #100]	; (8001058 <line_append_debug+0x148>)
 8000ff4:	f005 f856 	bl	80060a4 <HAL_UART_Transmit_IT>
			line_lenght_debug = 0;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <line_append_debug+0x128>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
		if(line_lenght_debug >= 0)
 8000ffe:	e00f      	b.n	8001020 <line_append_debug+0x110>
		}
	} else
	{
		if(line_lenght_debug >= LINE_MAX_LENGTH)
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <line_append_debug+0x128>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b4f      	cmp	r3, #79	; 0x4f
 8001006:	d902      	bls.n	800100e <line_append_debug+0xfe>
		{
			line_lenght_debug = 0;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <line_append_debug+0x128>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		}
		line_buffer_debug[line_lenght_debug++] = value;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <line_append_debug+0x128>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	4908      	ldr	r1, [pc, #32]	; (8001038 <line_append_debug+0x128>)
 8001016:	600a      	str	r2, [r1, #0]
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <line_append_debug+0x11c>)
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	54ca      	strb	r2, [r1, r3]
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08008338 	.word	0x08008338
 800102c:	2000013c 	.word	0x2000013c
 8001030:	2000013e 	.word	0x2000013e
 8001034:	200001e4 	.word	0x200001e4
 8001038:	200002e0 	.word	0x200002e0
 800103c:	200002e4 	.word	0x200002e4
 8001040:	2000052c 	.word	0x2000052c
 8001044:	0800833c 	.word	0x0800833c
 8001048:	20000190 	.word	0x20000190
 800104c:	200002e8 	.word	0x200002e8
 8001050:	2000041c 	.word	0x2000041c
 8001054:	200002f4 	.word	0x200002f4
 8001058:	200004a4 	.word	0x200004a4

0800105c <line_append_bluetooth>:

void line_append_bluetooth(uint8_t value)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]

	if(value == '\r' || value == '\n')
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b0d      	cmp	r3, #13
 800106a:	d002      	beq.n	8001072 <line_append_bluetooth+0x16>
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d119      	bne.n	80010a6 <line_append_bluetooth+0x4a>
	{
		if(line_lenght_bluetooth > 0)
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <line_append_bluetooth+0x104>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d06e      	beq.n	8001158 <line_append_bluetooth+0xfc>
		{
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <line_append_bluetooth+0x104>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <line_append_bluetooth+0x108>)
 8001080:	2100      	movs	r1, #0
 8001082:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 8001084:	4b38      	ldr	r3, [pc, #224]	; (8001168 <line_append_bluetooth+0x10c>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 800108a:	4836      	ldr	r0, [pc, #216]	; (8001164 <line_append_bluetooth+0x108>)
 800108c:	f7ff f8aa 	bl	80001e4 <strlen>
 8001090:	4603      	mov	r3, r0
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4933      	ldr	r1, [pc, #204]	; (8001164 <line_append_bluetooth+0x108>)
 8001098:	4834      	ldr	r0, [pc, #208]	; (800116c <line_append_bluetooth+0x110>)
 800109a:	f005 f803 	bl	80060a4 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <line_append_bluetooth+0x104>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
		if(line_lenght_bluetooth > 0)
 80010a4:	e058      	b.n	8001158 <line_append_bluetooth+0xfc>
		}
	} else if(value == '#')
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b23      	cmp	r3, #35	; 0x23
 80010aa:	d124      	bne.n	80010f6 <line_append_bluetooth+0x9a>
	{
		if(line_lenght_bluetooth > 0)
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <line_append_bluetooth+0x104>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d051      	beq.n	8001158 <line_append_bluetooth+0xfc>
		{
			strncpy(phone_number, line_buffer_bluetooth, 9);
 80010b4:	2209      	movs	r2, #9
 80010b6:	492b      	ldr	r1, [pc, #172]	; (8001164 <line_append_bluetooth+0x108>)
 80010b8:	482d      	ldr	r0, [pc, #180]	; (8001170 <line_append_bluetooth+0x114>)
 80010ba:	f006 fc2d 	bl	8007918 <strncpy>
			phone_number[9] = '\0';
 80010be:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <line_append_bluetooth+0x114>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	725a      	strb	r2, [r3, #9]
			if_send_end_line = true;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <line_append_bluetooth+0x10c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			if_phone_number_set = true;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <line_append_bluetooth+0x118>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
			if_phone_number_set_latch = true;
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <line_append_bluetooth+0x11c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)phone_number, strlen(phone_number));
 80010d6:	4826      	ldr	r0, [pc, #152]	; (8001170 <line_append_bluetooth+0x114>)
 80010d8:	f7ff f884 	bl	80001e4 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4923      	ldr	r1, [pc, #140]	; (8001170 <line_append_bluetooth+0x114>)
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <line_append_bluetooth+0x110>)
 80010e6:	f004 ffdd 	bl	80060a4 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <line_append_bluetooth+0x104>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

			send_SMS();
 80010f0:	f000 f91c 	bl	800132c <send_SMS>
		{
			line_lenght_bluetooth = 0;
		}
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
	}
}
 80010f4:	e030      	b.n	8001158 <line_append_bluetooth+0xfc>
	} else if(value == '*')
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b2a      	cmp	r3, #42	; 0x2a
 80010fa:	d11d      	bne.n	8001138 <line_append_bluetooth+0xdc>
		if(line_lenght_bluetooth > 0)
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <line_append_bluetooth+0x104>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d029      	beq.n	8001158 <line_append_bluetooth+0xfc>
			line_buffer_bluetooth[line_lenght_bluetooth] = '\0';
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <line_append_bluetooth+0x104>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <line_append_bluetooth+0x108>)
 800110a:	2100      	movs	r1, #0
 800110c:	54d1      	strb	r1, [r2, r3]
			if_send_end_line = true;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <line_append_bluetooth+0x10c>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
			strcpy(open_close_cmd, line_buffer_bluetooth);
 8001114:	4913      	ldr	r1, [pc, #76]	; (8001164 <line_append_bluetooth+0x108>)
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <line_append_bluetooth+0x120>)
 8001118:	f006 fc3e 	bl	8007998 <strcpy>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_bluetooth, strlen(line_buffer_bluetooth));
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <line_append_bluetooth+0x108>)
 800111e:	f7ff f861 	bl	80001e4 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <line_append_bluetooth+0x108>)
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <line_append_bluetooth+0x110>)
 800112c:	f004 ffba 	bl	80060a4 <HAL_UART_Transmit_IT>
			line_lenght_bluetooth = 0;
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <line_append_bluetooth+0x104>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	e00f      	b.n	8001158 <line_append_bluetooth+0xfc>
		if(line_lenght_bluetooth >= LINE_MAX_LENGTH)
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <line_append_bluetooth+0x104>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b4f      	cmp	r3, #79	; 0x4f
 800113e:	d902      	bls.n	8001146 <line_append_bluetooth+0xea>
			line_lenght_bluetooth = 0;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <line_append_bluetooth+0x104>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
		line_buffer_bluetooth[line_lenght_bluetooth++] = value;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <line_append_bluetooth+0x104>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <line_append_bluetooth+0x104>)
 800114e:	600a      	str	r2, [r1, #0]
 8001150:	4904      	ldr	r1, [pc, #16]	; (8001164 <line_append_bluetooth+0x108>)
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	54ca      	strb	r2, [r1, r3]
}
 8001156:	e7ff      	b.n	8001158 <line_append_bluetooth+0xfc>
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000238 	.word	0x20000238
 8001168:	200002f4 	.word	0x200002f4
 800116c:	200004a4 	.word	0x200004a4
 8001170:	200002fc 	.word	0x200002fc
 8001174:	200002f5 	.word	0x200002f5
 8001178:	200002f6 	.word	0x200002f6
 800117c:	20000318 	.word	0x20000318

08001180 <line_append_gsm>:

void line_append_gsm(uint8_t value)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if(line_lenght_gsm < LINE_MAX_LENGTH)
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <line_append_gsm+0x3c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b4f      	cmp	r3, #79	; 0x4f
 8001190:	d80d      	bhi.n	80011ae <line_append_gsm+0x2e>
	{
		line_buffer_gsm[line_lenght_gsm++] = value;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <line_append_gsm+0x3c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <line_append_gsm+0x3c>)
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	4908      	ldr	r1, [pc, #32]	; (80011c0 <line_append_gsm+0x40>)
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	54ca      	strb	r2, [r1, r3]
		last_byte_time = HAL_GetTick();
 80011a2:	f001 f945 	bl	8002430 <HAL_GetTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <line_append_gsm+0x44>)
 80011aa:	6013      	str	r3, [r2, #0]
	} else
	{
		line_lenght_gsm = 0;
	}
}
 80011ac:	e002      	b.n	80011b4 <line_append_gsm+0x34>
		line_lenght_gsm = 0;
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <line_append_gsm+0x3c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002f0 	.word	0x200002f0
 80011c0:	2000028c 	.word	0x2000028c
 80011c4:	200002f8 	.word	0x200002f8

080011c8 <check_timeout_gsm>:

void check_timeout_gsm(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	if(line_lenght_gsm > 0 && (HAL_GetTick() - last_byte_time > TIMEOUT_MS))
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <check_timeout_gsm+0x44>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d019      	beq.n	8001208 <check_timeout_gsm+0x40>
 80011d4:	f001 f92c 	bl	8002430 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <check_timeout_gsm+0x48>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b32      	cmp	r3, #50	; 0x32
 80011e2:	d911      	bls.n	8001208 <check_timeout_gsm+0x40>
	{
		line_buffer_gsm[line_lenght_gsm] = '\0';
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <check_timeout_gsm+0x44>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <check_timeout_gsm+0x4c>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)line_buffer_gsm, strlen(line_buffer_gsm));
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <check_timeout_gsm+0x4c>)
 80011f0:	f7fe fff8 	bl	80001e4 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4906      	ldr	r1, [pc, #24]	; (8001214 <check_timeout_gsm+0x4c>)
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <check_timeout_gsm+0x50>)
 80011fe:	f004 ff51 	bl	80060a4 <HAL_UART_Transmit_IT>
		line_lenght_gsm = 0;
 8001202:	4b02      	ldr	r3, [pc, #8]	; (800120c <check_timeout_gsm+0x44>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	}
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200002f0 	.word	0x200002f0
 8001210:	200002f8 	.word	0x200002f8
 8001214:	2000028c 	.word	0x2000028c
 8001218:	200004a4 	.word	0x200004a4

0800121c <send_end_line>:

void send_end_line(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	static char end_signs[3] = "\r\n\0";

	if(if_send_end_line == true)
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <send_end_line+0x20>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <send_end_line+0x1c>
	{
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)end_signs, 3);
 8001228:	2203      	movs	r2, #3
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <send_end_line+0x24>)
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <send_end_line+0x28>)
 800122e:	f004 ff39 	bl	80060a4 <HAL_UART_Transmit_IT>
		if_send_end_line = false;
 8001232:	4b02      	ldr	r3, [pc, #8]	; (800123c <send_end_line+0x20>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
	}
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200002f4 	.word	0x200002f4
 8001240:	20000038 	.word	0x20000038
 8001244:	200004a4 	.word	0x200004a4

08001248 <HAL_UART_RxCpltCallback>:

uint8_t uart2_rx_buffer, uart1_rx_buffer, uart3_rx_buffer;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_RxCpltCallback+0x68>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10a      	bne.n	800126e <HAL_UART_RxCpltCallback+0x26>
	{
		line_append_debug(uart2_rx_buffer);
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe57 	bl	8000f10 <line_append_debug>
		HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <HAL_UART_RxCpltCallback+0x68>)
 8001268:	f004 ff7a 	bl	8006160 <HAL_UART_Receive_IT>
	else if(huart == &huart3)
	{
		line_append_bluetooth(uart3_rx_buffer);
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
	}
}
 800126c:	e01c      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_UART_RxCpltCallback+0x44>
		line_append_gsm(uart1_rx_buffer);
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff80 	bl	8001180 <line_append_gsm>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001286:	f004 ff6b 	bl	8006160 <HAL_UART_Receive_IT>
}
 800128a:	e00d      	b.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
	else if(huart == &huart3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d109      	bne.n	80012a8 <HAL_UART_RxCpltCallback+0x60>
		line_append_bluetooth(uart3_rx_buffer);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fedf 	bl	800105c <line_append_bluetooth>
		HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 80012a4:	f004 ff5c 	bl	8006160 <HAL_UART_Receive_IT>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200004a4 	.word	0x200004a4
 80012b4:	2000031f 	.word	0x2000031f
 80012b8:	2000041c 	.word	0x2000041c
 80012bc:	20000320 	.word	0x20000320
 80012c0:	2000052c 	.word	0x2000052c
 80012c4:	20000321 	.word	0x20000321

080012c8 <access_key_draw>:

void access_key_draw(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	static uint32_t random_number;
	static uint16_t access_code;

	if(if_phone_number_set == true)
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <access_key_draw+0x48>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01b      	beq.n	800130c <access_key_draw+0x44>
	{
		HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012d4:	490f      	ldr	r1, [pc, #60]	; (8001314 <access_key_draw+0x4c>)
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <access_key_draw+0x50>)
 80012d8:	f003 fc4f 	bl	8004b7a <HAL_RNG_GenerateRandomNumber>
		access_code = random_number % 10000;
 80012dc:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <access_key_draw+0x4c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <access_key_draw+0x54>)
 80012e2:	fba3 1302 	umull	r1, r3, r3, r2
 80012e6:	0b5b      	lsrs	r3, r3, #13
 80012e8:	f242 7110 	movw	r1, #10000	; 0x2710
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <access_key_draw+0x58>)
 80012f6:	801a      	strh	r2, [r3, #0]
		sprintf(access_key, "%04u", access_code);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <access_key_draw+0x58>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4909      	ldr	r1, [pc, #36]	; (8001324 <access_key_draw+0x5c>)
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <access_key_draw+0x60>)
 8001302:	f006 facf 	bl	80078a4 <siprintf>
		if_phone_number_set = false;
 8001306:	4b02      	ldr	r3, [pc, #8]	; (8001310 <access_key_draw+0x48>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	}
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002f5 	.word	0x200002f5
 8001314:	2000034c 	.word	0x2000034c
 8001318:	20000398 	.word	0x20000398
 800131c:	d1b71759 	.word	0xd1b71759
 8001320:	20000350 	.word	0x20000350
 8001324:	08008340 	.word	0x08008340
 8001328:	20000308 	.word	0x20000308

0800132c <send_SMS>:
}sender_state;

int message_number = MESSAGE_1;

void send_SMS(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	static char message_cmgf[] = "AT+CMGF=1\r";
	static char message_cscs[] = "AT+CSCS=\"GSM\"\r";
	static char message_cmgs[31];
	sprintf(message_cmgs, "AT+CMGS=\"+48%s\"\r", phone_number);
 8001330:	4a31      	ldr	r2, [pc, #196]	; (80013f8 <send_SMS+0xcc>)
 8001332:	4932      	ldr	r1, [pc, #200]	; (80013fc <send_SMS+0xd0>)
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <send_SMS+0xd4>)
 8001336:	f006 fab5 	bl	80078a4 <siprintf>
	access_key_draw();
 800133a:	f7ff ffc5 	bl	80012c8 <access_key_draw>
	static char message_message[34];
	sprintf(message_message, "Kod dostepu do skrytki: %s", access_key);
 800133e:	4a31      	ldr	r2, [pc, #196]	; (8001404 <send_SMS+0xd8>)
 8001340:	4931      	ldr	r1, [pc, #196]	; (8001408 <send_SMS+0xdc>)
 8001342:	4832      	ldr	r0, [pc, #200]	; (800140c <send_SMS+0xe0>)
 8001344:	f006 faae 	bl	80078a4 <siprintf>
	static char message_ctrlz = 0x1A;

	delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f000 fae3 	bl	8001914 <delay>

	switch(message_number)
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <send_SMS+0xe4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b04      	cmp	r3, #4
 8001354:	d84d      	bhi.n	80013f2 <send_SMS+0xc6>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <send_SMS+0x30>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	08001371 	.word	0x08001371
 8001360:	0800138d 	.word	0x0800138d
 8001364:	080013a9 	.word	0x080013a9
 8001368:	080013c5 	.word	0x080013c5
 800136c:	080013e1 	.word	0x080013e1
	{
	case MESSAGE_1:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgf, strlen(message_cmgf));
 8001370:	4828      	ldr	r0, [pc, #160]	; (8001414 <send_SMS+0xe8>)
 8001372:	f7fe ff37 	bl	80001e4 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	4925      	ldr	r1, [pc, #148]	; (8001414 <send_SMS+0xe8>)
 800137e:	4826      	ldr	r0, [pc, #152]	; (8001418 <send_SMS+0xec>)
 8001380:	f004 fe90 	bl	80060a4 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_2;
 8001384:	4b22      	ldr	r3, [pc, #136]	; (8001410 <send_SMS+0xe4>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
		break;
 800138a:	e033      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_2:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cscs, strlen(message_cscs));
 800138c:	4823      	ldr	r0, [pc, #140]	; (800141c <send_SMS+0xf0>)
 800138e:	f7fe ff29 	bl	80001e4 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4920      	ldr	r1, [pc, #128]	; (800141c <send_SMS+0xf0>)
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <send_SMS+0xec>)
 800139c:	f004 fe82 	bl	80060a4 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_3;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <send_SMS+0xe4>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
		break;
 80013a6:	e025      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_3:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_cmgs, strlen(message_cmgs));
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <send_SMS+0xd4>)
 80013aa:	f7fe ff1b 	bl	80001e4 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4912      	ldr	r1, [pc, #72]	; (8001400 <send_SMS+0xd4>)
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <send_SMS+0xec>)
 80013b8:	f004 fe74 	bl	80060a4 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_4;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <send_SMS+0xe4>)
 80013be:	2203      	movs	r2, #3
 80013c0:	601a      	str	r2, [r3, #0]
		break;
 80013c2:	e017      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_4:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)message_message, strlen(message_message));
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <send_SMS+0xe0>)
 80013c6:	f7fe ff0d 	bl	80001e4 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <send_SMS+0xe0>)
 80013d2:	4811      	ldr	r0, [pc, #68]	; (8001418 <send_SMS+0xec>)
 80013d4:	f004 fe66 	bl	80060a4 <HAL_UART_Transmit_IT>
		message_number = MESSAGE_5;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <send_SMS+0xe4>)
 80013da:	2204      	movs	r2, #4
 80013dc:	601a      	str	r2, [r3, #0]
		break;
 80013de:	e009      	b.n	80013f4 <send_SMS+0xc8>
	case MESSAGE_5:
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)&message_ctrlz, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	490f      	ldr	r1, [pc, #60]	; (8001420 <send_SMS+0xf4>)
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <send_SMS+0xec>)
 80013e6:	f004 fe5d 	bl	80060a4 <HAL_UART_Transmit_IT>
		message_number = DONE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <send_SMS+0xe4>)
 80013ec:	2205      	movs	r2, #5
 80013ee:	601a      	str	r2, [r3, #0]
		break;
 80013f0:	e000      	b.n	80013f4 <send_SMS+0xc8>
	default:
		break;
 80013f2:	bf00      	nop
	}
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200002fc 	.word	0x200002fc
 80013fc:	08008348 	.word	0x08008348
 8001400:	20000354 	.word	0x20000354
 8001404:	20000308 	.word	0x20000308
 8001408:	0800835c 	.word	0x0800835c
 800140c:	20000374 	.word	0x20000374
 8001410:	20000324 	.word	0x20000324
 8001414:	2000003c 	.word	0x2000003c
 8001418:	2000041c 	.word	0x2000041c
 800141c:	20000048 	.word	0x20000048
 8001420:	20000057 	.word	0x20000057

08001424 <send_AT_init>:

void send_AT_init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	static char AT_init[] = "AT\r\n";

	HAL_UART_Transmit_IT(&huart1, (uint8_t*)AT_init, strlen(AT_init));
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <send_AT_init+0x44>)
 800142a:	f7fe fedb 	bl	80001e4 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29b      	uxth	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <send_AT_init+0x44>)
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <send_AT_init+0x48>)
 8001438:	f004 fe34 	bl	80060a4 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)AT_init, strlen(AT_init));
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <send_AT_init+0x44>)
 800143e:	f7fe fed1 	bl	80001e4 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29b      	uxth	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <send_AT_init+0x44>)
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <send_AT_init+0x4c>)
 800144c:	f004 fe2a 	bl	80060a4 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)AT_init, strlen(AT_init));
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <send_AT_init+0x44>)
 8001452:	f7fe fec7 	bl	80001e4 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29b      	uxth	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	4902      	ldr	r1, [pc, #8]	; (8001468 <send_AT_init+0x44>)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <send_AT_init+0x50>)
 8001460:	f004 fe20 	bl	80060a4 <HAL_UART_Transmit_IT>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000058 	.word	0x20000058
 800146c:	2000041c 	.word	0x2000041c
 8001470:	200004a4 	.word	0x200004a4
 8001474:	2000052c 	.word	0x2000052c

08001478 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_UART_TxCpltCallback+0x30>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d105      	bne.n	8001494 <HAL_UART_TxCpltCallback+0x1c>
	{
		if(if_phone_number_set_latch == true)
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_UART_TxCpltCallback+0x34>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_TxCpltCallback+0x1c>
		{
			send_SMS();
 8001490:	f7ff ff4c 	bl	800132c <send_SMS>
		}
	}
	if(huart == &huart2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_UART_TxCpltCallback+0x38>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d101      	bne.n	80014a0 <HAL_UART_TxCpltCallback+0x28>
	{
		send_end_line();
 800149c:	f7ff febe 	bl	800121c <send_end_line>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000041c 	.word	0x2000041c
 80014ac:	200002f6 	.word	0x200002f6
 80014b0:	200004a4 	.word	0x200004a4

080014b4 <HAL_GPIO_EXTI_Callback>:
uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
volatile uint8_t pressed_key = '\0';

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80014be:	f000 ffb7 	bl	8002430 <HAL_GetTick>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4aaf      	ldr	r2, [pc, #700]	; (8001784 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014c6:	6013      	str	r3, [r2, #0]
	if(currentMillis - previousMillis > 200 )
 80014c8:	4bae      	ldr	r3, [pc, #696]	; (8001784 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4bae      	ldr	r3, [pc, #696]	; (8001788 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2bc8      	cmp	r3, #200	; 0xc8
 80014d4:	f240 81d9 	bls.w	800188a <HAL_GPIO_EXTI_Callback+0x3d6>
	{
		GPIO_InitStructPrivate.Pin = COL_1_Pin|COL_2_Pin|COL_3_Pin|COL_4_Pin;
 80014d8:	4bac      	ldr	r3, [pc, #688]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014da:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80014de:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80014e0:	4baa      	ldr	r3, [pc, #680]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80014e6:	4ba9      	ldr	r3, [pc, #676]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	4ba7      	ldr	r3, [pc, #668]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 80014f2:	49a6      	ldr	r1, [pc, #664]	; (800178c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80014f4:	48a6      	ldr	r0, [pc, #664]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80014f6:	f001 f95b 	bl	80027b0 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	48a5      	ldr	r0, [pc, #660]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001500:	f001 fb18 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	48a2      	ldr	r0, [pc, #648]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800150a:	f001 fb13 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	489f      	ldr	r0, [pc, #636]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001516:	f001 fb0d 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	489c      	ldr	r0, [pc, #624]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001522:	f001 fb07 	bl	8002b34 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800152c:	d10b      	bne.n	8001546 <HAL_GPIO_EXTI_Callback+0x92>
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4897      	ldr	r0, [pc, #604]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001534:	f001 fae6 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_EXTI_Callback+0x92>
		{
			pressed_key = '1';
 800153e:	4b96      	ldr	r3, [pc, #600]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001540:	2231      	movs	r2, #49	; 0x31
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e02e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154c:	d10b      	bne.n	8001566 <HAL_GPIO_EXTI_Callback+0xb2>
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	488f      	ldr	r0, [pc, #572]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001554:	f001 fad6 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0xb2>
		{
			pressed_key = '2';
 800155e:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001560:	2232      	movs	r2, #50	; 0x32
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e01e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800156c:	d10b      	bne.n	8001586 <HAL_GPIO_EXTI_Callback+0xd2>
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4887      	ldr	r0, [pc, #540]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001574:	f001 fac6 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_EXTI_Callback+0xd2>
		{
			pressed_key = '3';
 800157e:	4b86      	ldr	r3, [pc, #536]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001580:	2233      	movs	r2, #51	; 0x33
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158c:	d10a      	bne.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
 800158e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001592:	487f      	ldr	r0, [pc, #508]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001594:	f001 fab6 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_GPIO_EXTI_Callback+0xf0>
		{
			pressed_key = 'A';
 800159e:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80015a0:	2241      	movs	r2, #65	; 0x41
 80015a2:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	487a      	ldr	r0, [pc, #488]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015aa:	f001 fac3 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	4878      	ldr	r0, [pc, #480]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015b4:	f001 fabe 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015be:	4875      	ldr	r0, [pc, #468]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015c0:	f001 fab8 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ca:	4872      	ldr	r0, [pc, #456]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80015cc:	f001 fab2 	bl	8002b34 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	d10b      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0x13c>
 80015d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015dc:	486c      	ldr	r0, [pc, #432]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015de:	f001 fa91 	bl	8002b04 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_EXTI_Callback+0x13c>
		{
			pressed_key = '4';
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80015ea:	2234      	movs	r2, #52	; 0x34
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e02e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f6:	d10b      	bne.n	8001610 <HAL_GPIO_EXTI_Callback+0x15c>
 80015f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fc:	4864      	ldr	r0, [pc, #400]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80015fe:	f001 fa81 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_EXTI_Callback+0x15c>
		{
			pressed_key = '5';
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800160a:	2235      	movs	r2, #53	; 0x35
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e01e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001616:	d10b      	bne.n	8001630 <HAL_GPIO_EXTI_Callback+0x17c>
 8001618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161c:	485c      	ldr	r0, [pc, #368]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800161e:	f001 fa71 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_EXTI_Callback+0x17c>
		{
			pressed_key = '6';
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800162a:	2236      	movs	r2, #54	; 0x36
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e00e      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001636:	d10a      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
 8001638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163c:	4854      	ldr	r0, [pc, #336]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 800163e:	f001 fa61 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_GPIO_EXTI_Callback+0x19a>
		{
			pressed_key = 'B';
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800164a:	2242      	movs	r2, #66	; 0x42
 800164c:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4850      	ldr	r0, [pc, #320]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001654:	f001 fa6e 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	484d      	ldr	r0, [pc, #308]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800165e:	f001 fa69 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001668:	484a      	ldr	r0, [pc, #296]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800166a:	f001 fa63 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	4847      	ldr	r0, [pc, #284]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001676:	f001 fa5d 	bl	8002b34 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001680:	d10b      	bne.n	800169a <HAL_GPIO_EXTI_Callback+0x1e6>
 8001682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001686:	4842      	ldr	r0, [pc, #264]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001688:	f001 fa3c 	bl	8002b04 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x1e6>
		{
			pressed_key = '7';
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001694:	2237      	movs	r2, #55	; 0x37
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a0:	d10b      	bne.n	80016ba <HAL_GPIO_EXTI_Callback+0x206>
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016a8:	f001 fa2c 	bl	8002b04 <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_EXTI_Callback+0x206>
		{
			pressed_key = '8';
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016b4:	2238      	movs	r2, #56	; 0x38
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e01e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016c0:	d10b      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x226>
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	4832      	ldr	r0, [pc, #200]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016c8:	f001 fa1c 	bl	8002b04 <HAL_GPIO_ReadPin>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_EXTI_Callback+0x226>
		{
			pressed_key = '9';
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016d4:	2239      	movs	r2, #57	; 0x39
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	e00e      	b.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e0:	d10a      	bne.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
 80016e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 80016e8:	f001 fa0c 	bl	8002b04 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_GPIO_EXTI_Callback+0x244>
		{
			pressed_key = 'C';
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80016f4:	2243      	movs	r2, #67	; 0x43
 80016f6:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4825      	ldr	r0, [pc, #148]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80016fe:	f001 fa19 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	4823      	ldr	r0, [pc, #140]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001708:	f001 fa14 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001714:	f001 fa0e 	bl	8002b34 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001720:	f001 fa08 	bl	8002b34 <HAL_GPIO_WritePin>
		if(GPIO_Pin == COL_1_Pin && HAL_GPIO_ReadPin(COL_1_GPIO_Port, COL_1_Pin))
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172a:	d10b      	bne.n	8001744 <HAL_GPIO_EXTI_Callback+0x290>
 800172c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001732:	f001 f9e7 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_EXTI_Callback+0x290>
		{
			pressed_key = '*';
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800173e:	222a      	movs	r2, #42	; 0x2a
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e03a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_2_Pin && HAL_GPIO_ReadPin(COL_2_GPIO_Port, COL_2_Pin))
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d10b      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x2b0>
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001752:	f001 f9d7 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_EXTI_Callback+0x2b0>
		{
			pressed_key = '0';
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800175e:	2230      	movs	r2, #48	; 0x30
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e02a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		} else if(GPIO_Pin == COL_3_Pin && HAL_GPIO_ReadPin(COL_3_GPIO_Port, COL_3_Pin))
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176a:	d117      	bne.n	800179c <HAL_GPIO_EXTI_Callback+0x2e8>
 800176c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001772:	f001 f9c7 	bl	8002b04 <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00f      	beq.n	800179c <HAL_GPIO_EXTI_Callback+0x2e8>
		{
			pressed_key = '#';
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800177e:	2223      	movs	r2, #35	; 0x23
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e01a      	b.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
 8001784:	20000340 	.word	0x20000340
 8001788:	2000033c 	.word	0x2000033c
 800178c:	20000328 	.word	0x20000328
 8001790:	48000400 	.word	0x48000400
 8001794:	48000800 	.word	0x48000800
 8001798:	20000344 	.word	0x20000344
		} else if(GPIO_Pin == COL_4_Pin && HAL_GPIO_ReadPin(COL_4_GPIO_Port, COL_4_Pin))
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a2:	d10a      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
 80017a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a8:	483a      	ldr	r0, [pc, #232]	; (8001894 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80017aa:	f001 f9ab 	bl	8002b04 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <HAL_GPIO_EXTI_Callback+0x306>
		{
			pressed_key = 'D';
 80017b4:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80017b6:	2244      	movs	r2, #68	; 0x44
 80017b8:	701a      	strb	r2, [r3, #0]
		}

		  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2140      	movs	r1, #64	; 0x40
 80017be:	4837      	ldr	r0, [pc, #220]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017c0:	f001 f9b8 	bl	8002b34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	4834      	ldr	r0, [pc, #208]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017ca:	f001 f9b3 	bl	8002b34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4831      	ldr	r0, [pc, #196]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017d6:	f001 f9ad 	bl	8002b34 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	482e      	ldr	r0, [pc, #184]	; (800189c <HAL_GPIO_EXTI_Callback+0x3e8>)
 80017e2:	f001 f9a7 	bl	8002b34 <HAL_GPIO_WritePin>
		  GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017e8:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 80017ec:	605a      	str	r2, [r3, #4]
		  GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	609a      	str	r2, [r3, #8]
		  HAL_GPIO_Init(COL_1_GPIO_Port, &GPIO_InitStructPrivate);
 80017f4:	492a      	ldr	r1, [pc, #168]	; (80018a0 <HAL_GPIO_EXTI_Callback+0x3ec>)
 80017f6:	4827      	ldr	r0, [pc, #156]	; (8001894 <HAL_GPIO_EXTI_Callback+0x3e0>)
 80017f8:	f000 ffda 	bl	80027b0 <HAL_GPIO_Init>

		  if((pressed_key == '1'|| pressed_key == '2'|| pressed_key == '3'|| pressed_key == '4'|| pressed_key == '5'|| pressed_key == '6'|| pressed_key == '7'|| pressed_key == '8'|| pressed_key == '9'|| pressed_key == '0') && if_phone_number_set_latch == true)
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b31      	cmp	r3, #49	; 0x31
 8001804:	d02c      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b32      	cmp	r3, #50	; 0x32
 800180e:	d027      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b33      	cmp	r3, #51	; 0x33
 8001818:	d022      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b34      	cmp	r3, #52	; 0x34
 8001822:	d01d      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b35      	cmp	r3, #53	; 0x35
 800182c:	d018      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b36      	cmp	r3, #54	; 0x36
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b37      	cmp	r3, #55	; 0x37
 8001840:	d00e      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b38      	cmp	r3, #56	; 0x38
 800184a:	d009      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b39      	cmp	r3, #57	; 0x39
 8001854:	d004      	beq.n	8001860 <HAL_GPIO_EXTI_Callback+0x3ac>
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b30      	cmp	r3, #48	; 0x30
 800185e:	d110      	bne.n	8001882 <HAL_GPIO_EXTI_Callback+0x3ce>
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x3f0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00c      	beq.n	8001882 <HAL_GPIO_EXTI_Callback+0x3ce>
		  		  {
		  			  char pressed_digit = pressed_key;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	73fb      	strb	r3, [r7, #15]
		  			  add_digit(pressed_digit);
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f81f 	bl	80018b4 <add_digit>
		  			  pressed_key = '\0';
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_GPIO_EXTI_Callback+0x3e4>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		  			  if_key_pressed = true;
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x3f4>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
		  		  }

		  previousMillis = currentMillis;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_GPIO_EXTI_Callback+0x3f8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8001888:	6013      	str	r3, [r2, #0]

	}
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	48000400 	.word	0x48000400
 8001898:	20000344 	.word	0x20000344
 800189c:	48000800 	.word	0x48000800
 80018a0:	20000328 	.word	0x20000328
 80018a4:	200002f6 	.word	0x200002f6
 80018a8:	200002f7 	.word	0x200002f7
 80018ac:	20000340 	.word	0x20000340
 80018b0:	2000033c 	.word	0x2000033c

080018b4 <add_digit>:

int current_index = 0;

void add_digit(char digit)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	if(current_index < BUFFER_SIZE - 1)
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <add_digit+0x38>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	dc0c      	bgt.n	80018e0 <add_digit+0x2c>
	{
		key_buffer[current_index++] = digit;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <add_digit+0x38>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <add_digit+0x38>)
 80018ce:	600a      	str	r2, [r1, #0]
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <add_digit+0x3c>)
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	54ca      	strb	r2, [r1, r3]
		key_buffer[current_index] = '\0';
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <add_digit+0x38>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <add_digit+0x3c>)
 80018dc:	2100      	movs	r1, #0
 80018de:	54d1      	strb	r1, [r2, r3]
	}
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000348 	.word	0x20000348
 80018f0:	20000310 	.word	0x20000310

080018f4 <reset_buffer>:

void reset_buffer()
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
	memset(key_buffer, 0, BUFFER_SIZE);
 80018f8:	2205      	movs	r2, #5
 80018fa:	2100      	movs	r1, #0
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <reset_buffer+0x18>)
 80018fe:	f005 fff1 	bl	80078e4 <memset>
	current_index = 0;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <reset_buffer+0x1c>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000310 	.word	0x20000310
 8001910:	20000348 	.word	0x20000348

08001914 <delay>:

void delay(uint32_t iterations)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	while(iterations-- > 0)
 800191c:	e000      	b.n	8001920 <delay+0xc>
	{
		__NOP();
 800191e:	bf00      	nop
	while(iterations-- > 0)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1e5a      	subs	r2, r3, #1
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <delay+0xa>
	}
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f000 fd0e 	bl	800235e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 f897 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f7ff f9b3 	bl	8000cb0 <MX_GPIO_Init>
  MX_RNG_Init();
 800194a:	f000 f8fb 	bl	8001b44 <MX_RNG_Init>
  MX_RTC_Init();
 800194e:	f000 f959 	bl	8001c04 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001952:	f000 fb4d 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001956:	f000 fb7b 	bl	8002050 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800195a:	f000 fba9 	bl	80020b0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800195e:	f7ff fa39 	bl	8000dd4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001962:	f000 fa7b 	bl	8001e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(MODEM_ENABLE_GPIO_Port, MODEM_ENABLE_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2120      	movs	r1, #32
 800196a:	4833      	ldr	r0, [pc, #204]	; (8001a38 <main+0x100>)
 800196c:	f001 f8e2 	bl	8002b34 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001974:	f000 fd68 	bl	8002448 <HAL_Delay>

  lcd_init();
 8001978:	f7fe fea5 	bl	80006c6 <lcd_init>
  send_AT_init();
 800197c:	f7ff fd52 	bl	8001424 <send_AT_init>

  lcd_backlight(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f7fe ff13 	bl	80007ac <lcd_backlight>
  lcd_clear();
 8001986:	f7fe ff07 	bl	8000798 <lcd_clear>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800198a:	2100      	movs	r1, #0
 800198c:	482b      	ldr	r0, [pc, #172]	; (8001a3c <main+0x104>)
 800198e:	f003 fb9f 	bl	80050d0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1600);
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <main+0x104>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(500);
 800199c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a0:	f000 fd52 	bl	8002448 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 650);
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <main+0x104>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f240 228a 	movw	r2, #650	; 0x28a
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34

  memset(key_buffer, '\0', BUFFER_SIZE);
 80019ae:	2205      	movs	r2, #5
 80019b0:	2100      	movs	r1, #0
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <main+0x108>)
 80019b4:	f005 ff96 	bl	80078e4 <memset>

  HAL_GPIO_WritePin(ROW_1_GPIO_Port, ROW_1_Pin, 1);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	4821      	ldr	r0, [pc, #132]	; (8001a44 <main+0x10c>)
 80019be:	f001 f8b9 	bl	8002b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_2_GPIO_Port, ROW_2_Pin, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	481f      	ldr	r0, [pc, #124]	; (8001a44 <main+0x10c>)
 80019c8:	f001 f8b4 	bl	8002b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_3_GPIO_Port, ROW_3_Pin, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <main+0x10c>)
 80019d4:	f001 f8ae 	bl	8002b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ROW_4_GPIO_Port, ROW_4_Pin, 1);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019de:	4819      	ldr	r0, [pc, #100]	; (8001a44 <main+0x10c>)
 80019e0:	f001 f8a8 	bl	8002b34 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, &uart2_rx_buffer, 1);
 80019e4:	2201      	movs	r2, #1
 80019e6:	4918      	ldr	r1, [pc, #96]	; (8001a48 <main+0x110>)
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <main+0x114>)
 80019ea:	f004 fbb9 	bl	8006160 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &uart1_rx_buffer, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	4917      	ldr	r1, [pc, #92]	; (8001a50 <main+0x118>)
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <main+0x11c>)
 80019f4:	f004 fbb4 	bl	8006160 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &uart3_rx_buffer, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	4917      	ldr	r1, [pc, #92]	; (8001a58 <main+0x120>)
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <main+0x124>)
 80019fe:	f004 fbaf 	bl	8006160 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_timeout_gsm();
 8001a02:	f7ff fbe1 	bl	80011c8 <check_timeout_gsm>
	  lcd_display(if_phone_number_set_latch, if_key_pressed, key_buffer, access_key, pressed_key, open_close_cmd);
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <main+0x128>)
 8001a08:	7818      	ldrb	r0, [r3, #0]
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <main+0x12c>)
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <main+0x130>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <main+0x134>)
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <main+0x138>)
 8001a1c:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <main+0x108>)
 8001a1e:	f7fe fedd 	bl	80007dc <lcd_display>
	  if_key_pressed = lcd_display_key(key_buffer, if_key_pressed);
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <main+0x12c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <main+0x108>)
 8001a2a:	f7ff f919 	bl	8000c60 <lcd_display_key>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <main+0x12c>)
 8001a34:	701a      	strb	r2, [r3, #0]
	  check_timeout_gsm();
 8001a36:	e7e4      	b.n	8001a02 <main+0xca>
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	200003d0 	.word	0x200003d0
 8001a40:	20000310 	.word	0x20000310
 8001a44:	48000800 	.word	0x48000800
 8001a48:	2000031f 	.word	0x2000031f
 8001a4c:	200004a4 	.word	0x200004a4
 8001a50:	20000320 	.word	0x20000320
 8001a54:	2000041c 	.word	0x2000041c
 8001a58:	20000321 	.word	0x20000321
 8001a5c:	2000052c 	.word	0x2000052c
 8001a60:	200002f6 	.word	0x200002f6
 8001a64:	200002f7 	.word	0x200002f7
 8001a68:	20000344 	.word	0x20000344
 8001a6c:	20000318 	.word	0x20000318
 8001a70:	20000308 	.word	0x20000308

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b096      	sub	sp, #88	; 0x58
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	2244      	movs	r2, #68	; 0x44
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 ff2e 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a9a:	f001 fcf5 	bl	8003488 <HAL_PWREx_ControlVoltageScaling>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001aa4:	f000 f848 	bl	8001b38 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aa8:	f001 fcd0 	bl	800344c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <SystemClock_Config+0xc0>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <SystemClock_Config+0xc0>)
 8001ab4:	f023 0318 	bic.w	r3, r3, #24
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001abc:	2314      	movs	r3, #20
 8001abe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001acc:	2360      	movs	r3, #96	; 0x60
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001adc:	2328      	movs	r3, #40	; 0x28
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fd1f 	bl	8003534 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001afc:	f000 f81c 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2303      	movs	r3, #3
 8001b06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	2104      	movs	r1, #4
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 f8e7 	bl	8003cec <HAL_RCC_ClockConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b24:	f000 f808 	bl	8001b38 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b28:	f002 fdee 	bl	8004708 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b2c:	bf00      	nop
 8001b2e:	3758      	adds	r7, #88	; 0x58
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_RNG_Init+0x20>)
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <MX_RNG_Init+0x24>)
 8001b4c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_RNG_Init+0x20>)
 8001b50:	f002 ffbc 	bl	8004acc <HAL_RNG_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b5a:	f7ff ffed 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000398 	.word	0x20000398
 8001b68:	50060800 	.word	0x50060800

08001b6c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a6      	sub	sp, #152	; 0x98
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2288      	movs	r2, #136	; 0x88
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 feb1 	bl	80078e4 <memset>
  if(rngHandle->Instance==RNG)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_RNG_MspInit+0x90>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d133      	bne.n	8001bf4 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001baa:	2302      	movs	r3, #2
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001bb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fab9 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001bc8:	f7ff ffb6 	bl	8001b38 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_RNG_MspInit+0x94>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_RNG_MspInit+0x94>)
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RNG_MspInit+0x94>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 2, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	2050      	movs	r0, #80	; 0x50
 8001bea:	f000 fd2c 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001bee:	2050      	movs	r0, #80	; 0x50
 8001bf0:	f000 fd45 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	3798      	adds	r7, #152	; 0x98
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	50060800 	.word	0x50060800
 8001c00:	40021000 	.word	0x40021000

08001c04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <MX_RTC_Init+0x4c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c16:	227f      	movs	r2, #127	; 0x7f
 8001c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c1c:	22ff      	movs	r2, #255	; 0xff
 8001c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	; (8001c4c <MX_RTC_Init+0x48>)
 8001c3a:	f003 f873 	bl	8004d24 <HAL_RTC_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001c44:	f7ff ff78 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200003a8 	.word	0x200003a8
 8001c50:	40002800 	.word	0x40002800

08001c54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0a4      	sub	sp, #144	; 0x90
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	2288      	movs	r2, #136	; 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fe3d 	bl	80078e4 <memset>
  if(rtcHandle->Instance==RTC)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_RTC_MspInit+0x5c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d118      	bne.n	8001ca6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fa54 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c92:	f7ff ff51 	bl	8001b38 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <HAL_RTC_MspInit+0x60>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <HAL_RTC_MspInit+0x60>)
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3790      	adds	r7, #144	; 0x90
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40002800 	.word	0x40002800
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_MspInit+0x44>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_MspInit+0x44>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x44>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_MspInit+0x44>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_MspInit+0x44>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 fb5c 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <USART1_IRQHandler+0x10>)
 8001d5a:	f004 fa4d 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000041c 	.word	0x2000041c

08001d68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART2_IRQHandler+0x10>)
 8001d6e:	f004 fa43 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200004a4 	.word	0x200004a4

08001d7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <USART3_IRQHandler+0x10>)
 8001d82:	f004 fa39 	bl	80061f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000052c 	.word	0x2000052c

08001d90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL_1_Pin);
 8001d94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d98:	f000 fee4 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_2_Pin);
 8001d9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001da0:	f000 fee0 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_3_Pin);
 8001da4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001da8:	f000 fedc 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COL_4_Pin);
 8001dac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001db0:	f000 fed8 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <RNG_IRQHandler+0x10>)
 8001dbe:	f002 ff32 	bl	8004c26 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000398 	.word	0x20000398

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f005 fda0 	bl	8007940 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20018000 	.word	0x20018000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	200003cc 	.word	0x200003cc
 8001e34:	20000700 	.word	0x20000700

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001e98:	224f      	movs	r2, #79	; 0x4f
 8001e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001ea4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ea8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb6:	4824      	ldr	r0, [pc, #144]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001eb8:	f003 f852 	bl	8004f60 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ec2:	f7ff fe39 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481d      	ldr	r0, [pc, #116]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001ed4:	f003 fb16 	bl	8005504 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ede:	f7ff fe2b 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001ee4:	f003 f893 	bl	800500e <HAL_TIM_PWM_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001eee:	f7ff fe23 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	4811      	ldr	r0, [pc, #68]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001f02:	f003 fff9 	bl	8005ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f0c:	f7ff fe14 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f10:	2360      	movs	r3, #96	; 0x60
 8001f12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001f2a:	f003 f9d7 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001f34:	f7ff fe00 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM2_Init+0xec>)
 8001f3a:	f000 f825 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 8001f3e:	bf00      	nop
 8001f40:	3738      	adds	r7, #56	; 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200003d0 	.word	0x200003d0

08001f4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_TIM_Base_MspInit+0x38>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_TIM_Base_MspInit+0x38>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_TIM_Base_MspInit+0x38>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_TIM_MspPostInit+0x64>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_TIM_MspPostInit+0x64>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_TIM_MspPostInit+0x64>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_0_Pin;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_0_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f000 fbe6 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000

08001ff0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <MX_USART1_UART_Init+0x5c>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART1_UART_Init+0x58>)
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART1_UART_Init+0x58>)
 8002034:	f003 ffe8 	bl	8006008 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800203e:	f7ff fd7b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000041c 	.word	0x2000041c
 800204c:	40013800 	.word	0x40013800

08002050 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002056:	4a15      	ldr	r2, [pc, #84]	; (80020ac <MX_USART2_UART_Init+0x5c>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_USART2_UART_Init+0x58>)
 8002094:	f003 ffb8 	bl	8006008 <HAL_UART_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800209e:	f7ff fd4b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200004a4 	.word	0x200004a4
 80020ac:	40004400 	.word	0x40004400

080020b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020b6:	4a15      	ldr	r2, [pc, #84]	; (800210c <MX_USART3_UART_Init+0x5c>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_USART3_UART_Init+0x58>)
 80020f4:	f003 ff88 	bl	8006008 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020fe:	f7ff fd1b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000052c 	.word	0x2000052c
 800210c:	40004800 	.word	0x40004800

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0b0      	sub	sp, #192	; 0xc0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	2288      	movs	r2, #136	; 0x88
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 fbd7 	bl	80078e4 <memset>
  if(uartHandle->Instance==USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6f      	ldr	r2, [pc, #444]	; (80022f8 <HAL_UART_MspInit+0x1e8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d145      	bne.n	80021cc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002140:	2301      	movs	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002144:	2300      	movs	r3, #0
 8002146:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4618      	mov	r0, r3
 800214e:	f001 fff1 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002158:	f7ff fcee 	bl	8001b38 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800215c:	4b67      	ldr	r3, [pc, #412]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 800215e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	6613      	str	r3, [r2, #96]	; 0x60
 8002168:	4b64      	ldr	r3, [pc, #400]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b61      	ldr	r3, [pc, #388]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a60      	ldr	r2, [pc, #384]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800218c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021a6:	2307      	movs	r3, #7
 80021a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b6:	f000 fafb 	bl	80027b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2108      	movs	r1, #8
 80021be:	2025      	movs	r0, #37	; 0x25
 80021c0:	f000 fa41 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c4:	2025      	movs	r0, #37	; 0x25
 80021c6:	f000 fa5a 	bl	800267e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021ca:	e091      	b.n	80022f0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_UART_MspInit+0x1f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d144      	bne.n	8002260 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021d6:	2302      	movs	r3, #2
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021da:	2300      	movs	r3, #0
 80021dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 ffa6 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80021ee:	f7ff fca3 	bl	8001b38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f2:	4b42      	ldr	r3, [pc, #264]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4a41      	ldr	r2, [pc, #260]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
 80021fe:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	4a3b      	ldr	r2, [pc, #236]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002222:	230c      	movs	r3, #12
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800223a:	2307      	movs	r3, #7
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002244:	4619      	mov	r1, r3
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f000 fab1 	bl	80027b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	210a      	movs	r1, #10
 8002252:	2026      	movs	r0, #38	; 0x26
 8002254:	f000 f9f7 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002258:	2026      	movs	r0, #38	; 0x26
 800225a:	f000 fa10 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 800225e:	e047      	b.n	80022f0 <HAL_UART_MspInit+0x1e0>
  else if(uartHandle->Instance==USART3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <HAL_UART_MspInit+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d142      	bne.n	80022f0 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226a:	2304      	movs	r3, #4
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800226e:	2300      	movs	r3, #0
 8002270:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002276:	4618      	mov	r0, r3
 8002278:	f001 ff5c 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x176>
      Error_Handler();
 8002282:	f7ff fc59 	bl	8001b38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002286:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_UART_MspInit+0x1ec>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022b6:	2330      	movs	r3, #48	; 0x30
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ce:	2307      	movs	r3, #7
 80022d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022d8:	4619      	mov	r1, r3
 80022da:	480b      	ldr	r0, [pc, #44]	; (8002308 <HAL_UART_MspInit+0x1f8>)
 80022dc:	f000 fa68 	bl	80027b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2108      	movs	r1, #8
 80022e4:	2027      	movs	r0, #39	; 0x27
 80022e6:	f000 f9ae 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022ea:	2027      	movs	r0, #39	; 0x27
 80022ec:	f000 f9c7 	bl	800267e <HAL_NVIC_EnableIRQ>
}
 80022f0:	bf00      	nop
 80022f2:	37c0      	adds	r7, #192	; 0xc0
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40004400 	.word	0x40004400
 8002304:	40004800 	.word	0x40004800
 8002308:	48000800 	.word	0x48000800

0800230c <Reset_Handler>:
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002344 <LoopForever+0x2>
 8002310:	f7ff fd92 	bl	8001e38 <SystemInit>
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <LoopForever+0x6>)
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <LoopForever+0xa>)
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <LoopForever+0xe>)
 800231a:	2300      	movs	r3, #0
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:
 800231e:	58d4      	ldr	r4, [r2, r3]
 8002320:	50c4      	str	r4, [r0, r3]
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:
 8002324:	18c4      	adds	r4, r0, r3
 8002326:	428c      	cmp	r4, r1
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <LoopForever+0x12>)
 800232c:	4c0a      	ldr	r4, [pc, #40]	; (8002358 <LoopForever+0x16>)
 800232e:	2300      	movs	r3, #0
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:
 8002336:	42a2      	cmp	r2, r4
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>
 800233a:	f005 fb07 	bl	800794c <__libc_init_array>
 800233e:	f7ff fafb 	bl	8001938 <main>

08002342 <LoopForever>:
 8002342:	e7fe      	b.n	8002342 <LoopForever>
 8002344:	20018000 	.word	0x20018000
 8002348:	20000000 	.word	0x20000000
 800234c:	200000bc 	.word	0x200000bc
 8002350:	08008404 	.word	0x08008404
 8002354:	200000bc 	.word	0x200000bc
 8002358:	20000700 	.word	0x20000700

0800235c <ADC1_2_IRQHandler>:
 800235c:	e7fe      	b.n	800235c <ADC1_2_IRQHandler>

0800235e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 f961 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236e:	2000      	movs	r0, #0
 8002370:	f000 f80e 	bl	8002390 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	e001      	b.n	8002384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002380:	f7ff fc9a 	bl	8001cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002384:	79fb      	ldrb	r3, [r7, #7]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_InitTick+0x6c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_InitTick+0x70>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_InitTick+0x6c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f96d 	bl	800269a <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d809      	bhi.n	80023e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 f937 	bl	8002646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_InitTick+0x74>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e007      	b.n	80023f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e004      	b.n	80023f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e001      	b.n	80023f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000068 	.word	0x20000068
 8002400:	20000060 	.word	0x20000060
 8002404:	20000064 	.word	0x20000064

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000068 	.word	0x20000068
 800242c:	200005b4 	.word	0x200005b4

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	200005b4 	.word	0x200005b4

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000068 	.word	0x20000068

08002490 <__NVIC_SetPriorityGrouping>:
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	; (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	; (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d008      	beq.n	80026dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2204      	movs	r2, #4
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e022      	b.n	8002722 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 020e 	bic.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f003 021c 	and.w	r2, r3, #28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f202 	lsl.w	r2, r1, r2
 800270e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d005      	beq.n	8002752 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e029      	b.n	80027a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 020e 	bic.w	r2, r2, #14
 8002760:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 021c 	and.w	r2, r3, #28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    }
  }
  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	e17f      	b.n	8002ac0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8171 	beq.w	8002aba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d005      	beq.n	80027f0 <HAL_GPIO_Init+0x40>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d130      	bne.n	8002852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002826:	2201      	movs	r2, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 0201 	and.w	r2, r3, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b03      	cmp	r3, #3
 800285c:	d118      	bne.n	8002890 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002864:	2201      	movs	r2, #1
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	f003 0201 	and.w	r2, r3, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b03      	cmp	r3, #3
 800289a:	d017      	beq.n	80028cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d123      	bne.n	8002920 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	08da      	lsrs	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3208      	adds	r2, #8
 80028e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	220f      	movs	r2, #15
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	08da      	lsrs	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3208      	adds	r2, #8
 800291a:	6939      	ldr	r1, [r7, #16]
 800291c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0203 	and.w	r2, r3, #3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 80ac 	beq.w	8002aba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6613      	str	r3, [r2, #96]	; 0x60
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_GPIO_Init+0x330>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800297a:	4a5a      	ldr	r2, [pc, #360]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x242>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x338>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x23e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_GPIO_Init+0x33c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x23a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_GPIO_Init+0x340>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x236>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <HAL_GPIO_Init+0x344>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x232>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <HAL_GPIO_Init+0x348>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x22e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_GPIO_Init+0x34c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x22a>
 80029d6:	2306      	movs	r3, #6
 80029d8:	e00c      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029da:	2307      	movs	r3, #7
 80029dc:	e00a      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029de:	2305      	movs	r3, #5
 80029e0:	e008      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e004      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e002      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x244>
 80029f2:	2300      	movs	r3, #0
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	f002 0203 	and.w	r2, r2, #3
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	4093      	lsls	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a04:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <HAL_GPIO_Init+0x334>)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_GPIO_Init+0x350>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f47f ae78 	bne.w	80027c0 <HAL_GPIO_Init+0x10>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010000 	.word	0x40010000
 8002ae8:	48000400 	.word	0x48000400
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	48001000 	.word	0x48001000
 8002af8:	48001400 	.word	0x48001400
 8002afc:	48001800 	.word	0x48001800
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e001      	b.n	8002b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fc96 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e08d      	b.n	8002cc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f94a 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e006      	b.n	8002c1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d108      	bne.n	8002c36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	e007      	b.n	8002c46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69d9      	ldr	r1, [r3, #28]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	817b      	strh	r3, [r7, #10]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	f040 80fd 	bne.w	8002ee8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x30>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0f6      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d04:	f7ff fb94 	bl	8002430 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2319      	movs	r3, #25
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f914 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0e1      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2210      	movs	r2, #16
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2bff      	cmp	r3, #255	; 0xff
 8002d56:	d906      	bls.n	8002d66 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e007      	b.n	8002d76 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d74:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_I2C_Master_Transmit+0x228>)
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fa79 	bl	80032b8 <I2C_TransferConfig>
 8002dc6:	e066      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	8979      	ldrh	r1, [r7, #10]
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_I2C_Master_Transmit+0x228>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa6e 	bl	80032b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ddc:	e05b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8fd 	bl	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07b      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d034      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x1ca>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d130      	bne.n	8002e96 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f880 	bl	8002f44 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e04d      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2bff      	cmp	r3, #255	; 0xff
 8002e56:	d90e      	bls.n	8002e76 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa22 	bl	80032b8 <I2C_TransferConfig>
 8002e74:	e00f      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa11 	bl	80032b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d19e      	bne.n	8002dde <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f8e3 	bl	8003070 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e01a      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_I2C_Master_Transmit+0x22c>)
 8002ec8:	400b      	ands	r3, r1
 8002eca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	80002000 	.word	0x80002000
 8002ef8:	fe00e800 	.word	0xfe00e800

08002efc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d103      	bne.n	8002f1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d007      	beq.n	8002f38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	619a      	str	r2, [r3, #24]
  }
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	e031      	b.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d02d      	beq.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7ff fa67 	bl	8002430 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d122      	bne.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d113      	bne.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00f      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d0be      	beq.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fee:	e033      	b.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f87f 	bl	80030f8 <I2C_IsErrorOccurred>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e031      	b.n	8003068 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d025      	beq.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7ff fa10 	bl	8002430 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d11a      	bne.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d013      	beq.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e007      	b.n	8003068 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d1c4      	bne.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307c:	e02f      	b.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f838 	bl	80030f8 <I2C_IsErrorOccurred>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e02d      	b.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	f7ff f9cd 	bl	8002430 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d302      	bcc.n	80030a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11a      	bne.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d013      	beq.n	80030de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d1c8      	bne.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d068      	beq.n	80031f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2210      	movs	r2, #16
 800312a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800312c:	e049      	b.n	80031c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d045      	beq.n	80031c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7ff f97b 	bl	8002430 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_IsErrorOccurred+0x54>
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d13a      	bne.n	80031c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800315e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316e:	d121      	bne.n	80031b4 <I2C_IsErrorOccurred+0xbc>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003176:	d01d      	beq.n	80031b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b20      	cmp	r3, #32
 800317c:	d01a      	beq.n	80031b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800318e:	f7ff f94f 	bl	8002430 <HAL_GetTick>
 8003192:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003194:	e00e      	b.n	80031b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003196:	f7ff f94b 	bl	8002430 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b19      	cmp	r3, #25
 80031a2:	d907      	bls.n	80031b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031b2:	e006      	b.n	80031c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d1e9      	bne.n	8003196 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d003      	beq.n	80031d8 <I2C_IsErrorOccurred+0xe0>
 80031d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0aa      	beq.n	800312e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2220      	movs	r2, #32
 80031e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003218:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f043 0308 	orr.w	r3, r3, #8
 8003230:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	f043 0302 	orr.w	r3, r3, #2
 8003252:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01c      	beq.n	80032a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fe45 	bl	8002efc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <I2C_IsErrorOccurred+0x1bc>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	fe00e800 	.word	0xfe00e800

080032b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	817b      	strh	r3, [r7, #10]
 80032c6:	4613      	mov	r3, r2
 80032c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d0:	7a7b      	ldrb	r3, [r7, #9]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	0d5b      	lsrs	r3, r3, #21
 80032f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <I2C_TransferConfig+0x60>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	43db      	mvns	r3, r3
 80032fc:	ea02 0103 	and.w	r1, r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	03ff63ff 	.word	0x03ff63ff

0800331c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d138      	bne.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800333c:	2302      	movs	r3, #2
 800333e:	e032      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d139      	bne.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e033      	b.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2224      	movs	r2, #36	; 0x24
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_PWREx_GetVoltageRange+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000

08003488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d130      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d038      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ae:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2232      	movs	r2, #50	; 0x32
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	3301      	adds	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	e002      	b.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e0:	d102      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f2      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d110      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d007      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003516:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40007000 	.word	0x40007000
 800352c:	20000060 	.word	0x20000060
 8003530:	431bde83 	.word	0x431bde83

08003534 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e3ca      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003546:	4b97      	ldr	r3, [pc, #604]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003550:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80e4 	beq.w	8003730 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_RCC_OscConfig+0x4a>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f040 808b 	bne.w	800368c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b01      	cmp	r3, #1
 800357a:	f040 8087 	bne.w	800368c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357e:	4b89      	ldr	r3, [pc, #548]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_RCC_OscConfig+0x62>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e3a2      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <HAL_RCC_OscConfig+0x7c>
 80035a6:	4b7f      	ldr	r3, [pc, #508]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ae:	e005      	b.n	80035bc <HAL_RCC_OscConfig+0x88>
 80035b0:	4b7c      	ldr	r3, [pc, #496]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035bc:	4293      	cmp	r3, r2
 80035be:	d223      	bcs.n	8003608 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fd55 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e383      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d4:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a72      	ldr	r2, [pc, #456]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035da:	f043 0308 	orr.w	r3, r3, #8
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	496d      	ldr	r1, [pc, #436]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f2:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	4968      	ldr	r1, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003602:	4313      	orrs	r3, r2
 8003604:	604b      	str	r3, [r1, #4]
 8003606:	e025      	b.n	8003654 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003608:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800360e:	f043 0308 	orr.w	r3, r3, #8
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4960      	ldr	r1, [pc, #384]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003626:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	495b      	ldr	r1, [pc, #364]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fd15 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e343      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003654:	f000 fc4a 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	4950      	ldr	r1, [pc, #320]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
 8003670:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <HAL_RCC_OscConfig+0x278>)
 8003672:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003674:	4b4e      	ldr	r3, [pc, #312]	; (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fe89 	bl	8002390 <HAL_InitTick>
 800367e:	4603      	mov	r3, r0
 8003680:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d052      	beq.n	800372e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	e327      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d032      	beq.n	80036fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fec6 	bl	8002430 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036a8:	f7fe fec2 	bl	8002430 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e310      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ba:	4b3a      	ldr	r3, [pc, #232]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c6:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a36      	ldr	r2, [pc, #216]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4931      	ldr	r1, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e4:	4b2f      	ldr	r3, [pc, #188]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	492c      	ldr	r1, [pc, #176]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e01a      	b.n	8003730 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036fa:	4b2a      	ldr	r3, [pc, #168]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003706:	f7fe fe93 	bl	8002430 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800370e:	f7fe fe8f 	bl	8002430 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e2dd      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003720:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x1da>
 800372c:	e000      	b.n	8003730 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800372e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d074      	beq.n	8003826 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d005      	beq.n	800374e <HAL_RCC_OscConfig+0x21a>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d10e      	bne.n	8003766 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d064      	beq.n	8003824 <HAL_RCC_OscConfig+0x2f0>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d160      	bne.n	8003824 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e2ba      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x24a>
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e026      	b.n	80037cc <HAL_RCC_OscConfig+0x298>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003786:	d115      	bne.n	80037b4 <HAL_RCC_OscConfig+0x280>
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800378e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a02      	ldr	r2, [pc, #8]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e014      	b.n	80037cc <HAL_RCC_OscConfig+0x298>
 80037a2:	bf00      	nop
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08008378 	.word	0x08008378
 80037ac:	20000060 	.word	0x20000060
 80037b0:	20000064 	.word	0x20000064
 80037b4:	4ba0      	ldr	r3, [pc, #640]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a9f      	ldr	r2, [pc, #636]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b9d      	ldr	r3, [pc, #628]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a9c      	ldr	r2, [pc, #624]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fe2c 	bl	8002430 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe fe28 	bl	8002430 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e276      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ee:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x2a8>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe fe18 	bl	8002430 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fe fe14 	bl	8002430 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e262      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x2d0>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d060      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d005      	beq.n	8003844 <HAL_RCC_OscConfig+0x310>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d119      	bne.n	8003872 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d116      	bne.n	8003872 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x328>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e23f      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	4973      	ldr	r1, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	e040      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d023      	beq.n	80038c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387a:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6e      	ldr	r2, [pc, #440]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe fdd3 	bl	8002430 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe fdcf 	bl	8002430 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e21d      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a0:	4b65      	ldr	r3, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	495f      	ldr	r1, [pc, #380]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
 80038c0:	e018      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b5d      	ldr	r3, [pc, #372]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fe fdaf 	bl	8002430 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fe fdab 	bl	8002430 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1f9      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03c      	beq.n	800397a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01c      	beq.n	8003942 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390e:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fd8a 	bl	8002430 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fd86 	bl	8002430 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1d4      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCC_OscConfig+0x3ec>
 8003940:	e01b      	b.n	800397a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003948:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe fd6d 	bl	8002430 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe fd69 	bl	8002430 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1b7      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800396c:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a6 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800398c:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10d      	bne.n	80039b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	4b27      	ldr	r3, [pc, #156]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	4a26      	ldr	r2, [pc, #152]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6593      	str	r3, [r2, #88]	; 0x58
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d118      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039cc:	f7fe fd30 	bl	8002430 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fe fd2c 	bl	8002430 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e17a      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4d8>
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a0a:	e029      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d115      	bne.n	8003a40 <HAL_RCC_OscConfig+0x50c>
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	4b9c      	ldr	r3, [pc, #624]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a46:	4a9b      	ldr	r2, [pc, #620]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a50:	4b98      	ldr	r3, [pc, #608]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	4a97      	ldr	r2, [pc, #604]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fe fce2 	bl	8002430 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fe fcde 	bl	8002430 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e12a      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a86:	4b8b      	ldr	r3, [pc, #556]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ed      	beq.n	8003a70 <HAL_RCC_OscConfig+0x53c>
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fe fccb 	bl	8002430 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe fcc7 	bl	8002430 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e113      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab4:	4b7f      	ldr	r3, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ed      	bne.n	8003a9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac8:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80fe 	beq.w	8003cda <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	f040 80d0 	bne.w	8003c88 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ae8:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0203 	and.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d130      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	3b01      	subs	r3, #1
 8003b08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d127      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d11f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b28:	2a07      	cmp	r2, #7
 8003b2a:	bf14      	ite	ne
 8003b2c:	2201      	movne	r2, #1
 8003b2e:	2200      	moveq	r2, #0
 8003b30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d113      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d06e      	beq.n	8003c3c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d069      	beq.n	8003c38 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b64:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b70:	4b50      	ldr	r3, [pc, #320]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0ad      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b80:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b8c:	f7fe fc50 	bl	8002430 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fc4c 	bl	8002430 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e09a      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x784>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0112      	lsls	r2, r2, #4
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bcc:	0212      	lsls	r2, r2, #8
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd4:	0852      	lsrs	r2, r2, #1
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	0552      	lsls	r2, r2, #21
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0652      	lsls	r2, r2, #25
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bec:	0912      	lsrs	r2, r2, #4
 8003bee:	0452      	lsls	r2, r2, #17
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4930      	ldr	r1, [pc, #192]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2d      	ldr	r2, [pc, #180]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c04:	4b2b      	ldr	r3, [pc, #172]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c10:	f7fe fc0e 	bl	8002430 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe fc0a 	bl	8002430 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e058      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c36:	e050      	b.n	8003cda <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e04f      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d148      	bne.n	8003cda <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c60:	f7fe fbe6 	bl	8002430 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe fbe2 	bl	8002430 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e030      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x734>
 8003c86:	e028      	b.n	8003cda <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d023      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <HAL_RCC_OscConfig+0x780>)
 8003c94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fbc9 	bl	8002430 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca0:	e00c      	b.n	8003cbc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fe fbc5 	bl	8002430 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d905      	bls.n	8003cbc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e013      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_OscConfig+0x7b0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ec      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_OscConfig+0x7b0>)
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	4905      	ldr	r1, [pc, #20]	; (8003ce4 <HAL_RCC_OscConfig+0x7b0>)
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x7b4>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60cb      	str	r3, [r1, #12]
 8003cd4:	e001      	b.n	8003cda <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	feeefffc 	.word	0xfeeefffc

08003cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0e7      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d00:	4b75      	ldr	r3, [pc, #468]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d910      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0e:	4b72      	ldr	r3, [pc, #456]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 0207 	bic.w	r2, r3, #7
 8003d16:	4970      	ldr	r1, [pc, #448]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b6e      	ldr	r3, [pc, #440]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0cf      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b66      	ldr	r3, [pc, #408]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d908      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4c:	4b63      	ldr	r3, [pc, #396]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4960      	ldr	r1, [pc, #384]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04c      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d72:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d121      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e0a6      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8a:	4b54      	ldr	r3, [pc, #336]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d115      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e09a      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da2:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e08e      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db2:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e086      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc2:	4b46      	ldr	r3, [pc, #280]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4943      	ldr	r1, [pc, #268]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd4:	f7fe fb2c 	bl	8002430 <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ddc:	f7fe fb28 	bl	8002430 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e06e      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 020c 	and.w	r2, r3, #12
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1eb      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d208      	bcs.n	8003e32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e20:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	492b      	ldr	r1, [pc, #172]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d210      	bcs.n	8003e62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 0207 	bic.w	r2, r3, #7
 8003e48:	4923      	ldr	r1, [pc, #140]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d001      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e036      	b.n	8003ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4918      	ldr	r1, [pc, #96]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d009      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4910      	ldr	r1, [pc, #64]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ea0:	f000 f824 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	490b      	ldr	r1, [pc, #44]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1fc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fa63 	bl	8002390 <HAL_InitTick>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ece:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08008378 	.word	0x08008378
 8003ee4:	20000060 	.word	0x20000060
 8003ee8:	20000064 	.word	0x20000064

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b089      	sub	sp, #36	; 0x24
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efa:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x34>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d11e      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f20:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f2c:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e005      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d102      	bne.n	8003f6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	e004      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d134      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d003      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0xac>
 8003f90:	e005      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8003f94:	617b      	str	r3, [r7, #20]
      break;
 8003f96:	e005      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9a:	617b      	str	r3, [r7, #20]
      break;
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	617b      	str	r3, [r7, #20]
      break;
 8003fa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	3301      	adds	r3, #1
 8003fb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	fb03 f202 	mul.w	r2, r3, r2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	0e5b      	lsrs	r3, r3, #25
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08008390 	.word	0x08008390
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200

08004004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_GetHCLKFreq+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000060 	.word	0x20000060

0800401c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004020:	f7ff fff0 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4904      	ldr	r1, [pc, #16]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	08008388 	.word	0x08008388

08004048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800404c:	f7ff ffda 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0adb      	lsrs	r3, r3, #11
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4904      	ldr	r1, [pc, #16]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	08008388 	.word	0x08008388

08004074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800408c:	f7ff f9ee 	bl	800346c <HAL_PWREx_GetVoltageRange>
 8004090:	6178      	str	r0, [r7, #20]
 8004092:	e014      	b.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6593      	str	r3, [r2, #88]	; 0x58
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040ac:	f7ff f9de 	bl	800346c <HAL_PWREx_GetVoltageRange>
 80040b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b1e      	ldr	r3, [pc, #120]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c4:	d10b      	bne.n	80040de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d919      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2ba0      	cmp	r3, #160	; 0xa0
 80040d0:	d902      	bls.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040d2:	2302      	movs	r3, #2
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e013      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d8:	2301      	movs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e010      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d902      	bls.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040e4:	2303      	movs	r3, #3
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e00a      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d102      	bne.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040f0:	2302      	movs	r3, #2
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e004      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d101      	bne.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040fc:	2301      	movs	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 0207 	bic.w	r2, r3, #7
 8004108:	4909      	ldr	r1, [pc, #36]	; (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	40022000 	.word	0x40022000

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004140:	2300      	movs	r3, #0
 8004142:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d041      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004158:	d02a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800415a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800415e:	d824      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004164:	d008      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004166:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800416a:	d81e      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004174:	d010      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004176:	e018      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004178:	4b86      	ldr	r3, [pc, #536]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a85      	ldr	r2, [pc, #532]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004184:	e015      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 facb 	bl	8004728 <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004196:	e00c      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3320      	adds	r3, #32
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fbb6 	bl	8004910 <RCCEx_PLLSAI2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	74fb      	strb	r3, [r7, #19]
      break;
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b8:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c6:	4973      	ldr	r1, [pc, #460]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041ce:	e001      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d041      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041e8:	d02a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041ee:	d824      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f4:	d008      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041fa:	d81e      	bhi.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004204:	d010      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004206:	e018      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004208:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4a61      	ldr	r2, [pc, #388]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004214:	e015      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fa83 	bl	8004728 <RCCEx_PLLSAI1_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004226:	e00c      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3320      	adds	r3, #32
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fb6e 	bl	8004910 <RCCEx_PLLSAI2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	74fb      	strb	r3, [r7, #19]
      break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004248:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004256:	494f      	ldr	r1, [pc, #316]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800425e:	e001      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80a0 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4a40      	ldr	r2, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6593      	str	r3, [r2, #88]	; 0x58
 8004298:	4b3e      	ldr	r3, [pc, #248]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a4:	2301      	movs	r3, #1
 80042a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a8:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b4:	f7fe f8bc 	bl	8002430 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ba:	e009      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042bc:	f7fe f8b8 	bl	8002430 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d902      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	74fb      	strb	r3, [r7, #19]
        break;
 80042ce:	e005      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042d0:	4b31      	ldr	r3, [pc, #196]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ef      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d15c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e2:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01f      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d019      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004300:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800430c:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	4a20      	ldr	r2, [pc, #128]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d016      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fe f877 	bl	8002430 <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004344:	e00b      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fe f873 	bl	8002430 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	74fb      	strb	r3, [r7, #19]
            break;
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ec      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004382:	4904      	ldr	r1, [pc, #16]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800438a:	e009      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a0:	7c7b      	ldrb	r3, [r7, #17]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4b9e      	ldr	r3, [pc, #632]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4a9d      	ldr	r2, [pc, #628]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4b98      	ldr	r3, [pc, #608]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	4994      	ldr	r1, [pc, #592]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e0:	4b8f      	ldr	r3, [pc, #572]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	498c      	ldr	r1, [pc, #560]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004402:	4b87      	ldr	r3, [pc, #540]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	4983      	ldr	r1, [pc, #524]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004424:	4b7e      	ldr	r3, [pc, #504]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	497b      	ldr	r1, [pc, #492]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004446:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	4972      	ldr	r1, [pc, #456]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004476:	496a      	ldr	r1, [pc, #424]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	4961      	ldr	r1, [pc, #388]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044ac:	4b5c      	ldr	r3, [pc, #368]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	4959      	ldr	r1, [pc, #356]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	4950      	ldr	r1, [pc, #320]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	4948      	ldr	r1, [pc, #288]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	493f      	ldr	r1, [pc, #252]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d028      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004542:	4937      	ldr	r1, [pc, #220]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004552:	d106      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004554:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a31      	ldr	r2, [pc, #196]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455e:	60d3      	str	r3, [r2, #12]
 8004560:	e011      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800456a:	d10c      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f8d8 	bl	8004728 <RCCEx_PLLSAI1_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d028      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	491f      	ldr	r1, [pc, #124]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b0:	d106      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b2:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045bc:	60d3      	str	r3, [r2, #12]
 80045be:	e011      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3304      	adds	r3, #4
 80045ce:	2101      	movs	r1, #1
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f8a9 	bl	8004728 <RCCEx_PLLSAI1_Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02b      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	4908      	ldr	r1, [pc, #32]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800460e:	d109      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a02      	ldr	r2, [pc, #8]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461a:	60d3      	str	r3, [r2, #12]
 800461c:	e014      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f877 	bl	8004728 <RCCEx_PLLSAI1_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02f      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004654:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004662:	4928      	ldr	r1, [pc, #160]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004672:	d10d      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f854 	bl	8004728 <RCCEx_PLLSAI1_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d014      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	74bb      	strb	r3, [r7, #18]
 800468e:	e011      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3320      	adds	r3, #32
 800469e:	2102      	movs	r1, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 f935 	bl	8004910 <RCCEx_PLLSAI2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ce:	490d      	ldr	r1, [pc, #52]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f2:	4904      	ldr	r1, [pc, #16]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a04      	ldr	r2, [pc, #16]	; (8004724 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40021000 	.word	0x40021000

08004728 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004736:	4b75      	ldr	r3, [pc, #468]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004742:	4b72      	ldr	r3, [pc, #456]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0203 	and.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d10d      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
       ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800475a:	4b6c      	ldr	r3, [pc, #432]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	091b      	lsrs	r3, r3, #4
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
       ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d047      	beq.n	80047fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
 8004772:	e044      	b.n	80047fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d018      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0x86>
 800477c:	2b03      	cmp	r3, #3
 800477e:	d825      	bhi.n	80047cc <RCCEx_PLLSAI1_Config+0xa4>
 8004780:	2b01      	cmp	r3, #1
 8004782:	d002      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x62>
 8004784:	2b02      	cmp	r3, #2
 8004786:	d009      	beq.n	800479c <RCCEx_PLLSAI1_Config+0x74>
 8004788:	e020      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800478a:	4b60      	ldr	r3, [pc, #384]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d11d      	bne.n	80047d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479a:	e01a      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800479c:	4b5b      	ldr	r3, [pc, #364]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ac:	e013      	b.n	80047d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ae:	4b57      	ldr	r3, [pc, #348]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ba:	4b54      	ldr	r3, [pc, #336]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ca:	e006      	b.n	80047da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      break;
 80047d0:	e004      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047d2:	bf00      	nop
 80047d4:	e002      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047da:	bf00      	nop
    }

    if(status == HAL_OK)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10d      	bne.n	80047fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047e2:	4b4a      	ldr	r3, [pc, #296]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	430b      	orrs	r3, r1
 80047f8:	4944      	ldr	r1, [pc, #272]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d17d      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a40      	ldr	r2, [pc, #256]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800480a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800480e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004810:	f7fd fe0e 	bl	8002430 <HAL_GetTick>
 8004814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004816:	e009      	b.n	800482c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004818:	f7fd fe0a 	bl	8002430 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d902      	bls.n	800482c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	73fb      	strb	r3, [r7, #15]
        break;
 800482a:	e005      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ef      	bne.n	8004818 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d160      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d111      	bne.n	8004868 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004844:	4b31      	ldr	r3, [pc, #196]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800484c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6892      	ldr	r2, [r2, #8]
 8004854:	0211      	lsls	r1, r2, #8
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68d2      	ldr	r2, [r2, #12]
 800485a:	0912      	lsrs	r2, r2, #4
 800485c:	0452      	lsls	r2, r2, #17
 800485e:	430a      	orrs	r2, r1
 8004860:	492a      	ldr	r1, [pc, #168]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
 8004866:	e027      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d112      	bne.n	8004894 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004876:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	0211      	lsls	r1, r2, #8
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6912      	ldr	r2, [r2, #16]
 8004884:	0852      	lsrs	r2, r2, #1
 8004886:	3a01      	subs	r2, #1
 8004888:	0552      	lsls	r2, r2, #21
 800488a:	430a      	orrs	r2, r1
 800488c:	491f      	ldr	r1, [pc, #124]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	610b      	str	r3, [r1, #16]
 8004892:	e011      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800489c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6892      	ldr	r2, [r2, #8]
 80048a4:	0211      	lsls	r1, r2, #8
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6952      	ldr	r2, [r2, #20]
 80048aa:	0852      	lsrs	r2, r2, #1
 80048ac:	3a01      	subs	r2, #1
 80048ae:	0652      	lsls	r2, r2, #25
 80048b0:	430a      	orrs	r2, r1
 80048b2:	4916      	ldr	r1, [pc, #88]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fd fdb4 	bl	8002430 <HAL_GetTick>
 80048c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ca:	e009      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048cc:	f7fd fdb0 	bl	8002430 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	73fb      	strb	r3, [r7, #15]
          break;
 80048de:	e005      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	4904      	ldr	r1, [pc, #16]	; (800490c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000

08004910 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800491e:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d018      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800492a:	4b67      	ldr	r3, [pc, #412]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0203 	and.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d10d      	bne.n	8004956 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
       ||
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004942:	4b61      	ldr	r3, [pc, #388]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
       ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d047      	beq.n	80049e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
 800495a:	e044      	b.n	80049e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d018      	beq.n	8004996 <RCCEx_PLLSAI2_Config+0x86>
 8004964:	2b03      	cmp	r3, #3
 8004966:	d825      	bhi.n	80049b4 <RCCEx_PLLSAI2_Config+0xa4>
 8004968:	2b01      	cmp	r3, #1
 800496a:	d002      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x62>
 800496c:	2b02      	cmp	r3, #2
 800496e:	d009      	beq.n	8004984 <RCCEx_PLLSAI2_Config+0x74>
 8004970:	e020      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004972:	4b55      	ldr	r3, [pc, #340]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11d      	bne.n	80049ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004982:	e01a      	b.n	80049ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004984:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d116      	bne.n	80049be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004994:	e013      	b.n	80049be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004996:	4b4c      	ldr	r3, [pc, #304]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049a2:	4b49      	ldr	r3, [pc, #292]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049b2:	e006      	b.n	80049c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      break;
 80049b8:	e004      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10d      	bne.n	80049e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6819      	ldr	r1, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	3b01      	subs	r3, #1
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	430b      	orrs	r3, r1
 80049e0:	4939      	ldr	r1, [pc, #228]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d167      	bne.n	8004abc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a35      	ldr	r2, [pc, #212]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f8:	f7fd fd1a 	bl	8002430 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049fe:	e009      	b.n	8004a14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a00:	f7fd fd16 	bl	8002430 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d902      	bls.n	8004a14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
        break;
 8004a12:	e005      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a14:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ef      	bne.n	8004a00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d14a      	bne.n	8004abc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a2c:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6892      	ldr	r2, [r2, #8]
 8004a3c:	0211      	lsls	r1, r2, #8
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68d2      	ldr	r2, [r2, #12]
 8004a42:	0912      	lsrs	r2, r2, #4
 8004a44:	0452      	lsls	r2, r2, #17
 8004a46:	430a      	orrs	r2, r1
 8004a48:	491f      	ldr	r1, [pc, #124]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	614b      	str	r3, [r1, #20]
 8004a4e:	e011      	b.n	8004a74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6892      	ldr	r2, [r2, #8]
 8004a60:	0211      	lsls	r1, r2, #8
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6912      	ldr	r2, [r2, #16]
 8004a66:	0852      	lsrs	r2, r2, #1
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0652      	lsls	r2, r2, #25
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4916      	ldr	r1, [pc, #88]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a74:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fd fcd6 	bl	8002430 <HAL_GetTick>
 8004a84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a86:	e009      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a88:	f7fd fcd2 	bl	8002430 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d902      	bls.n	8004a9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	73fb      	strb	r3, [r7, #15]
          break;
 8004a9a:	e005      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0ef      	beq.n	8004a88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4904      	ldr	r1, [pc, #16]	; (8004ac8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000

08004acc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e049      	b.n	8004b72 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	795b      	ldrb	r3, [r3, #5]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd f83c 	bl	8001b6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0204 	orr.w	r2, r2, #4
 8004b08:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d104      	bne.n	8004b22 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e027      	b.n	8004b72 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b22:	f7fd fc85 	bl	8002430 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b28:	e015      	b.n	8004b56 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b2a:	f7fd fc81 	bl	8002430 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d90e      	bls.n	8004b56 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e00d      	b.n	8004b72 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d0e2      	beq.n	8004b2a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	791b      	ldrb	r3, [r3, #4]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e044      	b.n	8004c1e <HAL_RNG_GenerateRandomNumber+0xa4>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	795b      	ldrb	r3, [r3, #5]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d133      	bne.n	8004c0c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004baa:	f7fd fc41 	bl	8002430 <HAL_GetTick>
 8004bae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004bb0:	e018      	b.n	8004be4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004bb2:	f7fd fc3d 	bl	8002430 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d911      	bls.n	8004be4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e01c      	b.n	8004c1e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d1df      	bne.n	8004bb2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	715a      	strb	r2, [r3, #5]
 8004c0a:	e004      	b.n	8004c16 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	711a      	strb	r2, [r3, #4]

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2210      	movs	r2, #16
 8004c48:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e01f      	b.n	8004c90 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01a      	beq.n	8004c90 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d108      	bne.n	8004c76 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e00c      	b.n	8004c90 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0208 	bic.w	r2, r2, #8
 8004c8e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10b      	bne.n	8004cae <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f837 	bl	8004d10 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004caa:	605a      	str	r2, [r3, #4]

    return;
 8004cac:	e022      	b.n	8004cf4 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0208 	bic.w	r2, r2, #8
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	795b      	ldrb	r3, [r3, #5]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d00b      	beq.n	8004cf4 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f803 	bl	8004cfa <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d079      	beq.n	8004e2a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc ff82 	bl	8001c54 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d058      	beq.n	8004e18 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22ca      	movs	r2, #202	; 0xca
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2253      	movs	r2, #83	; 0x53
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f880 	bl	8004e7c <RTC_EnterInitMode>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d127      	bne.n	8004dd6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d98:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68d2      	ldr	r2, [r2, #12]
 8004dc0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6919      	ldr	r1, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	041a      	lsls	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f884 	bl	8004ee4 <RTC_ExitInitMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d113      	bne.n	8004e0e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0203 	bic.w	r2, r2, #3
 8004df4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	22ff      	movs	r2, #255	; 0xff
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
 8004e16:	e001      	b.n	8004e1c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a0d      	ldr	r2, [pc, #52]	; (8004e78 <HAL_RTC_WaitForSynchro+0x44>)
 8004e42:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004e44:	f7fd faf4 	bl	8002430 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e4a:	e009      	b.n	8004e60 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e4c:	f7fd faf0 	bl	8002430 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5a:	d901      	bls.n	8004e60 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e007      	b.n	8004e70 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ee      	beq.n	8004e4c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0003ff5f 	.word	0x0003ff5f

08004e7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d120      	bne.n	8004ed8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ea0:	f7fd fac6 	bl	8002430 <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ea6:	e00d      	b.n	8004ec4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea8:	f7fd fac2 	bl	8002430 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb6:	d905      	bls.n	8004ec4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <RTC_EnterInitMode+0x5c>
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d1e7      	bne.n	8004ea8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10c      	bne.n	8004f22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff93 	bl	8004e34 <HAL_RTC_WaitForSynchro>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01e      	beq.n	8004f52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2203      	movs	r2, #3
 8004f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	e017      	b.n	8004f52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004f28:	f023 0320 	bic.w	r3, r3, #32
 8004f2c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ff80 	bl	8004e34 <HAL_RTC_WaitForSynchro>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <RTC_ExitInitMode+0x78>)
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40002800 	.word	0x40002800

08004f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e049      	b.n	8005006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc ffe0 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fb7a 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e049      	b.n	80050b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f841 	bl	80050bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fb23 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_TIM_PWM_Start+0x24>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e03c      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d109      	bne.n	800510e <HAL_TIM_PWM_Start+0x3e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e02f      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d109      	bne.n	8005128 <HAL_TIM_PWM_Start+0x58>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e022      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d109      	bne.n	8005142 <HAL_TIM_PWM_Start+0x72>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	e015      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b10      	cmp	r3, #16
 8005146:	d109      	bne.n	800515c <HAL_TIM_PWM_Start+0x8c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x9e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	bf14      	ite	ne
 8005168:	2301      	movne	r3, #1
 800516a:	2300      	moveq	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e09c      	b.n	80052b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xb6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	e023      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xc6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	e01b      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xd6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e013      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b0c      	cmp	r3, #12
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xe6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b4:	e00b      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xf6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c4:	e003      	b.n	80051ce <HAL_TIM_PWM_Start+0xfe>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fe68 	bl	8005eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a35      	ldr	r2, [pc, #212]	; (80052b8 <HAL_TIM_PWM_Start+0x1e8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a34      	ldr	r2, [pc, #208]	; (80052bc <HAL_TIM_PWM_Start+0x1ec>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a32      	ldr	r2, [pc, #200]	; (80052c0 <HAL_TIM_PWM_Start+0x1f0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a31      	ldr	r2, [pc, #196]	; (80052c4 <HAL_TIM_PWM_Start+0x1f4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_TIM_PWM_Start+0x13e>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <HAL_TIM_PWM_Start+0x1f8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_TIM_PWM_Start+0x142>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <HAL_TIM_PWM_Start+0x144>
 8005212:	2300      	movs	r3, #0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005226:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a22      	ldr	r2, [pc, #136]	; (80052b8 <HAL_TIM_PWM_Start+0x1e8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d018      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_TIM_PWM_Start+0x1fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a21      	ldr	r2, [pc, #132]	; (80052d0 <HAL_TIM_PWM_Start+0x200>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_TIM_PWM_Start+0x204>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <HAL_TIM_PWM_Start+0x1ec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Start+0x19e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <HAL_TIM_PWM_Start+0x1f0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d115      	bne.n	800529a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_TIM_PWM_Start+0x208>)
 8005276:	4013      	ands	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b06      	cmp	r3, #6
 800527e:	d015      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005286:	d011      	beq.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	e008      	b.n	80052ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e000      	b.n	80052ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	00010007 	.word	0x00010007

080052dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ff      	b.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b14      	cmp	r3, #20
 8005306:	f200 80f0 	bhi.w	80054ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800530a:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005365 	.word	0x08005365
 8005314:	080054eb 	.word	0x080054eb
 8005318:	080054eb 	.word	0x080054eb
 800531c:	080054eb 	.word	0x080054eb
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080054eb 	.word	0x080054eb
 8005328:	080054eb 	.word	0x080054eb
 800532c:	080054eb 	.word	0x080054eb
 8005330:	080053e7 	.word	0x080053e7
 8005334:	080054eb 	.word	0x080054eb
 8005338:	080054eb 	.word	0x080054eb
 800533c:	080054eb 	.word	0x080054eb
 8005340:	08005427 	.word	0x08005427
 8005344:	080054eb 	.word	0x080054eb
 8005348:	080054eb 	.word	0x080054eb
 800534c:	080054eb 	.word	0x080054eb
 8005350:	08005469 	.word	0x08005469
 8005354:	080054eb 	.word	0x080054eb
 8005358:	080054eb 	.word	0x080054eb
 800535c:	080054eb 	.word	0x080054eb
 8005360:	080054a9 	.word	0x080054a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fa2e 	bl	80057cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e0a5      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa9e 	bl	80058ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e084      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fb07 	bl	8005a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e064      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fb6f 	bl	8005b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e043      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fbb8 	bl	8005be4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054a6:	e023      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fbfc 	bl	8005cac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop

08005504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIM_ConfigClockSource+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e0b6      	b.n	800568e <HAL_TIM_ConfigClockSource+0x18a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d03e      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0xd8>
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	f200 8087 	bhi.w	8005674 <HAL_TIM_ConfigClockSource+0x170>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	f000 8086 	beq.w	800567a <HAL_TIM_ConfigClockSource+0x176>
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d87f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 8005574:	2b70      	cmp	r3, #112	; 0x70
 8005576:	d01a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xaa>
 8005578:	2b70      	cmp	r3, #112	; 0x70
 800557a:	d87b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 800557c:	2b60      	cmp	r3, #96	; 0x60
 800557e:	d050      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0x11e>
 8005580:	2b60      	cmp	r3, #96	; 0x60
 8005582:	d877      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d03c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0xfe>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d873      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d058      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0x13e>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d86f      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d064      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15e>
 8005598:	2b30      	cmp	r3, #48	; 0x30
 800559a:	d86b      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d060      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15e>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d867      	bhi.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d05c      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15e>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d05a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x15e>
 80055ac:	e062      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055be:	f000 fc55 	bl	8005e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	609a      	str	r2, [r3, #8]
      break;
 80055da:	e04f      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ec:	f000 fc3e 	bl	8005e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fe:	609a      	str	r2, [r3, #8]
      break;
 8005600:	e03c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	461a      	mov	r2, r3
 8005610:	f000 fbb2 	bl	8005d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2150      	movs	r1, #80	; 0x50
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fc0b 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005620:	e02c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800562e:	461a      	mov	r2, r3
 8005630:	f000 fbd1 	bl	8005dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2160      	movs	r1, #96	; 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fbfb 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005640:	e01c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564e:	461a      	mov	r2, r3
 8005650:	f000 fb92 	bl	8005d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2140      	movs	r1, #64	; 0x40
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fbeb 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005660:	e00c      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 fbe2 	bl	8005e36 <TIM_ITRx_SetConfig>
      break;
 8005672:	e003      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	e000      	b.n	800567c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800567a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a40      	ldr	r2, [pc, #256]	; (80057ac <TIM_Base_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d00f      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3d      	ldr	r2, [pc, #244]	; (80057b0 <TIM_Base_SetConfig+0x118>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00b      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3c      	ldr	r2, [pc, #240]	; (80057b4 <TIM_Base_SetConfig+0x11c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3b      	ldr	r2, [pc, #236]	; (80057b8 <TIM_Base_SetConfig+0x120>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <TIM_Base_SetConfig+0x124>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d108      	bne.n	80056ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <TIM_Base_SetConfig+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <TIM_Base_SetConfig+0x118>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2b      	ldr	r2, [pc, #172]	; (80057b4 <TIM_Base_SetConfig+0x11c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <TIM_Base_SetConfig+0x120>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a29      	ldr	r2, [pc, #164]	; (80057bc <TIM_Base_SetConfig+0x124>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <TIM_Base_SetConfig+0x128>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a27      	ldr	r2, [pc, #156]	; (80057c4 <TIM_Base_SetConfig+0x12c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <TIM_Base_SetConfig+0x130>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a10      	ldr	r2, [pc, #64]	; (80057ac <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00f      	beq.n	8005790 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00b      	beq.n	8005790 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <TIM_Base_SetConfig+0x128>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <TIM_Base_SetConfig+0x12c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_Base_SetConfig+0xf8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <TIM_Base_SetConfig+0x130>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	615a      	str	r2, [r3, #20]
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0201 	bic.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 0302 	bic.w	r3, r3, #2
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <TIM_OC1_SetConfig+0x10c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00f      	beq.n	800584c <TIM_OC1_SetConfig+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2b      	ldr	r2, [pc, #172]	; (80058dc <TIM_OC1_SetConfig+0x110>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00b      	beq.n	800584c <TIM_OC1_SetConfig+0x80>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <TIM_OC1_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_OC1_SetConfig+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a29      	ldr	r2, [pc, #164]	; (80058e4 <TIM_OC1_SetConfig+0x118>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_OC1_SetConfig+0x80>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a28      	ldr	r2, [pc, #160]	; (80058e8 <TIM_OC1_SetConfig+0x11c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10c      	bne.n	8005866 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0308 	bic.w	r3, r3, #8
 8005852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <TIM_OC1_SetConfig+0x10c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_OC1_SetConfig+0xc2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <TIM_OC1_SetConfig+0x110>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_OC1_SetConfig+0xc2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <TIM_OC1_SetConfig+0x114>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_OC1_SetConfig+0xc2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <TIM_OC1_SetConfig+0x118>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_OC1_SetConfig+0xc2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <TIM_OC1_SetConfig+0x11c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d111      	bne.n	80058b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40013400 	.word	0x40013400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40014400 	.word	0x40014400
 80058e8:	40014800 	.word	0x40014800

080058ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f023 0210 	bic.w	r2, r3, #16
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0320 	bic.w	r3, r3, #32
 800593a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a28      	ldr	r2, [pc, #160]	; (80059ec <TIM_OC2_SetConfig+0x100>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC2_SetConfig+0x6c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a27      	ldr	r2, [pc, #156]	; (80059f0 <TIM_OC2_SetConfig+0x104>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10d      	bne.n	8005974 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <TIM_OC2_SetConfig+0x100>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00f      	beq.n	800599c <TIM_OC2_SetConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <TIM_OC2_SetConfig+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_OC2_SetConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <TIM_OC2_SetConfig+0x108>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_OC2_SetConfig+0xb0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <TIM_OC2_SetConfig+0x10c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC2_SetConfig+0xb0>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a19      	ldr	r2, [pc, #100]	; (80059fc <TIM_OC2_SetConfig+0x110>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d113      	bne.n	80059c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	621a      	str	r2, [r3, #32]
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <TIM_OC3_SetConfig+0xfc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d003      	beq.n	8005a6a <TIM_OC3_SetConfig+0x6a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a26      	ldr	r2, [pc, #152]	; (8005b00 <TIM_OC3_SetConfig+0x100>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d10d      	bne.n	8005a86 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <TIM_OC3_SetConfig+0xfc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00f      	beq.n	8005aae <TIM_OC3_SetConfig+0xae>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <TIM_OC3_SetConfig+0x100>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00b      	beq.n	8005aae <TIM_OC3_SetConfig+0xae>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a1a      	ldr	r2, [pc, #104]	; (8005b04 <TIM_OC3_SetConfig+0x104>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <TIM_OC3_SetConfig+0xae>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <TIM_OC3_SetConfig+0x108>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <TIM_OC3_SetConfig+0xae>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <TIM_OC3_SetConfig+0x10c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d113      	bne.n	8005ad6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800

08005b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	031b      	lsls	r3, r3, #12
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <TIM_OC4_SetConfig+0xc0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <TIM_OC4_SetConfig+0x84>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <TIM_OC4_SetConfig+0xc4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_OC4_SetConfig+0x84>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <TIM_OC4_SetConfig+0xc8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_OC4_SetConfig+0x84>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <TIM_OC4_SetConfig+0xcc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC4_SetConfig+0x84>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <TIM_OC4_SetConfig+0xd0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	019b      	lsls	r3, r3, #6
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800

08005be4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <TIM_OC5_SetConfig+0xb4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_OC5_SetConfig+0x7a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a16      	ldr	r2, [pc, #88]	; (8005c9c <TIM_OC5_SetConfig+0xb8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_OC5_SetConfig+0x7a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <TIM_OC5_SetConfig+0xbc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_OC5_SetConfig+0x7a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <TIM_OC5_SetConfig+0xc0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC5_SetConfig+0x7a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <TIM_OC5_SetConfig+0xc4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d109      	bne.n	8005c72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	051b      	lsls	r3, r3, #20
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <TIM_OC6_SetConfig+0xb8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_OC6_SetConfig+0x7c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC6_SetConfig+0xbc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_OC6_SetConfig+0x7c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <TIM_OC6_SetConfig+0xc0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_OC6_SetConfig+0x7c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <TIM_OC6_SetConfig+0xc4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC6_SetConfig+0x7c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <TIM_OC6_SetConfig+0xc8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d109      	bne.n	8005d3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 030a 	bic.w	r3, r3, #10
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b087      	sub	sp, #28
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	f023 0210 	bic.w	r2, r3, #16
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	621a      	str	r2, [r3, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f043 0307 	orr.w	r3, r3, #7
 8005e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	021a      	lsls	r2, r3, #8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	609a      	str	r2, [r3, #8]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 031f 	and.w	r3, r3, #31
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1a      	ldr	r2, [r3, #32]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	401a      	ands	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a1a      	ldr	r2, [r3, #32]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e068      	b.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2e      	ldr	r2, [pc, #184]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d108      	bne.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1a      	ldr	r2, [pc, #104]	; (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a14      	ldr	r2, [pc, #80]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40014000 	.word	0x40014000

08006008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e040      	b.n	800609c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fc f870 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2224      	movs	r2, #36	; 0x24
 8006034:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0201 	bic.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fe8a 	bl	8006d68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fbcf 	bl	80067f8 <UART_SetConfig>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e01b      	b.n	800609c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 ff09 	bl	8006eac <UART_CheckIdleState>
 800609a:	4603      	mov	r3, r0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b08b      	sub	sp, #44	; 0x2c
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d147      	bne.n	800614a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_UART_Transmit_IT+0x22>
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e040      	b.n	800614c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	88fa      	ldrh	r2, [r7, #6]
 80060d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2221      	movs	r2, #33	; 0x21
 80060f2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fc:	d107      	bne.n	800610e <HAL_UART_Transmit_IT+0x6a>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <HAL_UART_Transmit_IT+0xb4>)
 800610a:	66da      	str	r2, [r3, #108]	; 0x6c
 800610c:	e002      	b.n	8006114 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a12      	ldr	r2, [pc, #72]	; (800615c <HAL_UART_Transmit_IT+0xb8>)
 8006112:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	613b      	str	r3, [r7, #16]
   return(result);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	623b      	str	r3, [r7, #32]
 8006134:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	69f9      	ldr	r1, [r7, #28]
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	372c      	adds	r7, #44	; 0x2c
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	08007405 	.word	0x08007405
 800615c:	0800734d 	.word	0x0800734d

08006160 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006174:	2b20      	cmp	r3, #32
 8006176:	d137      	bne.n	80061e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_UART_Receive_IT+0x24>
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e030      	b.n	80061ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a18      	ldr	r2, [pc, #96]	; (80061f4 <HAL_UART_Receive_IT+0x94>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d01f      	beq.n	80061d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	613b      	str	r3, [r7, #16]
   return(result);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	461a      	mov	r2, r3
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 ff74 	bl	80070cc <UART_Start_Receive_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	e000      	b.n	80061ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40008000 	.word	0x40008000

080061f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0ba      	sub	sp, #232	; 0xe8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800621e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006222:	f640 030f 	movw	r3, #2063	; 0x80f
 8006226:	4013      	ands	r3, r2
 8006228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800622c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d115      	bne.n	8006260 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00f      	beq.n	8006260 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 82ae 	beq.w	80067b2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
      }
      return;
 800625e:	e2a8      	b.n	80067b2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8117 	beq.w	8006498 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800627a:	4b85      	ldr	r3, [pc, #532]	; (8006490 <HAL_UART_IRQHandler+0x298>)
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 810a 	beq.w	8006498 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_UART_IRQHandler+0xbc>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <HAL_UART_IRQHandler+0xec>
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2202      	movs	r2, #2
 80062d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062da:	f043 0204 	orr.w	r2, r3, #4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d011      	beq.n	8006314 <HAL_UART_IRQHandler+0x11c>
 80062f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2204      	movs	r2, #4
 8006302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800630a:	f043 0202 	orr.w	r2, r3, #2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d017      	beq.n	8006350 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800632c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006330:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_UART_IRQHandler+0x18a>
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00c      	beq.n	8006382 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8214 	beq.w	80067b6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800639a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d005      	beq.n	80063da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d04f      	beq.n	800647a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 ff3c 	bl	8007258 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	d141      	bne.n	8006472 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800641a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800641e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006426:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1d9      	bne.n	80063ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <HAL_UART_IRQHandler+0x29c>)
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644e:	4618      	mov	r0, r3
 8006450:	f7fc f96d 	bl	800272e <HAL_DMA_Abort_IT>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d017      	beq.n	800648a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006468:	e00f      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9ae 	bl	80067cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00b      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9aa 	bl	80067cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e007      	b.n	800648a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9a6 	bl	80067cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006488:	e195      	b.n	80067b6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648a:	bf00      	nop
    return;
 800648c:	e193      	b.n	80067b6 <HAL_UART_IRQHandler+0x5be>
 800648e:	bf00      	nop
 8006490:	04000120 	.word	0x04000120
 8006494:	08007321 	.word	0x08007321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649c:	2b01      	cmp	r3, #1
 800649e:	f040 814e 	bne.w	800673e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8147 	beq.w	800673e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8140 	beq.w	800673e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2210      	movs	r2, #16
 80064c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	f040 80b8 	bne.w	8006646 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8167 	beq.w	80067ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f080 815f 	bcs.w	80067ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006502:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	f040 8086 	bne.w	8006624 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800652c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006546:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800654e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800655a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1da      	bne.n	8006518 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3308      	adds	r3, #8
 8006582:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006586:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800658a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800658e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e1      	bne.n	8006562 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e3      	bne.n	800659e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065f4:	f023 0310 	bic.w	r3, r3, #16
 80065f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006606:	65bb      	str	r3, [r7, #88]	; 0x58
 8006608:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800660c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e4      	bne.n	80065e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661e:	4618      	mov	r0, r3
 8006620:	f7fc f847 	bl	80026b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006636:	b29b      	uxth	r3, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8ce 	bl	80067e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006644:	e0b9      	b.n	80067ba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006652:	b29b      	uxth	r3, r3
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80ab 	beq.w	80067be <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80a6 	beq.w	80067be <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006694:	647b      	str	r3, [r7, #68]	; 0x44
 8006696:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800669a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e4      	bne.n	8006672 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	623b      	str	r3, [r7, #32]
   return(result);
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066cc:	633a      	str	r2, [r7, #48]	; 0x30
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e3      	bne.n	80066a8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	60fb      	str	r3, [r7, #12]
   return(result);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	617b      	str	r3, [r7, #20]
   return(result);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e4      	bne.n	80066f4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f852 	bl	80067e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800673c:	e03f      	b.n	80067be <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800673e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00e      	beq.n	8006768 <HAL_UART_IRQHandler+0x570>
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800675e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 f895 	bl	8007890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006766:	e02d      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00e      	beq.n	8006792 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01c      	beq.n	80067c2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
    }
    return;
 8006790:	e017      	b.n	80067c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d012      	beq.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
 800679e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00c      	beq.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fe8a 	bl	80074c4 <UART_EndTransmit_IT>
    return;
 80067b0:	e008      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067b2:	bf00      	nop
 80067b4:	e006      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80067b6:	bf00      	nop
 80067b8:	e004      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067ba:	bf00      	nop
 80067bc:	e002      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80067be:	bf00      	nop
 80067c0:	e000      	b.n	80067c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80067c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067c4:	37e8      	adds	r7, #232	; 0xe8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067fc:	b08a      	sub	sp, #40	; 0x28
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	431a      	orrs	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4313      	orrs	r3, r2
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4ba4      	ldr	r3, [pc, #656]	; (8006ab8 <UART_SetConfig+0x2c0>)
 8006828:	4013      	ands	r3, r2
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006830:	430b      	orrs	r3, r1
 8006832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a99      	ldr	r2, [pc, #612]	; (8006abc <UART_SetConfig+0x2c4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d004      	beq.n	8006864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	4313      	orrs	r3, r2
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a90      	ldr	r2, [pc, #576]	; (8006ac0 <UART_SetConfig+0x2c8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d126      	bne.n	80068d0 <UART_SetConfig+0xd8>
 8006882:	4b90      	ldr	r3, [pc, #576]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	2b03      	cmp	r3, #3
 800688e:	d81b      	bhi.n	80068c8 <UART_SetConfig+0xd0>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0xa0>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068b9 	.word	0x080068b9
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e116      	b.n	8006ade <UART_SetConfig+0x2e6>
 80068b0:	2302      	movs	r3, #2
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b6:	e112      	b.n	8006ade <UART_SetConfig+0x2e6>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e10e      	b.n	8006ade <UART_SetConfig+0x2e6>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	e10a      	b.n	8006ade <UART_SetConfig+0x2e6>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ce:	e106      	b.n	8006ade <UART_SetConfig+0x2e6>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a7c      	ldr	r2, [pc, #496]	; (8006ac8 <UART_SetConfig+0x2d0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d138      	bne.n	800694c <UART_SetConfig+0x154>
 80068da:	4b7a      	ldr	r3, [pc, #488]	; (8006ac4 <UART_SetConfig+0x2cc>)
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b0c      	cmp	r3, #12
 80068e6:	d82d      	bhi.n	8006944 <UART_SetConfig+0x14c>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <UART_SetConfig+0xf8>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006925 	.word	0x08006925
 80068f4:	08006945 	.word	0x08006945
 80068f8:	08006945 	.word	0x08006945
 80068fc:	08006945 	.word	0x08006945
 8006900:	08006935 	.word	0x08006935
 8006904:	08006945 	.word	0x08006945
 8006908:	08006945 	.word	0x08006945
 800690c:	08006945 	.word	0x08006945
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006945 	.word	0x08006945
 8006918:	08006945 	.word	0x08006945
 800691c:	08006945 	.word	0x08006945
 8006920:	0800693d 	.word	0x0800693d
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e0d8      	b.n	8006ade <UART_SetConfig+0x2e6>
 800692c:	2302      	movs	r3, #2
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006932:	e0d4      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006934:	2304      	movs	r3, #4
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e0d0      	b.n	8006ade <UART_SetConfig+0x2e6>
 800693c:	2308      	movs	r3, #8
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006942:	e0cc      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006944:	2310      	movs	r3, #16
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e0c8      	b.n	8006ade <UART_SetConfig+0x2e6>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a5e      	ldr	r2, [pc, #376]	; (8006acc <UART_SetConfig+0x2d4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d125      	bne.n	80069a2 <UART_SetConfig+0x1aa>
 8006956:	4b5b      	ldr	r3, [pc, #364]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d016      	beq.n	8006992 <UART_SetConfig+0x19a>
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d818      	bhi.n	800699a <UART_SetConfig+0x1a2>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d00a      	beq.n	8006982 <UART_SetConfig+0x18a>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d814      	bhi.n	800699a <UART_SetConfig+0x1a2>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <UART_SetConfig+0x182>
 8006974:	2b10      	cmp	r3, #16
 8006976:	d008      	beq.n	800698a <UART_SetConfig+0x192>
 8006978:	e00f      	b.n	800699a <UART_SetConfig+0x1a2>
 800697a:	2300      	movs	r3, #0
 800697c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006980:	e0ad      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006982:	2302      	movs	r3, #2
 8006984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006988:	e0a9      	b.n	8006ade <UART_SetConfig+0x2e6>
 800698a:	2304      	movs	r3, #4
 800698c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006990:	e0a5      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006992:	2308      	movs	r3, #8
 8006994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006998:	e0a1      	b.n	8006ade <UART_SetConfig+0x2e6>
 800699a:	2310      	movs	r3, #16
 800699c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a0:	e09d      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a4a      	ldr	r2, [pc, #296]	; (8006ad0 <UART_SetConfig+0x2d8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d125      	bne.n	80069f8 <UART_SetConfig+0x200>
 80069ac:	4b45      	ldr	r3, [pc, #276]	; (8006ac4 <UART_SetConfig+0x2cc>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069b6:	2bc0      	cmp	r3, #192	; 0xc0
 80069b8:	d016      	beq.n	80069e8 <UART_SetConfig+0x1f0>
 80069ba:	2bc0      	cmp	r3, #192	; 0xc0
 80069bc:	d818      	bhi.n	80069f0 <UART_SetConfig+0x1f8>
 80069be:	2b80      	cmp	r3, #128	; 0x80
 80069c0:	d00a      	beq.n	80069d8 <UART_SetConfig+0x1e0>
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d814      	bhi.n	80069f0 <UART_SetConfig+0x1f8>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <UART_SetConfig+0x1d8>
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d008      	beq.n	80069e0 <UART_SetConfig+0x1e8>
 80069ce:	e00f      	b.n	80069f0 <UART_SetConfig+0x1f8>
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e082      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069d8:	2302      	movs	r3, #2
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e07e      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e07a      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069e8:	2308      	movs	r3, #8
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e076      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e072      	b.n	8006ade <UART_SetConfig+0x2e6>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a35      	ldr	r2, [pc, #212]	; (8006ad4 <UART_SetConfig+0x2dc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d12a      	bne.n	8006a58 <UART_SetConfig+0x260>
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a10:	d01a      	beq.n	8006a48 <UART_SetConfig+0x250>
 8006a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a16:	d81b      	bhi.n	8006a50 <UART_SetConfig+0x258>
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d00c      	beq.n	8006a38 <UART_SetConfig+0x240>
 8006a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a22:	d815      	bhi.n	8006a50 <UART_SetConfig+0x258>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <UART_SetConfig+0x238>
 8006a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2c:	d008      	beq.n	8006a40 <UART_SetConfig+0x248>
 8006a2e:	e00f      	b.n	8006a50 <UART_SetConfig+0x258>
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a36:	e052      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3e:	e04e      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a40:	2304      	movs	r3, #4
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e04a      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a48:	2308      	movs	r3, #8
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4e:	e046      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a50:	2310      	movs	r3, #16
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a56:	e042      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a17      	ldr	r2, [pc, #92]	; (8006abc <UART_SetConfig+0x2c4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d13a      	bne.n	8006ad8 <UART_SetConfig+0x2e0>
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a70:	d01a      	beq.n	8006aa8 <UART_SetConfig+0x2b0>
 8006a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a76:	d81b      	bhi.n	8006ab0 <UART_SetConfig+0x2b8>
 8006a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7c:	d00c      	beq.n	8006a98 <UART_SetConfig+0x2a0>
 8006a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a82:	d815      	bhi.n	8006ab0 <UART_SetConfig+0x2b8>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <UART_SetConfig+0x298>
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8c:	d008      	beq.n	8006aa0 <UART_SetConfig+0x2a8>
 8006a8e:	e00f      	b.n	8006ab0 <UART_SetConfig+0x2b8>
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e022      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9e:	e01e      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa6:	e01a      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aae:	e016      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab6:	e012      	b.n	8006ade <UART_SetConfig+0x2e6>
 8006ab8:	efff69f3 	.word	0xefff69f3
 8006abc:	40008000 	.word	0x40008000
 8006ac0:	40013800 	.word	0x40013800
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	40004400 	.word	0x40004400
 8006acc:	40004800 	.word	0x40004800
 8006ad0:	40004c00 	.word	0x40004c00
 8006ad4:	40005000 	.word	0x40005000
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a9f      	ldr	r2, [pc, #636]	; (8006d60 <UART_SetConfig+0x568>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d17a      	bne.n	8006bde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d824      	bhi.n	8006b3a <UART_SetConfig+0x342>
 8006af0:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x300>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b3b 	.word	0x08006b3b
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b3b 	.word	0x08006b3b
 8006b08:	08006b2b 	.word	0x08006b2b
 8006b0c:	08006b3b 	.word	0x08006b3b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b3b 	.word	0x08006b3b
 8006b18:	08006b33 	.word	0x08006b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fd fa7e 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8006b20:	61f8      	str	r0, [r7, #28]
        break;
 8006b22:	e010      	b.n	8006b46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b24:	4b8f      	ldr	r3, [pc, #572]	; (8006d64 <UART_SetConfig+0x56c>)
 8006b26:	61fb      	str	r3, [r7, #28]
        break;
 8006b28:	e00d      	b.n	8006b46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fd f9df 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8006b2e:	61f8      	str	r0, [r7, #28]
        break;
 8006b30:	e009      	b.n	8006b46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e005      	b.n	8006b46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80fb 	beq.w	8006d44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	4413      	add	r3, r2
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d305      	bcc.n	8006b6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d903      	bls.n	8006b72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b70:	e0e8      	b.n	8006d44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2200      	movs	r2, #0
 8006b76:	461c      	mov	r4, r3
 8006b78:	4615      	mov	r5, r2
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	022b      	lsls	r3, r5, #8
 8006b84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b88:	0222      	lsls	r2, r4, #8
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	6849      	ldr	r1, [r1, #4]
 8006b8e:	0849      	lsrs	r1, r1, #1
 8006b90:	2000      	movs	r0, #0
 8006b92:	4688      	mov	r8, r1
 8006b94:	4681      	mov	r9, r0
 8006b96:	eb12 0a08 	adds.w	sl, r2, r8
 8006b9a:	eb43 0b09 	adc.w	fp, r3, r9
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bac:	4650      	mov	r0, sl
 8006bae:	4659      	mov	r1, fp
 8006bb0:	f7f9 fb76 	bl	80002a0 <__aeabi_uldivmod>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4613      	mov	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc2:	d308      	bcc.n	8006bd6 <UART_SetConfig+0x3de>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bca:	d204      	bcs.n	8006bd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	60da      	str	r2, [r3, #12]
 8006bd4:	e0b6      	b.n	8006d44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bdc:	e0b2      	b.n	8006d44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	d15e      	bne.n	8006ca6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d828      	bhi.n	8006c42 <UART_SetConfig+0x44a>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x400>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c43 	.word	0x08006c43
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	08006c43 	.word	0x08006c43
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd f9fe 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8006c20:	61f8      	str	r0, [r7, #28]
        break;
 8006c22:	e014      	b.n	8006c4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd fa10 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8006c28:	61f8      	str	r0, [r7, #28]
        break;
 8006c2a:	e010      	b.n	8006c4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b4d      	ldr	r3, [pc, #308]	; (8006d64 <UART_SetConfig+0x56c>)
 8006c2e:	61fb      	str	r3, [r7, #28]
        break;
 8006c30:	e00d      	b.n	8006c4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd f95b 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8006c36:	61f8      	str	r0, [r7, #28]
        break;
 8006c38:	e009      	b.n	8006c4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	61fb      	str	r3, [r7, #28]
        break;
 8006c40:	e005      	b.n	8006c4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d077      	beq.n	8006d44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	005a      	lsls	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	441a      	add	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d916      	bls.n	8006c9e <UART_SetConfig+0x4a6>
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c76:	d212      	bcs.n	8006c9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f023 030f 	bic.w	r3, r3, #15
 8006c80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	8afa      	ldrh	r2, [r7, #22]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e052      	b.n	8006d44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ca4:	e04e      	b.n	8006d44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d827      	bhi.n	8006cfe <UART_SetConfig+0x506>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x4bc>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cef 	.word	0x08006cef
 8006cc8:	08006cff 	.word	0x08006cff
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006cf7 	.word	0x08006cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd8:	f7fd f9a0 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8006cdc:	61f8      	str	r0, [r7, #28]
        break;
 8006cde:	e014      	b.n	8006d0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fd f9b2 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	61f8      	str	r0, [r7, #28]
        break;
 8006ce6:	e010      	b.n	8006d0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <UART_SetConfig+0x56c>)
 8006cea:	61fb      	str	r3, [r7, #28]
        break;
 8006cec:	e00d      	b.n	8006d0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fd f8fd 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8006cf2:	61f8      	str	r0, [r7, #28]
        break;
 8006cf4:	e009      	b.n	8006d0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfa:	61fb      	str	r3, [r7, #28]
        break;
 8006cfc:	e005      	b.n	8006d0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d08:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d019      	beq.n	8006d44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	085a      	lsrs	r2, r3, #1
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b0f      	cmp	r3, #15
 8006d28:	d909      	bls.n	8006d3e <UART_SetConfig+0x546>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d205      	bcs.n	8006d3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
 8006d3c:	e002      	b.n	8006d44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3728      	adds	r7, #40	; 0x28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d5e:	bf00      	nop
 8006d60:	40008000 	.word	0x40008000
 8006d64:	00f42400 	.word	0x00f42400

08006d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e66:	d10a      	bne.n	8006e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	; 0x60
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ebc:	f7fb fab8 	bl	8002430 <HAL_GetTick>
 8006ec0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12e      	bne.n	8006f2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f88c 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d021      	beq.n	8006f2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006efe:	653b      	str	r3, [r7, #80]	; 0x50
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f08:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e062      	b.n	8006ff4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d149      	bne.n	8006fd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f44:	2200      	movs	r2, #0
 8006f46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f856 	bl	8006ffc <UART_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d03c      	beq.n	8006fd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	623b      	str	r3, [r7, #32]
   return(result);
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	633b      	str	r3, [r7, #48]	; 0x30
 8006f76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e6      	bne.n	8006f56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa8:	61fa      	str	r2, [r7, #28]
 8006faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	69b9      	ldr	r1, [r7, #24]
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e011      	b.n	8006ff4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3758      	adds	r7, #88	; 0x58
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700c:	e049      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d045      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007016:	f7fb fa0b 	bl	8002430 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	429a      	cmp	r2, r3
 8007024:	d302      	bcc.n	800702c <UART_WaitOnFlagUntilTimeout+0x30>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e048      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d031      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b08      	cmp	r3, #8
 800704a:	d110      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2208      	movs	r2, #8
 8007052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f8ff 	bl	8007258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2208      	movs	r2, #8
 800705e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e029      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800707c:	d111      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f8e5 	bl	8007258 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e00f      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4013      	ands	r3, r2
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	bf0c      	ite	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	2300      	movne	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d0a6      	beq.n	800700e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b097      	sub	sp, #92	; 0x5c
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070fe:	d10e      	bne.n	800711e <UART_Start_Receive_IT+0x52>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <UART_Start_Receive_IT+0x48>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007112:	e02d      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	22ff      	movs	r2, #255	; 0xff
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800711c:	e028      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <UART_Start_Receive_IT+0x76>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d104      	bne.n	8007138 <UART_Start_Receive_IT+0x6c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007136:	e01b      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	227f      	movs	r2, #127	; 0x7f
 800713c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007140:	e016      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714a:	d10d      	bne.n	8007168 <UART_Start_Receive_IT+0x9c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <UART_Start_Receive_IT+0x92>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	227f      	movs	r2, #127	; 0x7f
 8007158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715c:	e008      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	223f      	movs	r2, #63	; 0x3f
 8007162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007166:	e003      	b.n	8007170 <UART_Start_Receive_IT+0xa4>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2222      	movs	r2, #34	; 0x22
 800717c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	657b      	str	r3, [r7, #84]	; 0x54
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80071a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e5      	bne.n	8007180 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071bc:	d107      	bne.n	80071ce <UART_Start_Receive_IT+0x102>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a21      	ldr	r2, [pc, #132]	; (8007250 <UART_Start_Receive_IT+0x184>)
 80071ca:	669a      	str	r2, [r3, #104]	; 0x68
 80071cc:	e002      	b.n	80071d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a20      	ldr	r2, [pc, #128]	; (8007254 <UART_Start_Receive_IT+0x188>)
 80071d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d019      	beq.n	8007210 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
 80071fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_Start_Receive_IT+0x110>
 800720e:	e018      	b.n	8007242 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	613b      	str	r3, [r7, #16]
   return(result);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	653b      	str	r3, [r7, #80]	; 0x50
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	69f9      	ldr	r1, [r7, #28]
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	61bb      	str	r3, [r7, #24]
   return(result);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e6      	bne.n	8007210 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	375c      	adds	r7, #92	; 0x5c
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	080076d5 	.word	0x080076d5
 8007254:	08007519 	.word	0x08007519

08007258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007258:	b480      	push	{r7}
 800725a:	b095      	sub	sp, #84	; 0x54
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727e:	643b      	str	r3, [r7, #64]	; 0x40
 8007280:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e6      	bne.n	8007260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d118      	bne.n	8007300 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60bb      	str	r3, [r7, #8]
   return(result);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	647b      	str	r3, [r7, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6979      	ldr	r1, [r7, #20]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007314:	bf00      	nop
 8007316:	3754      	adds	r7, #84	; 0x54
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fa44 	bl	80067cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800734c:	b480      	push	{r7}
 800734e:	b08f      	sub	sp, #60	; 0x3c
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007358:	2b21      	cmp	r3, #33	; 0x21
 800735a:	d14d      	bne.n	80073f8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d132      	bne.n	80073ce <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	61fb      	str	r3, [r7, #28]
   return(result);
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007388:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800738c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ae:	633b      	str	r3, [r7, #48]	; 0x30
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6979      	ldr	r1, [r7, #20]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	613b      	str	r3, [r7, #16]
   return(result);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073cc:	e014      	b.n	80073f8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	b292      	uxth	r2, r2
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073f8:	bf00      	nop
 80073fa:	373c      	adds	r7, #60	; 0x3c
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b091      	sub	sp, #68	; 0x44
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007410:	2b21      	cmp	r3, #33	; 0x21
 8007412:	d151      	bne.n	80074b8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d132      	bne.n	8007486 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	623b      	str	r3, [r7, #32]
   return(result);
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007434:	63bb      	str	r3, [r7, #56]	; 0x38
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	633b      	str	r3, [r7, #48]	; 0x30
 8007440:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e6      	bne.n	8007420 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	69b9      	ldr	r1, [r7, #24]
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	617b      	str	r3, [r7, #20]
   return(result);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007484:	e018      	b.n	80074b8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800748c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	b292      	uxth	r2, r2
 800749a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a0:	1c9a      	adds	r2, r3, #2
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074b8:	bf00      	nop
 80074ba:	3744      	adds	r7, #68	; 0x44
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	613b      	str	r3, [r7, #16]
   return(result);
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e6      	bne.n	80074cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 ffb4 	bl	8001478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007510:	bf00      	nop
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b09c      	sub	sp, #112	; 0x70
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007526:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007530:	2b22      	cmp	r3, #34	; 0x22
 8007532:	f040 80be 	bne.w	80076b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800753c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007540:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007544:	b2d9      	uxtb	r1, r3
 8007546:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	400a      	ands	r2, r1
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 80a3 	bne.w	80076c6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800758e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007594:	66bb      	str	r3, [r7, #104]	; 0x68
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800759e:	65bb      	str	r3, [r7, #88]	; 0x58
 80075a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e6      	bne.n	8007580 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	667b      	str	r3, [r7, #100]	; 0x64
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3308      	adds	r3, #8
 80075d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075d2:	647a      	str	r2, [r7, #68]	; 0x44
 80075d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e5      	bne.n	80075b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a34      	ldr	r2, [pc, #208]	; (80076d0 <UART_RxISR_8BIT+0x1b8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d01f      	beq.n	8007644 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d018      	beq.n	8007644 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	623b      	str	r3, [r7, #32]
   return(result);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007626:	663b      	str	r3, [r7, #96]	; 0x60
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007630:	633b      	str	r3, [r7, #48]	; 0x30
 8007632:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007648:	2b01      	cmp	r3, #1
 800764a:	d12e      	bne.n	80076aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 0310 	bic.w	r3, r3, #16
 8007666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69b9      	ldr	r1, [r7, #24]
 8007676:	69fa      	ldr	r2, [r7, #28]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	617b      	str	r3, [r7, #20]
   return(result);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e6      	bne.n	8007652 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b10      	cmp	r3, #16
 8007690:	d103      	bne.n	800769a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2210      	movs	r2, #16
 8007698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff f89c 	bl	80067e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a8:	e00d      	b.n	80076c6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7f9 fdcc 	bl	8001248 <HAL_UART_RxCpltCallback>
}
 80076b0:	e009      	b.n	80076c6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	8b1b      	ldrh	r3, [r3, #24]
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0208 	orr.w	r2, r2, #8
 80076c2:	b292      	uxth	r2, r2
 80076c4:	831a      	strh	r2, [r3, #24]
}
 80076c6:	bf00      	nop
 80076c8:	3770      	adds	r7, #112	; 0x70
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40008000 	.word	0x40008000

080076d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b09c      	sub	sp, #112	; 0x70
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ec:	2b22      	cmp	r3, #34	; 0x22
 80076ee:	f040 80be 	bne.w	800786e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007702:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800770a:	4013      	ands	r3, r2
 800770c:	b29a      	uxth	r2, r3
 800770e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007710:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 80a3 	bne.w	8007882 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800774a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007750:	667b      	str	r3, [r7, #100]	; 0x64
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800775a:	657b      	str	r3, [r7, #84]	; 0x54
 800775c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e6      	bne.n	800773c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	663b      	str	r3, [r7, #96]	; 0x60
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800778e:	643a      	str	r2, [r7, #64]	; 0x40
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a34      	ldr	r2, [pc, #208]	; (800788c <UART_RxISR_16BIT+0x1b8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d01f      	beq.n	8007800 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d018      	beq.n	8007800 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	e853 3f00 	ldrex	r3, [r3]
 80077da:	61fb      	str	r3, [r7, #28]
   return(result);
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e6      	bne.n	80077ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	2b01      	cmp	r3, #1
 8007806:	d12e      	bne.n	8007866 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60bb      	str	r3, [r7, #8]
   return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 0310 	bic.w	r3, r3, #16
 8007822:	65bb      	str	r3, [r7, #88]	; 0x58
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b10      	cmp	r3, #16
 800784c:	d103      	bne.n	8007856 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2210      	movs	r2, #16
 8007854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe ffbe 	bl	80067e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007864:	e00d      	b.n	8007882 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7f9 fcee 	bl	8001248 <HAL_UART_RxCpltCallback>
}
 800786c:	e009      	b.n	8007882 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	8b1b      	ldrh	r3, [r3, #24]
 8007874:	b29a      	uxth	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0208 	orr.w	r2, r2, #8
 800787e:	b292      	uxth	r2, r2
 8007880:	831a      	strh	r2, [r3, #24]
}
 8007882:	bf00      	nop
 8007884:	3770      	adds	r7, #112	; 0x70
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40008000 	.word	0x40008000

08007890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <siprintf>:
 80078a4:	b40e      	push	{r1, r2, r3}
 80078a6:	b500      	push	{lr}
 80078a8:	b09c      	sub	sp, #112	; 0x70
 80078aa:	ab1d      	add	r3, sp, #116	; 0x74
 80078ac:	9002      	str	r0, [sp, #8]
 80078ae:	9006      	str	r0, [sp, #24]
 80078b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <siprintf+0x38>)
 80078b6:	9107      	str	r1, [sp, #28]
 80078b8:	9104      	str	r1, [sp, #16]
 80078ba:	4909      	ldr	r1, [pc, #36]	; (80078e0 <siprintf+0x3c>)
 80078bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078c0:	9105      	str	r1, [sp, #20]
 80078c2:	6800      	ldr	r0, [r0, #0]
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	a902      	add	r1, sp, #8
 80078c8:	f000 f9c0 	bl	8007c4c <_svfiprintf_r>
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	b01c      	add	sp, #112	; 0x70
 80078d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d8:	b003      	add	sp, #12
 80078da:	4770      	bx	lr
 80078dc:	200000b8 	.word	0x200000b8
 80078e0:	ffff0208 	.word	0xffff0208

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <strncmp>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	b16a      	cbz	r2, 8007914 <strncmp+0x20>
 80078f8:	3901      	subs	r1, #1
 80078fa:	1884      	adds	r4, r0, r2
 80078fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007900:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007904:	429a      	cmp	r2, r3
 8007906:	d103      	bne.n	8007910 <strncmp+0x1c>
 8007908:	42a0      	cmp	r0, r4
 800790a:	d001      	beq.n	8007910 <strncmp+0x1c>
 800790c:	2a00      	cmp	r2, #0
 800790e:	d1f5      	bne.n	80078fc <strncmp+0x8>
 8007910:	1ad0      	subs	r0, r2, r3
 8007912:	bd10      	pop	{r4, pc}
 8007914:	4610      	mov	r0, r2
 8007916:	e7fc      	b.n	8007912 <strncmp+0x1e>

08007918 <strncpy>:
 8007918:	b510      	push	{r4, lr}
 800791a:	3901      	subs	r1, #1
 800791c:	4603      	mov	r3, r0
 800791e:	b132      	cbz	r2, 800792e <strncpy+0x16>
 8007920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007924:	f803 4b01 	strb.w	r4, [r3], #1
 8007928:	3a01      	subs	r2, #1
 800792a:	2c00      	cmp	r4, #0
 800792c:	d1f7      	bne.n	800791e <strncpy+0x6>
 800792e:	441a      	add	r2, r3
 8007930:	2100      	movs	r1, #0
 8007932:	4293      	cmp	r3, r2
 8007934:	d100      	bne.n	8007938 <strncpy+0x20>
 8007936:	bd10      	pop	{r4, pc}
 8007938:	f803 1b01 	strb.w	r1, [r3], #1
 800793c:	e7f9      	b.n	8007932 <strncpy+0x1a>
	...

08007940 <__errno>:
 8007940:	4b01      	ldr	r3, [pc, #4]	; (8007948 <__errno+0x8>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	200000b8 	.word	0x200000b8

0800794c <__libc_init_array>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	4d0d      	ldr	r5, [pc, #52]	; (8007984 <__libc_init_array+0x38>)
 8007950:	4c0d      	ldr	r4, [pc, #52]	; (8007988 <__libc_init_array+0x3c>)
 8007952:	1b64      	subs	r4, r4, r5
 8007954:	10a4      	asrs	r4, r4, #2
 8007956:	2600      	movs	r6, #0
 8007958:	42a6      	cmp	r6, r4
 800795a:	d109      	bne.n	8007970 <__libc_init_array+0x24>
 800795c:	4d0b      	ldr	r5, [pc, #44]	; (800798c <__libc_init_array+0x40>)
 800795e:	4c0c      	ldr	r4, [pc, #48]	; (8007990 <__libc_init_array+0x44>)
 8007960:	f000 fc72 	bl	8008248 <_init>
 8007964:	1b64      	subs	r4, r4, r5
 8007966:	10a4      	asrs	r4, r4, #2
 8007968:	2600      	movs	r6, #0
 800796a:	42a6      	cmp	r6, r4
 800796c:	d105      	bne.n	800797a <__libc_init_array+0x2e>
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	f855 3b04 	ldr.w	r3, [r5], #4
 8007974:	4798      	blx	r3
 8007976:	3601      	adds	r6, #1
 8007978:	e7ee      	b.n	8007958 <__libc_init_array+0xc>
 800797a:	f855 3b04 	ldr.w	r3, [r5], #4
 800797e:	4798      	blx	r3
 8007980:	3601      	adds	r6, #1
 8007982:	e7f2      	b.n	800796a <__libc_init_array+0x1e>
 8007984:	080083fc 	.word	0x080083fc
 8007988:	080083fc 	.word	0x080083fc
 800798c:	080083fc 	.word	0x080083fc
 8007990:	08008400 	.word	0x08008400

08007994 <__retarget_lock_acquire_recursive>:
 8007994:	4770      	bx	lr

08007996 <__retarget_lock_release_recursive>:
 8007996:	4770      	bx	lr

08007998 <strcpy>:
 8007998:	4603      	mov	r3, r0
 800799a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799e:	f803 2b01 	strb.w	r2, [r3], #1
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	d1f9      	bne.n	800799a <strcpy+0x2>
 80079a6:	4770      	bx	lr

080079a8 <_free_r>:
 80079a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079aa:	2900      	cmp	r1, #0
 80079ac:	d044      	beq.n	8007a38 <_free_r+0x90>
 80079ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b2:	9001      	str	r0, [sp, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f1a1 0404 	sub.w	r4, r1, #4
 80079ba:	bfb8      	it	lt
 80079bc:	18e4      	addlt	r4, r4, r3
 80079be:	f000 f8df 	bl	8007b80 <__malloc_lock>
 80079c2:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <_free_r+0x94>)
 80079c4:	9801      	ldr	r0, [sp, #4]
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	b933      	cbnz	r3, 80079d8 <_free_r+0x30>
 80079ca:	6063      	str	r3, [r4, #4]
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	b003      	add	sp, #12
 80079d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079d4:	f000 b8da 	b.w	8007b8c <__malloc_unlock>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d908      	bls.n	80079ee <_free_r+0x46>
 80079dc:	6825      	ldr	r5, [r4, #0]
 80079de:	1961      	adds	r1, r4, r5
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf01      	itttt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	1949      	addeq	r1, r1, r5
 80079ea:	6021      	streq	r1, [r4, #0]
 80079ec:	e7ed      	b.n	80079ca <_free_r+0x22>
 80079ee:	461a      	mov	r2, r3
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	b10b      	cbz	r3, 80079f8 <_free_r+0x50>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d9fa      	bls.n	80079ee <_free_r+0x46>
 80079f8:	6811      	ldr	r1, [r2, #0]
 80079fa:	1855      	adds	r5, r2, r1
 80079fc:	42a5      	cmp	r5, r4
 80079fe:	d10b      	bne.n	8007a18 <_free_r+0x70>
 8007a00:	6824      	ldr	r4, [r4, #0]
 8007a02:	4421      	add	r1, r4
 8007a04:	1854      	adds	r4, r2, r1
 8007a06:	42a3      	cmp	r3, r4
 8007a08:	6011      	str	r1, [r2, #0]
 8007a0a:	d1e0      	bne.n	80079ce <_free_r+0x26>
 8007a0c:	681c      	ldr	r4, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	6053      	str	r3, [r2, #4]
 8007a12:	440c      	add	r4, r1
 8007a14:	6014      	str	r4, [r2, #0]
 8007a16:	e7da      	b.n	80079ce <_free_r+0x26>
 8007a18:	d902      	bls.n	8007a20 <_free_r+0x78>
 8007a1a:	230c      	movs	r3, #12
 8007a1c:	6003      	str	r3, [r0, #0]
 8007a1e:	e7d6      	b.n	80079ce <_free_r+0x26>
 8007a20:	6825      	ldr	r5, [r4, #0]
 8007a22:	1961      	adds	r1, r4, r5
 8007a24:	428b      	cmp	r3, r1
 8007a26:	bf04      	itt	eq
 8007a28:	6819      	ldreq	r1, [r3, #0]
 8007a2a:	685b      	ldreq	r3, [r3, #4]
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	bf04      	itt	eq
 8007a30:	1949      	addeq	r1, r1, r5
 8007a32:	6021      	streq	r1, [r4, #0]
 8007a34:	6054      	str	r4, [r2, #4]
 8007a36:	e7ca      	b.n	80079ce <_free_r+0x26>
 8007a38:	b003      	add	sp, #12
 8007a3a:	bd30      	pop	{r4, r5, pc}
 8007a3c:	200006f8 	.word	0x200006f8

08007a40 <sbrk_aligned>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4e0e      	ldr	r6, [pc, #56]	; (8007a7c <sbrk_aligned+0x3c>)
 8007a44:	460c      	mov	r4, r1
 8007a46:	6831      	ldr	r1, [r6, #0]
 8007a48:	4605      	mov	r5, r0
 8007a4a:	b911      	cbnz	r1, 8007a52 <sbrk_aligned+0x12>
 8007a4c:	f000 fba6 	bl	800819c <_sbrk_r>
 8007a50:	6030      	str	r0, [r6, #0]
 8007a52:	4621      	mov	r1, r4
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 fba1 	bl	800819c <_sbrk_r>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d00a      	beq.n	8007a74 <sbrk_aligned+0x34>
 8007a5e:	1cc4      	adds	r4, r0, #3
 8007a60:	f024 0403 	bic.w	r4, r4, #3
 8007a64:	42a0      	cmp	r0, r4
 8007a66:	d007      	beq.n	8007a78 <sbrk_aligned+0x38>
 8007a68:	1a21      	subs	r1, r4, r0
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 fb96 	bl	800819c <_sbrk_r>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d101      	bne.n	8007a78 <sbrk_aligned+0x38>
 8007a74:	f04f 34ff 	mov.w	r4, #4294967295
 8007a78:	4620      	mov	r0, r4
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	200006fc 	.word	0x200006fc

08007a80 <_malloc_r>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	1ccd      	adds	r5, r1, #3
 8007a86:	f025 0503 	bic.w	r5, r5, #3
 8007a8a:	3508      	adds	r5, #8
 8007a8c:	2d0c      	cmp	r5, #12
 8007a8e:	bf38      	it	cc
 8007a90:	250c      	movcc	r5, #12
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	4607      	mov	r7, r0
 8007a96:	db01      	blt.n	8007a9c <_malloc_r+0x1c>
 8007a98:	42a9      	cmp	r1, r5
 8007a9a:	d905      	bls.n	8007aa8 <_malloc_r+0x28>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	2600      	movs	r6, #0
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b7c <_malloc_r+0xfc>
 8007aac:	f000 f868 	bl	8007b80 <__malloc_lock>
 8007ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab4:	461c      	mov	r4, r3
 8007ab6:	bb5c      	cbnz	r4, 8007b10 <_malloc_r+0x90>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4638      	mov	r0, r7
 8007abc:	f7ff ffc0 	bl	8007a40 <sbrk_aligned>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	d155      	bne.n	8007b72 <_malloc_r+0xf2>
 8007ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8007aca:	4626      	mov	r6, r4
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d145      	bne.n	8007b5c <_malloc_r+0xdc>
 8007ad0:	2c00      	cmp	r4, #0
 8007ad2:	d048      	beq.n	8007b66 <_malloc_r+0xe6>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4638      	mov	r0, r7
 8007ada:	eb04 0903 	add.w	r9, r4, r3
 8007ade:	f000 fb5d 	bl	800819c <_sbrk_r>
 8007ae2:	4581      	cmp	r9, r0
 8007ae4:	d13f      	bne.n	8007b66 <_malloc_r+0xe6>
 8007ae6:	6821      	ldr	r1, [r4, #0]
 8007ae8:	1a6d      	subs	r5, r5, r1
 8007aea:	4629      	mov	r1, r5
 8007aec:	4638      	mov	r0, r7
 8007aee:	f7ff ffa7 	bl	8007a40 <sbrk_aligned>
 8007af2:	3001      	adds	r0, #1
 8007af4:	d037      	beq.n	8007b66 <_malloc_r+0xe6>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	442b      	add	r3, r5
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	f8d8 3000 	ldr.w	r3, [r8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d038      	beq.n	8007b76 <_malloc_r+0xf6>
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	42a2      	cmp	r2, r4
 8007b08:	d12b      	bne.n	8007b62 <_malloc_r+0xe2>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	605a      	str	r2, [r3, #4]
 8007b0e:	e00f      	b.n	8007b30 <_malloc_r+0xb0>
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	1b52      	subs	r2, r2, r5
 8007b14:	d41f      	bmi.n	8007b56 <_malloc_r+0xd6>
 8007b16:	2a0b      	cmp	r2, #11
 8007b18:	d917      	bls.n	8007b4a <_malloc_r+0xca>
 8007b1a:	1961      	adds	r1, r4, r5
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	6025      	str	r5, [r4, #0]
 8007b20:	bf18      	it	ne
 8007b22:	6059      	strne	r1, [r3, #4]
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	bf08      	it	eq
 8007b28:	f8c8 1000 	streq.w	r1, [r8]
 8007b2c:	5162      	str	r2, [r4, r5]
 8007b2e:	604b      	str	r3, [r1, #4]
 8007b30:	4638      	mov	r0, r7
 8007b32:	f104 060b 	add.w	r6, r4, #11
 8007b36:	f000 f829 	bl	8007b8c <__malloc_unlock>
 8007b3a:	f026 0607 	bic.w	r6, r6, #7
 8007b3e:	1d23      	adds	r3, r4, #4
 8007b40:	1af2      	subs	r2, r6, r3
 8007b42:	d0ae      	beq.n	8007aa2 <_malloc_r+0x22>
 8007b44:	1b9b      	subs	r3, r3, r6
 8007b46:	50a3      	str	r3, [r4, r2]
 8007b48:	e7ab      	b.n	8007aa2 <_malloc_r+0x22>
 8007b4a:	42a3      	cmp	r3, r4
 8007b4c:	6862      	ldr	r2, [r4, #4]
 8007b4e:	d1dd      	bne.n	8007b0c <_malloc_r+0x8c>
 8007b50:	f8c8 2000 	str.w	r2, [r8]
 8007b54:	e7ec      	b.n	8007b30 <_malloc_r+0xb0>
 8007b56:	4623      	mov	r3, r4
 8007b58:	6864      	ldr	r4, [r4, #4]
 8007b5a:	e7ac      	b.n	8007ab6 <_malloc_r+0x36>
 8007b5c:	4634      	mov	r4, r6
 8007b5e:	6876      	ldr	r6, [r6, #4]
 8007b60:	e7b4      	b.n	8007acc <_malloc_r+0x4c>
 8007b62:	4613      	mov	r3, r2
 8007b64:	e7cc      	b.n	8007b00 <_malloc_r+0x80>
 8007b66:	230c      	movs	r3, #12
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f000 f80e 	bl	8007b8c <__malloc_unlock>
 8007b70:	e797      	b.n	8007aa2 <_malloc_r+0x22>
 8007b72:	6025      	str	r5, [r4, #0]
 8007b74:	e7dc      	b.n	8007b30 <_malloc_r+0xb0>
 8007b76:	605b      	str	r3, [r3, #4]
 8007b78:	deff      	udf	#255	; 0xff
 8007b7a:	bf00      	nop
 8007b7c:	200006f8 	.word	0x200006f8

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f7ff bf07 	b.w	8007994 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	200006f4 	.word	0x200006f4

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f7ff bf02 	b.w	8007996 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	200006f4 	.word	0x200006f4

08007b98 <__ssputs_r>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	688e      	ldr	r6, [r1, #8]
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	42be      	cmp	r6, r7
 8007ba2:	680b      	ldr	r3, [r1, #0]
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	4690      	mov	r8, r2
 8007baa:	d82c      	bhi.n	8007c06 <__ssputs_r+0x6e>
 8007bac:	898a      	ldrh	r2, [r1, #12]
 8007bae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bb2:	d026      	beq.n	8007c02 <__ssputs_r+0x6a>
 8007bb4:	6965      	ldr	r5, [r4, #20]
 8007bb6:	6909      	ldr	r1, [r1, #16]
 8007bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bbc:	eba3 0901 	sub.w	r9, r3, r1
 8007bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bc4:	1c7b      	adds	r3, r7, #1
 8007bc6:	444b      	add	r3, r9
 8007bc8:	106d      	asrs	r5, r5, #1
 8007bca:	429d      	cmp	r5, r3
 8007bcc:	bf38      	it	cc
 8007bce:	461d      	movcc	r5, r3
 8007bd0:	0553      	lsls	r3, r2, #21
 8007bd2:	d527      	bpl.n	8007c24 <__ssputs_r+0x8c>
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7ff ff53 	bl	8007a80 <_malloc_r>
 8007bda:	4606      	mov	r6, r0
 8007bdc:	b360      	cbz	r0, 8007c38 <__ssputs_r+0xa0>
 8007bde:	6921      	ldr	r1, [r4, #16]
 8007be0:	464a      	mov	r2, r9
 8007be2:	f000 faeb 	bl	80081bc <memcpy>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	6126      	str	r6, [r4, #16]
 8007bf4:	6165      	str	r5, [r4, #20]
 8007bf6:	444e      	add	r6, r9
 8007bf8:	eba5 0509 	sub.w	r5, r5, r9
 8007bfc:	6026      	str	r6, [r4, #0]
 8007bfe:	60a5      	str	r5, [r4, #8]
 8007c00:	463e      	mov	r6, r7
 8007c02:	42be      	cmp	r6, r7
 8007c04:	d900      	bls.n	8007c08 <__ssputs_r+0x70>
 8007c06:	463e      	mov	r6, r7
 8007c08:	6820      	ldr	r0, [r4, #0]
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	4641      	mov	r1, r8
 8007c0e:	f000 faab 	bl	8008168 <memmove>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	1b9b      	subs	r3, r3, r6
 8007c16:	60a3      	str	r3, [r4, #8]
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	4433      	add	r3, r6
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c24:	462a      	mov	r2, r5
 8007c26:	f000 fad7 	bl	80081d8 <_realloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d1e0      	bne.n	8007bf2 <__ssputs_r+0x5a>
 8007c30:	6921      	ldr	r1, [r4, #16]
 8007c32:	4650      	mov	r0, sl
 8007c34:	f7ff feb8 	bl	80079a8 <_free_r>
 8007c38:	230c      	movs	r3, #12
 8007c3a:	f8ca 3000 	str.w	r3, [sl]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4a:	e7e9      	b.n	8007c20 <__ssputs_r+0x88>

08007c4c <_svfiprintf_r>:
 8007c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c50:	4698      	mov	r8, r3
 8007c52:	898b      	ldrh	r3, [r1, #12]
 8007c54:	061b      	lsls	r3, r3, #24
 8007c56:	b09d      	sub	sp, #116	; 0x74
 8007c58:	4607      	mov	r7, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	d50e      	bpl.n	8007c7e <_svfiprintf_r+0x32>
 8007c60:	690b      	ldr	r3, [r1, #16]
 8007c62:	b963      	cbnz	r3, 8007c7e <_svfiprintf_r+0x32>
 8007c64:	2140      	movs	r1, #64	; 0x40
 8007c66:	f7ff ff0b 	bl	8007a80 <_malloc_r>
 8007c6a:	6028      	str	r0, [r5, #0]
 8007c6c:	6128      	str	r0, [r5, #16]
 8007c6e:	b920      	cbnz	r0, 8007c7a <_svfiprintf_r+0x2e>
 8007c70:	230c      	movs	r3, #12
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e0d0      	b.n	8007e1c <_svfiprintf_r+0x1d0>
 8007c7a:	2340      	movs	r3, #64	; 0x40
 8007c7c:	616b      	str	r3, [r5, #20]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9309      	str	r3, [sp, #36]	; 0x24
 8007c82:	2320      	movs	r3, #32
 8007c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8c:	2330      	movs	r3, #48	; 0x30
 8007c8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e34 <_svfiprintf_r+0x1e8>
 8007c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c96:	f04f 0901 	mov.w	r9, #1
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	469a      	mov	sl, r3
 8007c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca2:	b10a      	cbz	r2, 8007ca8 <_svfiprintf_r+0x5c>
 8007ca4:	2a25      	cmp	r2, #37	; 0x25
 8007ca6:	d1f9      	bne.n	8007c9c <_svfiprintf_r+0x50>
 8007ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cac:	d00b      	beq.n	8007cc6 <_svfiprintf_r+0x7a>
 8007cae:	465b      	mov	r3, fp
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff ff6f 	bl	8007b98 <__ssputs_r>
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f000 80a9 	beq.w	8007e12 <_svfiprintf_r+0x1c6>
 8007cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cc2:	445a      	add	r2, fp
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f000 80a1 	beq.w	8007e12 <_svfiprintf_r+0x1c6>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cda:	f10a 0a01 	add.w	sl, sl, #1
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	9307      	str	r3, [sp, #28]
 8007ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce8:	4654      	mov	r4, sl
 8007cea:	2205      	movs	r2, #5
 8007cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf0:	4850      	ldr	r0, [pc, #320]	; (8007e34 <_svfiprintf_r+0x1e8>)
 8007cf2:	f7f8 fa85 	bl	8000200 <memchr>
 8007cf6:	9a04      	ldr	r2, [sp, #16]
 8007cf8:	b9d8      	cbnz	r0, 8007d32 <_svfiprintf_r+0xe6>
 8007cfa:	06d0      	lsls	r0, r2, #27
 8007cfc:	bf44      	itt	mi
 8007cfe:	2320      	movmi	r3, #32
 8007d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d04:	0711      	lsls	r1, r2, #28
 8007d06:	bf44      	itt	mi
 8007d08:	232b      	movmi	r3, #43	; 0x2b
 8007d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d12:	2b2a      	cmp	r3, #42	; 0x2a
 8007d14:	d015      	beq.n	8007d42 <_svfiprintf_r+0xf6>
 8007d16:	9a07      	ldr	r2, [sp, #28]
 8007d18:	4654      	mov	r4, sl
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	f04f 0c0a 	mov.w	ip, #10
 8007d20:	4621      	mov	r1, r4
 8007d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d26:	3b30      	subs	r3, #48	; 0x30
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	d94d      	bls.n	8007dc8 <_svfiprintf_r+0x17c>
 8007d2c:	b1b0      	cbz	r0, 8007d5c <_svfiprintf_r+0x110>
 8007d2e:	9207      	str	r2, [sp, #28]
 8007d30:	e014      	b.n	8007d5c <_svfiprintf_r+0x110>
 8007d32:	eba0 0308 	sub.w	r3, r0, r8
 8007d36:	fa09 f303 	lsl.w	r3, r9, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	46a2      	mov	sl, r4
 8007d40:	e7d2      	b.n	8007ce8 <_svfiprintf_r+0x9c>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	1d19      	adds	r1, r3, #4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	9103      	str	r1, [sp, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bfbb      	ittet	lt
 8007d4e:	425b      	neglt	r3, r3
 8007d50:	f042 0202 	orrlt.w	r2, r2, #2
 8007d54:	9307      	strge	r3, [sp, #28]
 8007d56:	9307      	strlt	r3, [sp, #28]
 8007d58:	bfb8      	it	lt
 8007d5a:	9204      	strlt	r2, [sp, #16]
 8007d5c:	7823      	ldrb	r3, [r4, #0]
 8007d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d60:	d10c      	bne.n	8007d7c <_svfiprintf_r+0x130>
 8007d62:	7863      	ldrb	r3, [r4, #1]
 8007d64:	2b2a      	cmp	r3, #42	; 0x2a
 8007d66:	d134      	bne.n	8007dd2 <_svfiprintf_r+0x186>
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	1d1a      	adds	r2, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	9203      	str	r2, [sp, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bfb8      	it	lt
 8007d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d78:	3402      	adds	r4, #2
 8007d7a:	9305      	str	r3, [sp, #20]
 8007d7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e44 <_svfiprintf_r+0x1f8>
 8007d80:	7821      	ldrb	r1, [r4, #0]
 8007d82:	2203      	movs	r2, #3
 8007d84:	4650      	mov	r0, sl
 8007d86:	f7f8 fa3b 	bl	8000200 <memchr>
 8007d8a:	b138      	cbz	r0, 8007d9c <_svfiprintf_r+0x150>
 8007d8c:	9b04      	ldr	r3, [sp, #16]
 8007d8e:	eba0 000a 	sub.w	r0, r0, sl
 8007d92:	2240      	movs	r2, #64	; 0x40
 8007d94:	4082      	lsls	r2, r0
 8007d96:	4313      	orrs	r3, r2
 8007d98:	3401      	adds	r4, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da0:	4825      	ldr	r0, [pc, #148]	; (8007e38 <_svfiprintf_r+0x1ec>)
 8007da2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da6:	2206      	movs	r2, #6
 8007da8:	f7f8 fa2a 	bl	8000200 <memchr>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d038      	beq.n	8007e22 <_svfiprintf_r+0x1d6>
 8007db0:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <_svfiprintf_r+0x1f0>)
 8007db2:	bb1b      	cbnz	r3, 8007dfc <_svfiprintf_r+0x1b0>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	3307      	adds	r3, #7
 8007db8:	f023 0307 	bic.w	r3, r3, #7
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	9303      	str	r3, [sp, #12]
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	4433      	add	r3, r6
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	e768      	b.n	8007c9a <_svfiprintf_r+0x4e>
 8007dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dcc:	460c      	mov	r4, r1
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e7a6      	b.n	8007d20 <_svfiprintf_r+0xd4>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	3401      	adds	r4, #1
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f04f 0c0a 	mov.w	ip, #10
 8007dde:	4620      	mov	r0, r4
 8007de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de4:	3a30      	subs	r2, #48	; 0x30
 8007de6:	2a09      	cmp	r2, #9
 8007de8:	d903      	bls.n	8007df2 <_svfiprintf_r+0x1a6>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0c6      	beq.n	8007d7c <_svfiprintf_r+0x130>
 8007dee:	9105      	str	r1, [sp, #20]
 8007df0:	e7c4      	b.n	8007d7c <_svfiprintf_r+0x130>
 8007df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df6:	4604      	mov	r4, r0
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e7f0      	b.n	8007dde <_svfiprintf_r+0x192>
 8007dfc:	ab03      	add	r3, sp, #12
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	462a      	mov	r2, r5
 8007e02:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <_svfiprintf_r+0x1f4>)
 8007e04:	a904      	add	r1, sp, #16
 8007e06:	4638      	mov	r0, r7
 8007e08:	f3af 8000 	nop.w
 8007e0c:	1c42      	adds	r2, r0, #1
 8007e0e:	4606      	mov	r6, r0
 8007e10:	d1d6      	bne.n	8007dc0 <_svfiprintf_r+0x174>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	065b      	lsls	r3, r3, #25
 8007e16:	f53f af2d 	bmi.w	8007c74 <_svfiprintf_r+0x28>
 8007e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e1c:	b01d      	add	sp, #116	; 0x74
 8007e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e22:	ab03      	add	r3, sp, #12
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	462a      	mov	r2, r5
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <_svfiprintf_r+0x1f4>)
 8007e2a:	a904      	add	r1, sp, #16
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f000 f879 	bl	8007f24 <_printf_i>
 8007e32:	e7eb      	b.n	8007e0c <_svfiprintf_r+0x1c0>
 8007e34:	080083c0 	.word	0x080083c0
 8007e38:	080083ca 	.word	0x080083ca
 8007e3c:	00000000 	.word	0x00000000
 8007e40:	08007b99 	.word	0x08007b99
 8007e44:	080083c6 	.word	0x080083c6

08007e48 <_printf_common>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	4699      	mov	r9, r3
 8007e50:	688a      	ldr	r2, [r1, #8]
 8007e52:	690b      	ldr	r3, [r1, #16]
 8007e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bfb8      	it	lt
 8007e5c:	4613      	movlt	r3, r2
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e64:	4607      	mov	r7, r0
 8007e66:	460c      	mov	r4, r1
 8007e68:	b10a      	cbz	r2, 8007e6e <_printf_common+0x26>
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	0699      	lsls	r1, r3, #26
 8007e72:	bf42      	ittt	mi
 8007e74:	6833      	ldrmi	r3, [r6, #0]
 8007e76:	3302      	addmi	r3, #2
 8007e78:	6033      	strmi	r3, [r6, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	f015 0506 	ands.w	r5, r5, #6
 8007e80:	d106      	bne.n	8007e90 <_printf_common+0x48>
 8007e82:	f104 0a19 	add.w	sl, r4, #25
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	6832      	ldr	r2, [r6, #0]
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	42ab      	cmp	r3, r5
 8007e8e:	dc26      	bgt.n	8007ede <_printf_common+0x96>
 8007e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e94:	1e13      	subs	r3, r2, #0
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	bf18      	it	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	0692      	lsls	r2, r2, #26
 8007e9e:	d42b      	bmi.n	8007ef8 <_printf_common+0xb0>
 8007ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	47c0      	blx	r8
 8007eaa:	3001      	adds	r0, #1
 8007eac:	d01e      	beq.n	8007eec <_printf_common+0xa4>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	f003 0306 	and.w	r3, r3, #6
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	bf02      	ittt	eq
 8007eba:	68e5      	ldreq	r5, [r4, #12]
 8007ebc:	6833      	ldreq	r3, [r6, #0]
 8007ebe:	1aed      	subeq	r5, r5, r3
 8007ec0:	68a3      	ldr	r3, [r4, #8]
 8007ec2:	bf0c      	ite	eq
 8007ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ec8:	2500      	movne	r5, #0
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	bfc4      	itt	gt
 8007ece:	1a9b      	subgt	r3, r3, r2
 8007ed0:	18ed      	addgt	r5, r5, r3
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	341a      	adds	r4, #26
 8007ed6:	42b5      	cmp	r5, r6
 8007ed8:	d11a      	bne.n	8007f10 <_printf_common+0xc8>
 8007eda:	2000      	movs	r0, #0
 8007edc:	e008      	b.n	8007ef0 <_printf_common+0xa8>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	47c0      	blx	r8
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d103      	bne.n	8007ef4 <_printf_common+0xac>
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	3501      	adds	r5, #1
 8007ef6:	e7c6      	b.n	8007e86 <_printf_common+0x3e>
 8007ef8:	18e1      	adds	r1, r4, r3
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	2030      	movs	r0, #48	; 0x30
 8007efe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f02:	4422      	add	r2, r4
 8007f04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	e7c7      	b.n	8007ea0 <_printf_common+0x58>
 8007f10:	2301      	movs	r3, #1
 8007f12:	4622      	mov	r2, r4
 8007f14:	4649      	mov	r1, r9
 8007f16:	4638      	mov	r0, r7
 8007f18:	47c0      	blx	r8
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d0e6      	beq.n	8007eec <_printf_common+0xa4>
 8007f1e:	3601      	adds	r6, #1
 8007f20:	e7d9      	b.n	8007ed6 <_printf_common+0x8e>
	...

08007f24 <_printf_i>:
 8007f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	7e0f      	ldrb	r7, [r1, #24]
 8007f2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f2c:	2f78      	cmp	r7, #120	; 0x78
 8007f2e:	4691      	mov	r9, r2
 8007f30:	4680      	mov	r8, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	469a      	mov	sl, r3
 8007f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f3a:	d807      	bhi.n	8007f4c <_printf_i+0x28>
 8007f3c:	2f62      	cmp	r7, #98	; 0x62
 8007f3e:	d80a      	bhi.n	8007f56 <_printf_i+0x32>
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	f000 80d4 	beq.w	80080ee <_printf_i+0x1ca>
 8007f46:	2f58      	cmp	r7, #88	; 0x58
 8007f48:	f000 80c0 	beq.w	80080cc <_printf_i+0x1a8>
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f54:	e03a      	b.n	8007fcc <_printf_i+0xa8>
 8007f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f5a:	2b15      	cmp	r3, #21
 8007f5c:	d8f6      	bhi.n	8007f4c <_printf_i+0x28>
 8007f5e:	a101      	add	r1, pc, #4	; (adr r1, 8007f64 <_printf_i+0x40>)
 8007f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f64:	08007fbd 	.word	0x08007fbd
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08007f4d 	.word	0x08007f4d
 8007f70:	08007f4d 	.word	0x08007f4d
 8007f74:	08007f4d 	.word	0x08007f4d
 8007f78:	08007f4d 	.word	0x08007f4d
 8007f7c:	08007fd1 	.word	0x08007fd1
 8007f80:	08007f4d 	.word	0x08007f4d
 8007f84:	08007f4d 	.word	0x08007f4d
 8007f88:	08007f4d 	.word	0x08007f4d
 8007f8c:	08007f4d 	.word	0x08007f4d
 8007f90:	080080d5 	.word	0x080080d5
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	0800808f 	.word	0x0800808f
 8007f9c:	08007f4d 	.word	0x08007f4d
 8007fa0:	08007f4d 	.word	0x08007f4d
 8007fa4:	080080f7 	.word	0x080080f7
 8007fa8:	08007f4d 	.word	0x08007f4d
 8007fac:	08007ffd 	.word	0x08007ffd
 8007fb0:	08007f4d 	.word	0x08007f4d
 8007fb4:	08007f4d 	.word	0x08007f4d
 8007fb8:	08008097 	.word	0x08008097
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	1d1a      	adds	r2, r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e09f      	b.n	8008110 <_printf_i+0x1ec>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	682b      	ldr	r3, [r5, #0]
 8007fd4:	0607      	lsls	r7, r0, #24
 8007fd6:	f103 0104 	add.w	r1, r3, #4
 8007fda:	6029      	str	r1, [r5, #0]
 8007fdc:	d501      	bpl.n	8007fe2 <_printf_i+0xbe>
 8007fde:	681e      	ldr	r6, [r3, #0]
 8007fe0:	e003      	b.n	8007fea <_printf_i+0xc6>
 8007fe2:	0646      	lsls	r6, r0, #25
 8007fe4:	d5fb      	bpl.n	8007fde <_printf_i+0xba>
 8007fe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	da03      	bge.n	8007ff6 <_printf_i+0xd2>
 8007fee:	232d      	movs	r3, #45	; 0x2d
 8007ff0:	4276      	negs	r6, r6
 8007ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff6:	485a      	ldr	r0, [pc, #360]	; (8008160 <_printf_i+0x23c>)
 8007ff8:	230a      	movs	r3, #10
 8007ffa:	e012      	b.n	8008022 <_printf_i+0xfe>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	6029      	str	r1, [r5, #0]
 8008004:	0605      	lsls	r5, r0, #24
 8008006:	d501      	bpl.n	800800c <_printf_i+0xe8>
 8008008:	681e      	ldr	r6, [r3, #0]
 800800a:	e002      	b.n	8008012 <_printf_i+0xee>
 800800c:	0641      	lsls	r1, r0, #25
 800800e:	d5fb      	bpl.n	8008008 <_printf_i+0xe4>
 8008010:	881e      	ldrh	r6, [r3, #0]
 8008012:	4853      	ldr	r0, [pc, #332]	; (8008160 <_printf_i+0x23c>)
 8008014:	2f6f      	cmp	r7, #111	; 0x6f
 8008016:	bf0c      	ite	eq
 8008018:	2308      	moveq	r3, #8
 800801a:	230a      	movne	r3, #10
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008022:	6865      	ldr	r5, [r4, #4]
 8008024:	60a5      	str	r5, [r4, #8]
 8008026:	2d00      	cmp	r5, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90e      	cbnz	r6, 8008038 <_printf_i+0x114>
 8008034:	2d00      	cmp	r5, #0
 8008036:	d04b      	beq.n	80080d0 <_printf_i+0x1ac>
 8008038:	4615      	mov	r5, r2
 800803a:	fbb6 f1f3 	udiv	r1, r6, r3
 800803e:	fb03 6711 	mls	r7, r3, r1, r6
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008048:	4637      	mov	r7, r6
 800804a:	42bb      	cmp	r3, r7
 800804c:	460e      	mov	r6, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x116>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x148>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07de      	lsls	r6, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x148>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	; 0x30
 8008064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800806c:	1b52      	subs	r2, r2, r5
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee4 	bl	8007e48 <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14a      	bne.n	800811a <_printf_i+0x1f6>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	4833      	ldr	r0, [pc, #204]	; (8008164 <_printf_i+0x240>)
 8008098:	2778      	movs	r7, #120	; 0x78
 800809a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6829      	ldr	r1, [r5, #0]
 80080a2:	061f      	lsls	r7, r3, #24
 80080a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a8:	d402      	bmi.n	80080b0 <_printf_i+0x18c>
 80080aa:	065f      	lsls	r7, r3, #25
 80080ac:	bf48      	it	mi
 80080ae:	b2b6      	uxthmi	r6, r6
 80080b0:	07df      	lsls	r7, r3, #31
 80080b2:	bf48      	it	mi
 80080b4:	f043 0320 	orrmi.w	r3, r3, #32
 80080b8:	6029      	str	r1, [r5, #0]
 80080ba:	bf48      	it	mi
 80080bc:	6023      	strmi	r3, [r4, #0]
 80080be:	b91e      	cbnz	r6, 80080c8 <_printf_i+0x1a4>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	f023 0320 	bic.w	r3, r3, #32
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	2310      	movs	r3, #16
 80080ca:	e7a7      	b.n	800801c <_printf_i+0xf8>
 80080cc:	4824      	ldr	r0, [pc, #144]	; (8008160 <_printf_i+0x23c>)
 80080ce:	e7e4      	b.n	800809a <_printf_i+0x176>
 80080d0:	4615      	mov	r5, r2
 80080d2:	e7bd      	b.n	8008050 <_printf_i+0x12c>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	6826      	ldr	r6, [r4, #0]
 80080d8:	6961      	ldr	r1, [r4, #20]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6028      	str	r0, [r5, #0]
 80080de:	0635      	lsls	r5, r6, #24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0x1c4>
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0x1ca>
 80080e8:	0670      	lsls	r0, r6, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0x1c0>
 80080ec:	8019      	strh	r1, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	4615      	mov	r5, r2
 80080f4:	e7bc      	b.n	8008070 <_printf_i+0x14c>
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	602a      	str	r2, [r5, #0]
 80080fc:	681d      	ldr	r5, [r3, #0]
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	2100      	movs	r1, #0
 8008102:	4628      	mov	r0, r5
 8008104:	f7f8 f87c 	bl	8000200 <memchr>
 8008108:	b108      	cbz	r0, 800810e <_printf_i+0x1ea>
 800810a:	1b40      	subs	r0, r0, r5
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	2300      	movs	r3, #0
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	e7aa      	b.n	8008070 <_printf_i+0x14c>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	462a      	mov	r2, r5
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d0ad      	beq.n	8008084 <_printf_i+0x160>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d413      	bmi.n	8008156 <_printf_i+0x232>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	bfb8      	it	lt
 8008136:	4618      	movlt	r0, r3
 8008138:	e7a6      	b.n	8008088 <_printf_i+0x164>
 800813a:	2301      	movs	r3, #1
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d09d      	beq.n	8008084 <_printf_i+0x160>
 8008148:	3501      	adds	r5, #1
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	42ab      	cmp	r3, r5
 8008152:	dcf2      	bgt.n	800813a <_printf_i+0x216>
 8008154:	e7eb      	b.n	800812e <_printf_i+0x20a>
 8008156:	2500      	movs	r5, #0
 8008158:	f104 0619 	add.w	r6, r4, #25
 800815c:	e7f5      	b.n	800814a <_printf_i+0x226>
 800815e:	bf00      	nop
 8008160:	080083d1 	.word	0x080083d1
 8008164:	080083e2 	.word	0x080083e2

08008168 <memmove>:
 8008168:	4288      	cmp	r0, r1
 800816a:	b510      	push	{r4, lr}
 800816c:	eb01 0402 	add.w	r4, r1, r2
 8008170:	d902      	bls.n	8008178 <memmove+0x10>
 8008172:	4284      	cmp	r4, r0
 8008174:	4623      	mov	r3, r4
 8008176:	d807      	bhi.n	8008188 <memmove+0x20>
 8008178:	1e43      	subs	r3, r0, #1
 800817a:	42a1      	cmp	r1, r4
 800817c:	d008      	beq.n	8008190 <memmove+0x28>
 800817e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008186:	e7f8      	b.n	800817a <memmove+0x12>
 8008188:	4402      	add	r2, r0
 800818a:	4601      	mov	r1, r0
 800818c:	428a      	cmp	r2, r1
 800818e:	d100      	bne.n	8008192 <memmove+0x2a>
 8008190:	bd10      	pop	{r4, pc}
 8008192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800819a:	e7f7      	b.n	800818c <memmove+0x24>

0800819c <_sbrk_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_sbrk_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f9 fe10 	bl	8001dcc <_sbrk>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_sbrk_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_sbrk_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	200006f0 	.word	0x200006f0

080081bc <memcpy>:
 80081bc:	440a      	add	r2, r1
 80081be:	4291      	cmp	r1, r2
 80081c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081c4:	d100      	bne.n	80081c8 <memcpy+0xc>
 80081c6:	4770      	bx	lr
 80081c8:	b510      	push	{r4, lr}
 80081ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081d2:	4291      	cmp	r1, r2
 80081d4:	d1f9      	bne.n	80081ca <memcpy+0xe>
 80081d6:	bd10      	pop	{r4, pc}

080081d8 <_realloc_r>:
 80081d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081dc:	4680      	mov	r8, r0
 80081de:	4614      	mov	r4, r2
 80081e0:	460e      	mov	r6, r1
 80081e2:	b921      	cbnz	r1, 80081ee <_realloc_r+0x16>
 80081e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	4611      	mov	r1, r2
 80081ea:	f7ff bc49 	b.w	8007a80 <_malloc_r>
 80081ee:	b92a      	cbnz	r2, 80081fc <_realloc_r+0x24>
 80081f0:	f7ff fbda 	bl	80079a8 <_free_r>
 80081f4:	4625      	mov	r5, r4
 80081f6:	4628      	mov	r0, r5
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	f000 f81b 	bl	8008236 <_malloc_usable_size_r>
 8008200:	4284      	cmp	r4, r0
 8008202:	4607      	mov	r7, r0
 8008204:	d802      	bhi.n	800820c <_realloc_r+0x34>
 8008206:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800820a:	d812      	bhi.n	8008232 <_realloc_r+0x5a>
 800820c:	4621      	mov	r1, r4
 800820e:	4640      	mov	r0, r8
 8008210:	f7ff fc36 	bl	8007a80 <_malloc_r>
 8008214:	4605      	mov	r5, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	d0ed      	beq.n	80081f6 <_realloc_r+0x1e>
 800821a:	42bc      	cmp	r4, r7
 800821c:	4622      	mov	r2, r4
 800821e:	4631      	mov	r1, r6
 8008220:	bf28      	it	cs
 8008222:	463a      	movcs	r2, r7
 8008224:	f7ff ffca 	bl	80081bc <memcpy>
 8008228:	4631      	mov	r1, r6
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff fbbc 	bl	80079a8 <_free_r>
 8008230:	e7e1      	b.n	80081f6 <_realloc_r+0x1e>
 8008232:	4635      	mov	r5, r6
 8008234:	e7df      	b.n	80081f6 <_realloc_r+0x1e>

08008236 <_malloc_usable_size_r>:
 8008236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823a:	1f18      	subs	r0, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfbc      	itt	lt
 8008240:	580b      	ldrlt	r3, [r1, r0]
 8008242:	18c0      	addlt	r0, r0, r3
 8008244:	4770      	bx	lr
	...

08008248 <_init>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	bf00      	nop
 800824c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824e:	bc08      	pop	{r3}
 8008250:	469e      	mov	lr, r3
 8008252:	4770      	bx	lr

08008254 <_fini>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr
